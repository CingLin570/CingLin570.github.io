<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS 選擇器中加號(+)和波浪號(~)</title>
    <url>/2021/02/14/CSS%20%E9%81%B8%E6%93%87%E5%99%A8%E4%B8%AD%E5%8A%A0%E8%99%9F%EF%BC%88+%EF%BC%89%E5%92%8C%E5%8F%96%E4%BB%A3%E7%AC%A6%E8%99%9F%EF%BC%8F%E6%B3%A2%E6%B5%AA%E8%99%9F%EF%BC%88~%EF%BC%89%E7%9A%84%E6%84%8F%E6%80%9D/</url>
    <content><![CDATA[<h1 id="CSS中的加號"><a href="#CSS中的加號" class="headerlink" title="CSS中的加號(+)"></a>CSS中的加號(+)</h1><p>讓我們先來看一下加號，加號影響的是同一階層（siblings）的標籤，例如，div + p指的是直接影響到div後的p，而div和p是屬於同一層的<br>為了方便大家理解，我們直接來看一下範例吧！</p>
<a id="more"></a>
<p>我們的html結構長這樣：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>One<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Six<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Seven<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接著，我在STYLE的地方，加入如下的CSS:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> + <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">font-size</span>:<span class="number">50px</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>這時候有哪些字體會變大呢？結果如下：<br>我們可以看到Three和Six都變大了，之所以Three和Six會變大，是因為CSS是選擇div + p，所以所有在同一階層（siblings）的情況下，如果是div接著碰到的p，都會受到影響。</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="CSS中的加號(+)" src="https://codepen.io/pvzfeusk/embed/OJbWogd?height=265&theme-id=dark&default-tab=html,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/pvzfeusk/pen/OJbWogd'>CSS中的加號(+)</a> by 胡謦麟
  (<a href='https://codepen.io/pvzfeusk'>@pvzfeusk</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<h1 id="CSS中的取代符號"><a href="#CSS中的取代符號" class="headerlink" title="CSS中的取代符號(~)"></a>CSS中的取代符號(~)</h1><p>那麼取代符號（~）呢？（註：我查了一下google才知道這個符號叫做取代符號）。</p>
<p>取代符號其實和加號用法很類似，只是加號只會影響到下一個同階層的元素，但是取代符合則是影響到下一個同階層的所有元素。用中文說實在非常難解釋…，還是讓我們看一下例子。</p>
<p>我們用一樣的HTML結構，只是現在把CSS換成如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> ~ <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">font-size</span>:<span class="number">50px</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>這時候的結果會長這樣子：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="CSS中的取代符號(~)" src="https://codepen.io/pvzfeusk/embed/PobWdJV?height=265&theme-id=dark&default-tab=html,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/pvzfeusk/pen/PobWdJV'>CSS中的取代符號(~)</a> by 胡謦麟
  (<a href='https://codepen.io/pvzfeusk'>@pvzfeusk</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>這時候連Seven也跟著變大了，Seven之以跟著變大是因為seven同樣是在div之後的p（碰到的第二個p），在上面加號的例子中，div + p只會影響到div之後的第一個p，不會影響到後續的p，但如果使用的是div~p，則div後面的p都能夠有影響。</p>
<p>總結來說，<br>p+p：同一層中，p後面的第一個p；<br>p~p：同一層中，p後面的所有p。</p>
<p>參考: <a href="https://pjchender.blogspot.com/2015/07/css_25.html">CSS 選擇器中加號（+）和取代符號／波浪號（~）的意思</a></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 選擇器中大於符號是什麼意思?</title>
    <url>/2021/02/14/CSS%E9%81%B8%E6%93%87%E5%99%A8%E4%B8%AD%E7%9A%84%E5%A4%A7%E6%96%BC%E6%98%AF%E4%BB%80%E9%BA%BC%E6%84%8F%E6%80%9D/</url>
    <content><![CDATA[<h1 id="CSS大於符號"><a href="#CSS大於符號" class="headerlink" title="CSS大於符號"></a>CSS大於符號</h1><p>CSS選擇器中的大於（&gt;）是什麼意思？<br>在編輯網頁CSS的時候，有時候我們會看到大於（&gt;）的符號，究竟這個符號代表什麼意思呢？</p>
<p>這個符號其實相當容易理解，你可以把它想成直接的小孩(direct descendant/child)，而平常比較容易看到的空格（space）則是所有小孩的意思。</p>
<p>這是什麼意思呢？讓我們看個範例比較容易理解。</p>
<a id="more"></a>
<p>假設我先寫一個html文件，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>This is the first child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the second child<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the third child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接下來，我們分別套用不同的CSS來看看會有什麼不同的效果。</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="LYbxMVy" src="https://codepen.io/pvzfeusk/embed/LYbxMVy?height=265&theme-id=dark&default-tab=html,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/pvzfeusk/pen/LYbxMVy'>LYbxMVy</a> by 胡謦麟
  (<a href='https://codepen.io/pvzfeusk'>@pvzfeusk</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>因為大於（&gt;）只會影響到直接的小孩，所以在container之後，直接碰到p的只有third，所以結果就是只有third的字體會變大。</p>
<p>接下來，我們試試看常用的「空格（space）」，我把css改成：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="CSS 大於符號" src="https://codepen.io/pvzfeusk/embed/bGBgOEz?height=265&theme-id=dark&default-tab=html,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/pvzfeusk/pen/bGBgOEz'>CSS 大於符號</a> by 胡謦麟
  (<a href='https://codepen.io/pvzfeusk'>@pvzfeusk</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>因為沒有指定要直接的小孩，所以只要是container裡面，所有p的標籤的字體都會變大，結果如下：</p>
<p>最後，如果我在css的地方只選擇container呢，像這樣的話：</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="CSS 類別選擇器" src="https://codepen.io/pvzfeusk/embed/qBqRLZm?height=265&theme-id=dark&default-tab=html,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/pvzfeusk/pen/qBqRLZm'>CSS 類別選擇器</a> by 胡謦麟
  (<a href='https://codepen.io/pvzfeusk'>@pvzfeusk</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<p>希望這樣的說明，能夠幫助大家更瞭解css中大於這個符號的意思。</p>
<p>CSS-Tricks的這一張圖清楚的說明了&gt;和空格的差異：</p>
<p><img src="https://i.imgur.com/935Lbrj.png"></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Pages 教學手冊</title>
    <url>/2021/02/24/githubpage/</url>
    <content><![CDATA[<h1 id="從-0-到-1-的-GitHub-Pages-教學手冊"><a href="#從-0-到-1-的-GitHub-Pages-教學手冊" class="headerlink" title="從 0 到 1 的 GitHub Pages 教學手冊"></a>從 0 到 1 的 GitHub Pages 教學手冊</h1><h2 id="影片教學"><a href="#影片教學" class="headerlink" title="影片教學"></a>影片教學</h2><p>Windows：<a href="https://youtu.be/PldKaxOkN1o">https://youtu.be/PldKaxOkN1o</a><br>Mac：<a href="https://youtu.be/DjgsqLLJrxM">https://youtu.be/DjgsqLLJrxM</a></p>
<a id="more"></a>
<h2 id="開始前注意事項"><a href="#開始前注意事項" class="headerlink" title="開始前注意事項"></a>開始前注意事項</h2><ul>
<li>本次教學使用 GitHub Desktop 應用程式操作</li>
<li>著重於不需要了解 <strong>Git指令</strong> 與 <strong>Git觀念知識</strong></li>
<li>Windows 作業系統必須是 64bit</li>
<li>提交作業的話，請打開 GitHub Pages 的功能，就可以在網路上看到你的畫面哦</li>
</ul>
<blockquote>
<p><a href="https://support.microsoft.com/zh-tw/help/15056/windows-32-64-bit-faq">32 位元與 64 位元 Windows： 常見問題集</a></p>
</blockquote>
<blockquote>
<p><a href="https://desktop.github.com/">GitHub Desktop 下載連結</a><br>請依作業系統 Download<br>教學操作版本號為 2.4.0 不同版本介面可能有所不同</p>
</blockquote>
<p><img src="https://i.imgur.com/iXLtTjA.png"></p>
<h2 id="閱讀指南"><a href="#閱讀指南" class="headerlink" title="閱讀指南"></a>閱讀指南</h2><ul>
<li>我們會模擬開發的狀況，來介紹如何 <strong>初次上傳</strong> 與 <strong>修改後上傳</strong></li>
<li>閱讀本教學手冊時，可以透過畫面右側的文章導覽到達指定標題</li>
<li>若對於以下操作想要深入了解的話，建議上是先學習 <strong>Git是什麼</strong></li>
</ul>
<h2 id="GitHub-註冊"><a href="#GitHub-註冊" class="headerlink" title="GitHub 註冊"></a>GitHub 註冊</h2><blockquote>
<p>複製以下的連結，前往 GitHub 官網<br><a href="https://github.com/">https://github.com/</a></p>
</blockquote>
<ul>
<li>依下圖所示填寫你的資料，點擊 <strong><code>Sign up for GitHub</code></strong></li>
</ul>
<p><img src="https://i.imgur.com/utGgXBw.png"></p>
<ul>
<li>接著會有 <strong>機器人驗證</strong> 與 <strong>Email 郵件推播資訊勾選框</strong></li>
</ul>
<p><img src="https://i.imgur.com/GItHLNO.png"></p>
<ul>
<li>接著會有選擇 GitHub 帳號的相關資訊</li>
<li>請選擇 Individual (<strong>個人</strong>) 與 Free</li>
</ul>
<p><img src="https://i.imgur.com/d63IPiF.png"></p>
<ul>
<li>接著就歡迎使用 GitHub 並且要你填寫來源資訊，這個可以按 <strong><code>Skip this step</code></strong></li>
</ul>
<p><img src="https://i.imgur.com/1GPNoDW.png"></p>
<ul>
<li>恭喜到這邊後，就可以去驗證電子郵件</li>
<li>驗證後就已經完成註冊</li>
</ul>
<p><img src="https://i.imgur.com/42X7R5a.png"></p>
<h2 id="初次上傳"><a href="#初次上傳" class="headerlink" title="初次上傳"></a>初次上傳</h2><h3 id="專案程式碼"><a href="#專案程式碼" class="headerlink" title="專案程式碼"></a>專案程式碼</h3><ul>
<li>請於習慣路徑建立專案資料夾</li>
<li>接著我們照著下圖的方式，模擬專案已完成</li>
</ul>
<p><img src="https://i.imgur.com/uQJUuKH.png"></p>
<h3 id="GitHub-Desktop-設定"><a href="#GitHub-Desktop-設定" class="headerlink" title="GitHub Desktop 設定"></a>GitHub Desktop 設定</h3><ul>
<li>打開一開始就下載的 GitHub Desktop 執行檔</li>
<li>一開始建議先去設定以下兩點<ul>
<li>GitHub 帳號綁定</li>
<li>Git 使用者與信箱 (<strong>不設定的話，等等上傳會叫你設定</strong>)</li>
</ul>
</li>
<li>跟著下方的圖示點開 <code>Options</code></li>
</ul>
<p><img src="https://i.imgur.com/M98XuXp.png"></p>
<ul>
<li>登入 GitHub 帳號</li>
</ul>
<p><img src="https://i.imgur.com/eo6F4gQ.png"></p>
<ul>
<li>切換到 Git 填寫 Name 與 Email</li>
</ul>
<p><img src="https://i.imgur.com/T5OeeEU.png"></p>
<blockquote>
<p>Name 與 Email 是指我們每一次專案版本修改並提交紀錄的使用者</p>
<p><img src="https://i.imgur.com/op5rIw8.png"></p>
</blockquote>
<h3 id="建立-Repository"><a href="#建立-Repository" class="headerlink" title="建立 Repository"></a>建立 Repository</h3><blockquote>
<p>Repository 的翻譯是儲存庫<br>意思是會把專案資料夾的檔案複製一份加到 Repository 裡面</p>
</blockquote>
<p>從下圖會看到左邊有4個選項</p>
<ol>
<li>建立操作教程的儲存庫</li>
<li>從網路上的儲存庫複製一份到本機上</li>
<li>建立一個新的儲存庫到本機上</li>
<li>從本機上加入已存在的儲存庫</li>
</ol>
<blockquote>
<p>注意:warning:<br>我們要選擇 <code>選項4</code> 因為我們已經有專案，只是還沒有儲存庫<br><code>選項3</code> 是創建一個 <strong>空的專案資料夾</strong> 與 <strong>內建儲存庫</strong></p>
</blockquote>
<p><img src="https://i.imgur.com/rdZaJhS.png"></p>
<ul>
<li>接著依下圖操作</li>
</ul>
<p><img src="https://i.imgur.com/dMy3lU9.png"></p>
<ul>
<li>若沒意外的話，會跳出下圖警告，意思是檔案內沒有儲存庫</li>
<li>此時點選 <strong><code>create a repository</code></strong> 建立儲存庫</li>
</ul>
<p><img src="https://i.imgur.com/ZE0PpIy.png"></p>
<ul>
<li>接著會看到以下圖示</li>
<li>特別注意的是 Local path 已經綁定資料夾，你不能 Choose 它</li>
<li>建立儲存庫的各選項資訊為<ul>
<li>Name (儲存庫名稱)</li>
<li>Description (儲存庫的描述 e.g 第一週作業)</li>
<li>lnitialize this..(儲存庫初始化階段，建立 README 檔案)</li>
<li>Gitignore (需要被儲存庫忽略的檔案)</li>
<li>License (授權宣告，意思是別人取用檔案的話自身權益的保障)</li>
</ul>
</li>
</ul>
<blockquote>
<p>以上選項可以只填寫 <strong>Name</strong> 就好哩，接著按下 <strong>Create Repository</strong></p>
</blockquote>
<p><img src="https://i.imgur.com/ad0coOP.png"></p>
<ul>
<li>接著請看下圖的紅框 LiveCourse 就是已建立的 <strong>repository</strong></li>
<li>下方有 <strong>Changes</strong> 與 <strong>History</strong></li>
</ul>
<p><img src="https://i.imgur.com/r5gHHnP.png"></p>
<ul>
<li>接著我們切換 <code>History</code> 會看到以下的初始化檔案紀錄</li>
</ul>
<blockquote>
<p>:warning: 此時專案資料夾內會有 .git 與 .gitattributes</p>
<ul>
<li>.git 是隱藏資料夾 (這個代表著你的儲存庫)</li>
<li>.gitattributes 這個是 Git 斷行字元處理 (請不要理它)</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/3Wrpy4o.png"></p>
<blockquote>
<p>到這邊就完成了建立 Repository 的流程:beers:</p>
</blockquote>
<h3 id="推上-GitHub-伺服器"><a href="#推上-GitHub-伺服器" class="headerlink" title="推上 GitHub 伺服器"></a>推上 GitHub 伺服器</h3><ul>
<li>我們接續上一個步驟的 <strong>History</strong></li>
<li>你會發現程式碼已經被儲存庫完整紀錄下來</li>
<li>這個時候選單切換為 <strong>Changes</strong></li>
<li>點選下圖的紅框 <strong>發佈儲存庫</strong> (推上 GitHub 伺服器)</li>
</ul>
<blockquote>
<p>這邊就不特別 Google翻譯…請自行查詢藍框內的英文</p>
</blockquote>
<p><img src="https://i.imgur.com/JRuEk5D.png"></p>
<ul>
<li>接著彈出的視窗，要畫重點注意</li>
<li>選項上我們不是企業，是屬於個人要選擇 <strong><code>GitHub.com</code></strong></li>
<li>Name 這個會自動帶入儲存庫名稱</li>
<li>Description 描述可空白</li>
<li>Keep this code private <strong>這個重要了！請取消勾選</strong></li>
</ul>
<blockquote>
<p>:warning: 決定了發佈 GitHub 伺服器的儲存庫是否公開</p>
<ul>
<li>取消勾選 = 公開</li>
<li>已勾選 = 私密</li>
</ul>
<p>如果是勾選狀態傳給助教或老師批改就會出現 GitHub 404 頁面<br>這個時候筆者就把你釘在牆上，我在講你有沒有在看，沒有嘛！！</p>
</blockquote>
<ul>
<li>接著就放心地按下按鈕</li>
</ul>
<p><img src="https://i.imgur.com/rxEk02d.png"></p>
<ul>
<li>接著開啟 GitHub 並且登入帳號</li>
<li>按照下圖可以點擊 Your repository 或者畫面左側的儲存庫名稱</li>
<li>特別注意的是此畫面是已經上傳的儲存庫為私密狀態</li>
<li>若你的已經是公開，可以大概看一下儲存庫 <strong>Settings</strong> 按鈕在哪</li>
<li>接著會教如何改回公開，即可避免被筆者釘到牆上</li>
</ul>
<p><img src="https://i.imgur.com/Hy5yJW7.png"></p>
<ul>
<li>當你發現點進去儲存庫後是 Private 的話</li>
<li>請點擊 <strong>Settings</strong></li>
</ul>
<p><img src="https://i.imgur.com/p5lbCr8.png"></p>
<ul>
<li>當切到 Settings畫面後，頁面滾到最下方找到 Danger Zone</li>
<li>點擊 Make pubilc</li>
</ul>
<p><img src="https://i.imgur.com/r8kXCMb.png"></p>
<ul>
<li>輸入紅框內的文字</li>
<li>就可以點擊按鈕切換成公開</li>
<li>此時切回專案資料夾的畫面 Private 就會消失，就不放圖囉</li>
</ul>
<p><img src="https://i.imgur.com/ncrCMQT.png"></p>
<h3 id="GitHub-Pages-設置"><a href="#GitHub-Pages-設置" class="headerlink" title="GitHub Pages 設置"></a>GitHub Pages 設置</h3><ul>
<li>接著透過 GitHub 建立靜態網站稱為 GitHub Pages</li>
<li>我們在 Settings 頁面找尋 GitHub Pages 標題如下圖所示</li>
<li>找到後點擊 <strong>下拉式按鈕</strong> 選擇 master branch</li>
</ul>
<p><img src="https://i.imgur.com/PITpqrt.png"></p>
<ul>
<li>接著會畫面會閃一下重整頁面</li>
<li>回到 GitHub Pages 標題，就會發現如下圖所示</li>
<li>可以看到下圖的藍框有一串網址，這個就是你的靜態網站網址</li>
</ul>
<blockquote>
<p>生成靜態網站的速度，依專案大小而定通常不超過3小時</p>
</blockquote>
<p><img src="https://i.imgur.com/38pNo28.png"></p>
<p>截止於此，你的專案可以傳給助教或老師檢閱囉<br>接下來是當建立儲存庫專案已被追蹤，修改後的操作</p>
<h2 id="修改後上傳"><a href="#修改後上傳" class="headerlink" title="修改後上傳"></a>修改後上傳</h2><h3 id="專案程式碼-1"><a href="#專案程式碼-1" class="headerlink" title="專案程式碼"></a>專案程式碼</h3><ul>
<li>接著我們模擬一下程式碼修改</li>
</ul>
<p><img src="https://i.imgur.com/bIsYRwV.png"></p>
<h3 id="GitHub-Desktop-操作"><a href="#GitHub-Desktop-操作" class="headerlink" title="GitHub Desktop 操作"></a>GitHub Desktop 操作</h3><ul>
<li>程式碼儲存後，回到 <strong>GitHub Desktop</strong></li>
<li>就會發現 Changes 後面多了 <code>(1)</code> 這代表1個檔案被修改過</li>
<li>從下圖來看可以發現修改的程式碼，完整顯示於畫面上</li>
<li>這時候來到左下方紅框 - 意思提交檔案紀錄的選項</li>
</ul>
<p><img src="https://i.imgur.com/QQPFfco.png"></p>
<ul>
<li>依下圖所示會看到 “被助教釘在牆上修改版本_v1”</li>
<li>這個意思是本次提交檔案紀錄的標題</li>
<li>至於 Description 就是這次提交紀錄的描述</li>
</ul>
<blockquote>
<p>標題通常會寫 <strong>修改程式碼的主要操作</strong> e.g. 修改 Footer 外距誤差值<br>描述可以不寫，但是若覺得程式碼修改比較複雜，可以有善利用描述</p>
</blockquote>
<ul>
<li>接著就是點擊 <strong><code>Commit to master</code></strong></li>
</ul>
<p><img src="https://i.imgur.com/My8lNLK.png"></p>
<ul>
<li>接著切換到 <strong>History</strong> 就會發現多一筆紀錄是 <strong>被助教釘在牆上修改版本_v1</strong></li>
</ul>
<p><img src="https://i.imgur.com/WrhuleX.png"></p>
<ul>
<li>這個時候，就已經修改好本機的儲存庫</li>
<li>接下來要上傳 GitHub 伺服器囉</li>
<li>請切換回 <strong>Changes</strong></li>
<li>點擊 <strong>Push origin</strong> 後會跑一下等到按鈕消失即可</li>
</ul>
<p><img src="https://i.imgur.com/X70kS8b.png"></p>
<ul>
<li>接著回到 GitHub 儲存庫</li>
<li>依下圖所示，會發現 <strong>commits</strong> 這個提交紀錄是 2 次</li>
<li>index.html 後面的版本紀錄最新的是 <strong>被助教釘在牆上修改版本_v1</strong></li>
</ul>
<p><img src="https://i.imgur.com/UM2GOnv.png"></p>
<ul>
<li>接著打開靜態網站網址，畫面上會同步更新</li>
</ul>
<blockquote>
<p>如果沒有的話，要稍微等一下重新整理</p>
</blockquote>
<p>截止於此，修改後上傳已經完成囉:beers:</p>
<h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><h3 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h3><p>當你建立好儲存庫，你的專案資料夾內有 <code>.git</code><br>重新打開後 VS Code 會跳出以下的警示，找不到 Git 應用程式</p>
<p><img src="https://i.imgur.com/nMLC9p6.png"></p>
<p>這是因為 GitHub Desktop 是採內建 Git 應用程式</p>
<p>解決方案：<br>點擊連結去官方下載 Git 應用程式，全域安裝在你的系統內</p>
<blockquote>
<p><a href="https://git-scm.com/">https://git-scm.com/</a></p>
</blockquote>
<h3 id="GitHub-Pages-404"><a href="#GitHub-Pages-404" class="headerlink" title="GitHub Pages 404"></a>GitHub Pages 404</h3><ul>
<li>如果你的 GitHub Pages 出現以下問題</li>
</ul>
<p><img src="https://i.imgur.com/p9VPvqx.png"></p>
<ul>
<li>如果資料夾結構是類似於以下的圖示</li>
</ul>
<p><img src="https://i.imgur.com/g93adzd.png"></p>
<p>這樣 GitHub Pages 會抓不到 <strong>index.html</strong><br>你必須手動更改網址讓它指向 <strong>index.html</strong></p>
<p>範例如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;username.github.io&#x2F;儲存庫名稱&#x2F;work1&#x2F;index.html&#x2F;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果資料夾結構是類似於以下的圖示</li>
</ul>
<p><img src="https://i.imgur.com/HJrXrLj.png"></p>
<ul>
<li>但是以下的網址還是 404</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;username.github.io&#x2F;儲存庫名稱&#x2F;</span><br></pre></td></tr></table></figure>

<ul>
<li>請試著手動輸入 index.html 讓它指向 index.html 檔案</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;username.github.io&#x2F;儲存庫名稱&#x2F;index.html</span><br></pre></td></tr></table></figure>

<ul>
<li>或者你的資料結構 html 檔名，不是 index 的話，請改寫為你的檔名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;username.github.io&#x2F;儲存庫名稱&#x2F;檔名.html</span><br></pre></td></tr></table></figure>

<h3 id="忽略檔案"><a href="#忽略檔案" class="headerlink" title="忽略檔案"></a>忽略檔案</h3><ul>
<li>假設你想加入一些範例在資料夾內，但是又不想把它加入到儲存庫，可以參考以下的圖示。</li>
<li>本次圖示是以新增 example 資料夾為例</li>
</ul>
<p><img src="https://i.imgur.com/g6sH0hd.gif"></p>
<blockquote>
<p>推薦 VScode 套件，可以針對檔案右鍵加入忽略 - <a href="https://marketplace.visualstudio.com/items?itemName=michelemelluso.gitignore">連結</a></p>
</blockquote>
<h3 id="深入研究-Git"><a href="#深入研究-Git" class="headerlink" title="深入研究 Git"></a>深入研究 Git</h3><blockquote>
<p>這裡是提供給讀者，學習 Git 的資源參考</p>
</blockquote>
<ul>
<li><a href="https://w3c.hexschool.com/git/cfdbd310">Git &amp; GitHub 教學手冊 - 六角學院</a></li>
<li><a href="https://gitbook.tw/">為你自己學 Git - 作者高見龍</a></li>
<li><a href="https://github.com/doggy8088/Learn-Git-in-30-days/blob/master/zh-tw/README.md">30 天精通 Git 版本控管 - 作者黃保翕 ( Will 保哥 )</a></li>
<li><a href="https://git-scm.com/book/zh-tw/v2">Git 官方中文教學</a></li>
<li><a href="https://backlog.com/git-tutorial/tw/">連猴子都能懂的 Git 入門指南</a></li>
</ul>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp安裝流程</title>
    <url>/2021/02/28/gulp%E5%AE%89%E8%A3%9D%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="gulp-環境安裝流程"><a href="#gulp-環境安裝流程" class="headerlink" title="gulp 環境安裝流程"></a>gulp 環境安裝流程</h1><h2 id="影片教學-請不會使用-gulp-的新手，直接看這部"><a href="#影片教學-請不會使用-gulp-的新手，直接看這部" class="headerlink" title="影片教學(請不會使用 gulp 的新手，直接看這部)"></a>影片教學(請不會使用 gulp 的新手，直接看這部)</h2><a id="more"></a>
<div class="video-container"><iframe src="https://www.youtube.com/embed/mZnMsYVHUkA" frameborder="0" loading="lazy" allowfullscreen></iframe></div>

<h3 id="步驟一：安裝-Node-js，請打開終端機或命令提示字元，輸入-node-v-後按-Enter，看是否有顯示版本號"><a href="#步驟一：安裝-Node-js，請打開終端機或命令提示字元，輸入-node-v-後按-Enter，看是否有顯示版本號" class="headerlink" title="步驟一：安裝 Node.js，請打開終端機或命令提示字元，輸入 node -v 後按 Enter，看是否有顯示版本號"></a>步驟一：安裝 <a href="https://nodejs.org/en/">Node.js</a>，請打開終端機或命令提示字元，輸入 <code>node -v</code> 後按 Enter，看是否有顯示版本號</h3><p><img src="https://i.imgur.com/tMn6b6n.gif"></p>
<p>PS1：Mac 請按 command+空白鍵，輸入「terminal」打開終端機<br>PS2：Win 請按 開始 &gt; 執行 &gt; 輸入「cmd」打開命令提示字元<br>Win10 執行視窗快速鍵為 win + R:<br><img src="https://i.imgur.com/xM3UOZG.jpg"></p>
<p><img src="https://i.imgur.com/fEKbeaR.png"></p>
<p>在版本號較新的 Win10 也可在左下搜尋欄輸入 cmd 打開命令提示字元:<br><img src="https://i.imgur.com/UsXljox.jpg"></p>
<h3 id="步驟二：在終端機安裝-gulp，繼續輸入指令-npm-i-gulp-4-g-按-Enter-安裝，輸入-gulp-v-查詢是否有回報版本號。"><a href="#步驟二：在終端機安裝-gulp，繼續輸入指令-npm-i-gulp-4-g-按-Enter-安裝，輸入-gulp-v-查詢是否有回報版本號。" class="headerlink" title="步驟二：在終端機安裝 gulp，繼續輸入指令 npm i gulp@4 -g 按 Enter 安裝，輸入 gulp -v 查詢是否有回報版本號。"></a>步驟二：在終端機安裝 gulp，繼續輸入指令 <code>npm i gulp@4 -g</code> 按 Enter 安裝，輸入 <code>gulp -v</code> 查詢是否有回報版本號。</h3><h3 id="步驟三：下載此資料夾，並解壓縮"><a href="#步驟三：下載此資料夾，並解壓縮" class="headerlink" title="步驟三：下載此資料夾，並解壓縮"></a>步驟三：下載此<a href="https://github.com/hexschool/web-layout-training-gulp">資料夾</a>，並解壓縮</h3><p><img src="https://i.imgur.com/OYjJLXH.jpg"></p>
<h3 id="步驟四：移動到該資料夾，cd-移動到該資料夾，如果移動成功，win-輸入指令dir、Mac-輸入指令-ls，可以觀看該資料裡的檔案列表，如下-Win-截圖。"><a href="#步驟四：移動到該資料夾，cd-移動到該資料夾，如果移動成功，win-輸入指令dir、Mac-輸入指令-ls，可以觀看該資料裡的檔案列表，如下-Win-截圖。" class="headerlink" title="步驟四：移動到該資料夾，cd 移動到該資料夾，如果移動成功，win 輸入指令dir、Mac 輸入指令 ls，可以觀看該資料裡的檔案列表，如下 Win 截圖。"></a>步驟四：移動到該資料夾，cd 移動到該資料夾，如果移動成功，win 輸入指令<code>dir</code>、Mac 輸入指令 <code>ls</code>，可以觀看該資料裡的檔案列表，如下 Win 截圖。</h3><p><img src="https://i.imgur.com/Xl4ShdL.png"></p>
<h3 id="步驟五：輸入指令-npm-install-安裝插件"><a href="#步驟五：輸入指令-npm-install-安裝插件" class="headerlink" title="步驟五：輸入指令 npm install 安裝插件"></a>步驟五：輸入指令 <code>npm install</code> 安裝插件</h3><h3 id="步驟六：輸入指令-gulp-執行"><a href="#步驟六：輸入指令-gulp-執行" class="headerlink" title="步驟六：輸入指令 gulp 執行"></a>步驟六：輸入指令 <code>gulp </code>執行</h3><h3 id="步驟七：若步驟六執行成功，會打開瀏覽器，看到下方畫面，就代表你全部都成功了！"><a href="#步驟七：若步驟六執行成功，會打開瀏覽器，看到下方畫面，就代表你全部都成功了！" class="headerlink" title="步驟七：若步驟六執行成功，會打開瀏覽器，看到下方畫面，就代表你全部都成功了！"></a>步驟七：若步驟六執行成功，會打開瀏覽器，看到下方畫面，就代表你全部都成功了！</h3><p><img src="https://i.imgur.com/QvvDPZS.png"></p>
<h2 id="步驟八：如果你都做完了，要將網頁部署到-GitHub-Pages-，請上傳-dist-資料夾，流程請觀看影片，從-40-秒開始觀看留意相關細節，"><a href="#步驟八：如果你都做完了，要將網頁部署到-GitHub-Pages-，請上傳-dist-資料夾，流程請觀看影片，從-40-秒開始觀看留意相關細節，" class="headerlink" title="步驟八：如果你都做完了，要將網頁部署到 GitHub Pages ，請上傳 dist 資料夾，流程請觀看影片，從 40 秒開始觀看留意相關細節，"></a>步驟八：如果你都做完了，要將網頁部署到 GitHub Pages ，請上傳 dist 資料夾，流程請觀看<a href="https://www.youtube.com/watch?v=pa4Ydm7WT9k&feature=youtu.be">影片，從 40 秒開始觀看</a>留意相關細節，</h2><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="步驟一-常見問答"><a href="#步驟一-常見問答" class="headerlink" title="步驟一 常見問答"></a>步驟一 常見問答</h3><p>Q：windows 安裝 node.js 以後，輸入 node -v 沒顯示版本號怎麼辦？？<br>A：請重新開機再嘗試</p>
<p>Q：Windows 的命令提示字元怎麼快速開啟？<br>A：請到 開始 &gt; 執行 &gt; 輸入 <code>cmd</code> 就可直接開啟</p>
<h3 id="步驟二-常見問答"><a href="#步驟二-常見問答" class="headerlink" title="步驟二 常見問答"></a>步驟二 常見問答</h3><p>Q：我是 Mac，安裝沒有成功怎麼辦？<br>A：指令請換成 <code>sudo npm i gulp@4 -g</code></p>
<p><img src="https://i.imgur.com/GJOw1fE.png"></p>
]]></content>
      <categories>
        <category>gulp</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>第一週 1 px 也不差的版型控制術</title>
    <url>/2021/02/14/%E5%85%AD%E8%A7%92%E5%AD%B8%E9%99%A2%E5%88%87%E7%89%88%E7%9B%B4%E6%92%AD%E7%8F%AD%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在2020年的1月入伍，在入伍的期間也開始為自己的未來做打算，在之前也是上六角學院的課程，<br>也陸續買了很多相關課程，因為也不知道什麼時候進去蹲，自己的計畫一直沒有實現，在某一天晚<br>上手機看到通知點進去看，看到了這個之後~</p>
<p><img src="https://i.imgur.com/DYJUGFA.png"></p>
<a id="more"></a>
<p>休假回去立馬下單，自己也稍微思考了一下，八周的課程，我每周回去還有時間上課，而且距離退伍也<br>快了，自己也趁這個機會好好訓練自己一波。</p>
<h1 id="第一週-1-px-也不差的版型控制術"><a href="#第一週-1-px-也不差的版型控制術" class="headerlink" title="第一週 1 px 也不差的版型控制術"></a>第一週 1 px 也不差的版型控制術</h1><p>為什麼叫做 1 px 也不差的版型控制術呢，簡單來說就是透過這堂課程了解網頁的結構，包括圖片產生的<br>微小差距，讓爾後在切版的時候更注意這些細節~~</p>
<p><img src="https://i.imgur.com/7Nqt0Tq.png"></p>
<h1 id="建立環境"><a href="#建立環境" class="headerlink" title="建立環境"></a>建立環境</h1><p>在這裡課程有推薦一個非常好用的東西，叫做 Emmet，我們透過它可以節省很多切版網頁的時間</p>
<blockquote>
<p><a href="https://docs.emmet.io/cheat-sheet/">emmet 指令大全</a></p>
</blockquote>
<p>再來我們要介紹的是網頁結構，網頁可以切分為容器與元素，然後元素又分為區塊元素及行內元素</p>
<p>究竟甚麼是區塊元素及行內元素呢?</p>
<blockquote>
<p>CSS規範規定，每个元素都有display屬性，每個元素都有默認的display值，如div的display默認值为&gt; “block”，則為“區塊”元素；span默認display屬性值为“inline”，是“行内”元素。</p>
</blockquote>
<h2 id="區塊元素"><a href="#區塊元素" class="headerlink" title="區塊元素"></a>區塊元素</h2><p>1.區塊(block)元素會另起一行<br>2.會盡可能撐滿父元素<br>3.可以設定寬高</p>
<p><img src="https://i.imgur.com/Kn7FCak.png"></p>
<p>區塊元素常見包括:<br>div、p、h1~h6、<br>ul、ol、li、<br>dl、dt、dd、<br>form、table、hr、<br>blockquote 、<br>address、menu、pre…..等等</p>
<h2 id="行內元素"><a href="#行內元素" class="headerlink" title="行內元素"></a>行內元素</h2><p>1.和其他元素都在一行上，相臨的行内元素会排列在同一行，<br> 直到一行排不下，才會換行，其寬度隨元素的内容而變化。<br>2.設置寬高無效，只能由内容撑起来，即行内元素設置width，height屬性無效。<br>3.設置上下margin、padding无效，左右padding 、margin有效<br>4.水平方向的padding-left 、padding-right、margin-left、margin-right都<br> 會產生效果，但上下方向的padding-top、padding-bottom、margin-top 、<br> margin-bottom不會產生邊距效果。</p>
<p><img src="https://i.imgur.com/zmwS4qn.png"></p>
<p>行內元素常見包括:<br>span、em、i、b、strong、a、img、input、br、select、textarea、q、bdo、sub、sup…等等</p>
<h2 id="display-inline-block"><a href="#display-inline-block" class="headerlink" title="display:inline-block"></a>display:inline-block</h2><p>在這邊也介紹 <strong>display:inline-block</strong></p>
<p>以inline的方式呈現，但同時擁有block的屬性<br>可設定元素的寬高/margin/padding<br>可水平排列</p>
<p><img src="https://i.imgur.com/1fKGswX.png"></p>
<p>可以發現設定display:inline-block 後，即可同時擁有block可設定寬高的屬性，但其排版仍像inline屬性，並不會向右占滿整個容器。</p>
<p>以上範例圖，都可以在以下codepen試試看哦</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="區塊元素與行內元素" src="https://codepen.io/pvzfeusk/embed/dyOvNjp?height=265&theme-id=dark&default-tab=html,result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/pvzfeusk/pen/dyOvNjp'>區塊元素與行內元素</a> by 胡謦麟
  (<a href='https://codepen.io/pvzfeusk'>@pvzfeusk</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<h1 id="CSS-Reset"><a href="#CSS-Reset" class="headerlink" title="CSS Reset"></a>CSS Reset</h1><p>當剛開始撰寫網頁的時候，會發現自己的網頁有些許的跑版，其實那是網頁的預設樣式，這時候就會需要<br>CSS Reset 來清楚網頁預設樣式，CSS Reset又有分好幾種，比較常見的就是 CSS Reset 與 CSS normalize。</p>
<p><img src="https://i.imgur.com/YVcM2xy.png"></p>
<h2 id="CSS-Reset-1"><a href="#CSS-Reset-1" class="headerlink" title="CSS Reset"></a>CSS Reset</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">applet</span>, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>,</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">acronym</span>, <span class="selector-tag">address</span>, <span class="selector-tag">big</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">font</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, <span class="selector-tag">s</span>, <span class="selector-tag">samp</span>,</span><br><span class="line"><span class="selector-tag">small</span>, <span class="selector-tag">strike</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">sub</span>, <span class="selector-tag">sup</span>, <span class="selector-tag">tt</span>, <span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: inherit;</span><br><span class="line">	<span class="attribute">font-style</span>: inherit;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">font-family</span>: inherit;</span><br><span class="line">	<span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* remember to define focus styles! */</span></span><br><span class="line"><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">	<span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">	<span class="attribute">color</span>: black;</span><br><span class="line">	<span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">	<span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* tables still need &#x27;cellspacing=&quot;0&quot;&#x27; in the markup */</span></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">	<span class="attribute">border-collapse</span>: separate;</span><br><span class="line">	<span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">caption</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">	<span class="attribute">text-align</span>: left;</span><br><span class="line">	<span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span> &#123;</span><br><span class="line">	<span class="attribute">quotes</span>: <span class="string">&quot;&quot;</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>做法是把所有瀏覽器最不一致的地方強制歸 0，可以看到最一開始那一大串 html tag 的 margin、padding、border、outline 全都設為 0</p>
<p>優點是統整、重置了各個瀏覽器的樣式設定。<br>缺點是必須全部重新做設定，比較沒有彈性，而且在使用開發者工具時會看到一大坨的繼承鏈(inheritance chain)。</p>
<h2 id="CSS-Normalize"><a href="#CSS-Normalize" class="headerlink" title="CSS Normalize"></a>CSS Normalize</h2><p>因為 reset.css 重置了各個瀏覽器的樣式設定，使得有些有用、常用標籤的默認樣式必須要重新設定，因為這個問題，有人開發出了 normalize.css，典型的 Bootstrap 就是使用這款 CSS Reset。</p>
<p>保留有用的瀏覽器默認設置，而不是將其刪除。<br>為廣泛的 HTML 元素提供一般化的樣式。<br>修正瀏覽器的 Bug 與不一致。<br>透過微妙的改善提高可用性。<br>有詳細的文檔來解釋代碼。(每個樣式都有註解是處理什麼問題。)<br>最大的特色就是保留原本預設 HTML 標籤的樣式，僅針對不同瀏覽器與各版本間不相容的標籤進行些微調整。</p>
]]></content>
      <categories>
        <category>六角切版直播班</category>
      </categories>
      <tags>
        <tag>html css</tag>
      </tags>
  </entry>
  <entry>
    <title>陳述式與表達式</title>
    <url>/2020/11/09/%E9%99%B3%E8%BF%B0%E5%BC%8F%E8%88%87%E8%A1%A8%E9%81%94%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="陳述式與表達式"><a href="#陳述式與表達式" class="headerlink" title="陳述式與表達式"></a>陳述式與表達式</h1><p><img src="https://i.imgur.com/BlWAbb7.png"></p>
<a id="more"></a>

<p>在我們觀看 MDN 文件的時候可以看到JavaScript 的陳述式與表達式有那些，</p>
<p>陳述式:</p>
<ul>
<li>var、let、const</li>
<li>if…else</li>
<li>for</li>
<li>block</li>
<li>函式陳述式</li>
</ul>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Cli</title>
    <url>/2020/11/04/vue/</url>
    <content><![CDATA[<h1 id="Vue-Cli"><a href="#Vue-Cli" class="headerlink" title="Vue Cli"></a>Vue Cli</h1><p>圖一<br><img src="https://i.imgur.com/aNwSDtY.png"></p>
<a id="more"></a>
<p>圖二<br><img src="https://i.imgur.com/2M2CLCy.png"></p>
<p>我們在開發的過程中，會使用很多的檔案，例如jpg、png檔案等等，我們也可能有撰寫javaScript程式碼，使用到ES6的語法，在比較舊的瀏覽器就沒辦法運行，我們也可能會撰寫sass或是scss這種預處理器，還有.vue的檔案，.vue的檔案簡單來說一個檔案就是一個元件，這個元件包含了html、js、css，把這三個都結合在一起在開發上也比較容易。<br>(圖二)左邊是我們撰寫的檔案，右邊則是輸出的可以運行的檔案，因為我們沒辦法直接讀取像是sass、scss、.vue，所以會建立一個main.js，把所有檔案都進行關聯，除此之外還會建立一個loader，它會把所有檔案都載進來，最後還有一個output輸出檔案的位子，Webpack要做的事情就是，把這些loader跟main.js產生關聯性，再藉由Webpack編譯，雖然左邊的檔案沒辦法直接運行它，但是進行編譯之後呢，輸出之後就是瀏覽器可以運行的版本。<br>圖三<br><img src="https://i.imgur.com/3YbT69U.png"></p>
<p>簡單來說，Webpack就是把我們開發中使用的工具和套件全部整合在一起，並且使用npm的方式來運行。</p>
<p><img src="https://i.imgur.com/Hwd3OXK.png"></p>
<h2 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h2><p>簡單來說就是由前端模擬的路由，那麼(路由)我們可以想像成一個網址，目前我們看到的網頁都是由後端決定的路由，SPA呢就是由前端所決定的路由，會在/後面加上#字號，#字號後面的user，就是我們實際運行的網址，實際上呢也只會切換#字號後面的網址，頁面也會跟著做更換；通常後端決定的路由在網頁切換的時候會有一個閃爍的感覺，如果使用前端決定的路由，更能提升使用者體驗<br><img src="https://i.imgur.com/0I2f0yJ.png"></p>
<p><img src="https://i.imgur.com/G7i5GJK.png"></p>
<h2 id="安裝-Node-js"><a href="#安裝-Node-js" class="headerlink" title="安裝 Node.js"></a>安裝 Node.js</h2><p>目前有許多前端開發環境都是基於 Node.js，如 Gulp、Webpack、Parcel…，或是任何主流框架（Vue、React、Angular）的 CLI 也都是基於此服務。本次要介紹的 Vue Cli 自然也不例外。</p>
<p>進入官網安裝 <a href="https://nodejs.org/en/">Node.js</a>，請打開終端機或命令提示字元，輸入 <code>node -v</code> 後按 Enter，看是否有顯示版本號。</p>
<p><img src="https://i.imgur.com/tMn6b6n.gif"></p>
<blockquote>
<p>Mac 請按 command+空白鍵，輸入「terminal」打開終端機<br>Win 請按 開始 &gt; 執行 &gt; 輸入「cmd」打開命令提示字元<br>Win10 執行視窗快速鍵為 win + R:</p>
</blockquote>
<p><img src="https://i.imgur.com/xM3UOZG.jpg"></p>
<p><img src="https://i.imgur.com/fEKbeaR.png"></p>
<p>在版本號較新的 Win10 也可在左下搜尋欄輸入 cmd 打開命令提示字元:</p>
<p><img src="https://i.imgur.com/UsXljox.jpg"></p>
<p>請確保 Node.js 在第 9 版以上（官方建議：<code>8.11.0+</code>）。</p>
<h2 id="Vue-CLI-安裝"><a href="#Vue-CLI-安裝" class="headerlink" title="Vue CLI 安裝"></a>Vue CLI 安裝</h2><p><img src="https://i.imgur.com/6uhIFx9.png"><br><code>npm install -g @vue/cli</code> 是使用全域的環境建立vue。</p>
<p><img src="https://i.imgur.com/yMyJDBy.png"><br>到了這裡基本上Vue CLI就已經下載完成，Vue CLI的運行方式有兩種，第一種是使用指令的方式終端機(terminal)，另一種是使用vue ui的方式，在這裡我們使用ui的方式來運行。</p>
<p><img src="https://i.imgur.com/govrlEi.png"></p>
<p>第一次開發的話進來基本上不會有內容，再來點擊新增</p>
<p><img src="https://i.imgur.com/qcddG6a.png"></p>
<p><img src="https://i.imgur.com/WuZKKWy.png"></p>
<p><img src="https://i.imgur.com/EFgn5e4.png"></p>
<p><img src="https://i.imgur.com/W2SUt8U.png"><br>這邊是課程建議開啟的功能:</p>
<p>Babel:在撰寫js的時候很常使用ES6的語法，為了確保這些語法在所有的瀏覽器能夠正確運行。</p>
<p>TypeScript: js的預處理器。</p>
<p>Router:建議直接在Vue CLI的部分直接啟用，在之後使用上也比較方便，會直接給一個初始的loader環境，以後實作就不用手動開啟。</p>
<p>Vuex:資料狀態管理的工具</p>
<p>CSS Pre-processors:CSS的預處理器。</p>
<p>Linter/Formatter:檢查程式碼有沒有排整齊，建議開啟。</p>
<p>最後面兩個是測試工具</p>
<p><img src="https://i.imgur.com/h6IsXJ9.png"></p>
<p>History Mode 切記不要開啟，當開啟之後呢，私服器必須做額外的設定才能運行(開了老師不會幫我們改作業)。<br><img src="https://i.imgur.com/TBBnPmj.png"><br>直接新增不儲存</p>
<p><img src="https://i.imgur.com/ry3yPxI.png"><br>開發使用的話大多使用前兩個</p>
<p><img src="https://i.imgur.com/yw5EEs9.png"><br>node_modules:這是我們所安裝的套件包含sass(scss)、.vue檔案這些功能都是安裝在這裡</p>
<p>public:這個資料夾是公開的資料夾，這個資料夾的內容都不會被編譯，像是.png、.jpg的檔案就很適合放在這裡面</p>
<p><img src="https://i.imgur.com/HBll11c.png"><br>雖然不會被編譯，但index.html呢實際上編譯的時候，會做一些些調整，像我們編譯完會進行一些插入，css、js就會插入到html裡面</p>
<p><img src="https://i.imgur.com/Vj11447.png"><br>再來我們還會有更目錄下的檔案，就是我們運行的環境</p>
<p>package.json:安裝套件所記錄的檔案</p>
<h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><p><img src="https://i.imgur.com/5k2b0gV.png"></p>
<p>主要是放在src的資料夾裡，main.js是我們的主要檔案，所有的檔案都會跟它產生關聯</p>
<p><img src="https://i.imgur.com/Wyybx6I.png"></p>
<p><img src="https://i.imgur.com/M42gXXc.png"></p>
<p>會看到vue、App.vue和router與main.js產生關聯，而router裡有Home跟About的頁面產生關聯。<br><img src="https://i.imgur.com/h1nKHlZ.png"><br>Home.vue跟About.vue都是一個完整的頁面<br><img src="https://i.imgur.com/zwu1aGG.png"><br>再來說說component資料夾，這是在我們主頁面下的小元件，像是這些就能掛載到Home.vue和About.vue頁面上，再由路由載進來，最後掛載到main.js上。</p>
<p>如果我們要撰寫js、css(sass)的話我們會寫在assets的資料夾內。</p>
<p>最後透過編譯，會編譯成輸出的檔案例如:public資料夾裡的index.html，使用ui裡的build建立dist檔案，注意這裡dist檔案無法直接開啟，必須使用webServer開啟。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 1(非同步概念、建立 Promise)</title>
    <url>/2022/04/24/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-8/</url>
    <content><![CDATA[<h1 id="🏅-Day-1"><a href="#🏅-Day-1" class="headerlink" title="🏅 Day 1"></a>🏅 Day 1</h1><h2 id="非同步概念、建立-Promise"><a href="#非同步概念、建立-Promise" class="headerlink" title="非同步概念、建立 Promise"></a>非同步概念、建立 Promise</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因接下來在實作後端處理請求、存取資料庫並回傳資料、回應，需要等待結果，就會需要使用到非同步作法，而以往的非同步做法是使用 callback function 的寫法，這個寫法的問題是若是一層接著一層接連使用 callback 會造成難以閱讀、追蹤程式碼，Promise 語法是較新的非同步作法，會更容易閱讀一些</p>
<a id="more"></a>
<h3 id="建立-Promise-簡介"><a href="#建立-Promise-簡介" class="headerlink" title="建立 Promise 簡介"></a>建立 Promise 簡介</h3><p>Promise 是一個物件，代表一個即將完成或失敗的非同步操作，以及回傳的值<br>語法為：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 執行一些非同步作業，最終呼叫:</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// resolve(someValue); // 實現</span></span><br><span class="line">  <span class="comment">// 或</span></span><br><span class="line">  <span class="comment">// reject(&quot;failure reason&quot;); // 拒絕</span></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<p>其中兩個參數 resolve 及 reject 都是函式，分別代表實現（完成）及拒絕的函式，當非同步操作成功完成時就會執行 resolve 函式完成 promise，錯誤、失敗則執行 reject 函式，若是<code>(resolve, reject) =&gt; &#123; ... &#125;</code> 函式執行時出錯，promise 會被拒絕，執行 reject 函式時會回傳 error 物件或失敗訊息</p>
<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Asynchronous/Introducing">非同步的 JavaScript 介紹 - 學習該如何開發 Web | MDN</a><br><a href="https://www.casper.tw/development/2020/02/16/all-new-promise/">JavaScript Promise 全介紹 | 卡斯伯 Blog - 前端，沒有極限</a><br><a href="https://courses.hexschool.com/courses/1670869/lectures/38886982">Node.js 非同步技巧 - Promise、Async、Await</a>（章節影片）</p>
<h3 id="題目（將答案寫在-CodePen-並提交至回報區）"><a href="#題目（將答案寫在-CodePen-並提交至回報區）" class="headerlink" title="題目（將答案寫在 CodePen 並提交至回報區）"></a>題目（將答案寫在 CodePen 並提交至回報區）</h3><p>以下為一段判斷分數是否及格的函式，請嘗試將此函式使用 Promise 語法改寫</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> checkScore = <span class="function">(<span class="params">score</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* 回傳一個 Promise，並執行以下非同步操作*/</span></span><br><span class="line">  <span class="keyword">const</span> score = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">100</span>);</span><br><span class="line">  <span class="comment">/* 判斷流程請嘗試使用 setTimeout() 執行 */</span></span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">score &gt;= <span class="number">60</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(score); <span class="comment">// 執行實現方法</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;不及格&quot;</span>); <span class="comment">// 執行拒絕方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> checkScore = <span class="function">(<span class="params">score</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> score = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">100</span>);</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">      resolve(score); <span class="comment">// 執行實現方法</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reject(<span class="string">&quot;不及格&quot;</span>); <span class="comment">// 執行拒絕方法</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="回報區"><a href="#回報區" class="headerlink" title="回報區"></a>回報區</h2><table>
<thead>
<tr>
<th align="center">報數</th>
<th align="center">組別 / 名字</th>
<th align="center">codepen / 其他回饋</th>
</tr>
</thead>
<tbody><tr>
<td align="center">68</td>
<td align="center">第 6 組 / 謦麟</td>
<td align="center">[codepen](<a href="https://codepen.io/pvzfeusk/pen/ZEvRVLN">https://codepen.io/pvzfeusk/pen/ZEvRVLN</a>?</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 2(非同步概念、使用 Promise)</title>
    <url>/2022/04/24/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-11/</url>
    <content><![CDATA[<h1 id="🏅-Day-2"><a href="#🏅-Day-2" class="headerlink" title="🏅 Day 2"></a>🏅 Day 2</h1><h3 id="非同步概念、使用-Promise"><a href="#非同步概念、使用-Promise" class="headerlink" title="非同步概念、使用 Promise"></a>非同步概念、使用 Promise</h3><h3 id="使用-Promise-簡介"><a href="#使用-Promise-簡介" class="headerlink" title="使用 Promise 簡介"></a>使用 Promise 簡介</h3><p>Promise 是一個物件，代表一個即將完成或失敗的非同步操作，以及回傳的值</p>
<a id="more"></a>
<p>建立 Promise 的寫法為：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 執行一些非同步作業，最終呼叫:</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// resolve(someValue); // 實現</span></span><br><span class="line">  <span class="comment">// 或</span></span><br><span class="line">  <span class="comment">// reject(&quot;failure reason&quot;); // 拒絕</span></span><br><span class="line">  &#125; )</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>建立好 Promise 後，執行此函式就可以在完成 Promise 時使用 <code>.then()</code> 接收回傳的 Promise 物件，以及使用 <code>.catch()</code> 接收錯誤，因 Promise 可以用鍊式寫法接收上一個 Promise 的回傳值，不需像使用 callback function 一層包一層，因此可以提昇易讀性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">example()</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> </span><br><span class="line">    useData(data)</span><br><span class="line">  )</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Asynchronous/PromisesTW/docs/Learn/JavaScript/Asynchronous/Introducing">使用 Promises 來處理非同步操作</a><br><a href="https://www.casper.tw/development/2020/02/16/all-new-promise/">JavaScript Promise 全介紹 | 卡斯伯 Blog - 前端，沒有極限</a><br><a href="https://courses.hexschool.com/courses/1670869/lectures/38886982">Node.js 非同步技巧 - Promise、Async、Await</a>(章節影片)</p>
<h3 id="題目（將答案寫在-CodePen-並提交至回報區）"><a href="#題目（將答案寫在-CodePen-並提交至回報區）" class="headerlink" title="題目（將答案寫在 CodePen 並提交至回報區）"></a>題目（將答案寫在 CodePen 並提交至回報區）</h3><p>請嘗試使用 Promise 的鍊式寫法 <code>.then()</code> <code>.catch()</code> 執行以下函式<br><strong>執行流程</strong>：<br>批改作業 → 檢查獎勵 → 給予獎勵 <code>.then()</code> → 退學或懲罰 <code>.catch()</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批改作業</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">correctTest</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> score = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">100</span>);</span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">score &gt;= <span class="number">20</span></span>)</span> &#123;</span><br><span class="line">        resolve(&#123;</span><br><span class="line">          name,</span><br><span class="line">          score</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">&quot;您已達退學門檻&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 檢查獎勵</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkReward</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">data.score &gt;= <span class="number">90</span></span>)</span> &#123;</span><br><span class="line">        resolve(<span class="string">`<span class="subst">$&#123;data.name&#125;</span> 獲得電影票`</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.score &gt;= <span class="number">60</span> &amp;&amp; data.score &lt; <span class="number">90</span>) &#123;</span><br><span class="line">        resolve(<span class="string">`<span class="subst">$&#123;data.name&#125;</span> 獲得嘉獎`</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">`您沒有獎品`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 執行函式</span></span><br><span class="line"><span class="comment">/* 在此填寫答案*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解答</span></span><br><span class="line">correctTest(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> checkReward(data))</span><br><span class="line">  .then(<span class="function"><span class="params">reward</span> =&gt;</span> <span class="built_in">console</span>.log(reward))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">報數</th>
<th align="center">組別 / 名字</th>
<th align="center">codepen / 其他回饋</th>
</tr>
</thead>
<tbody><tr>
<td align="center">57</td>
<td align="center">第6組 / 謦麟</td>
<td align="center"><a href="https://codepen.io/pvzfeusk/pen/ZEvRVLN?editors=">codepen</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 3(MongoDB 基本操作： 新增、查詢)</title>
    <url>/2022/04/24/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-12/</url>
    <content><![CDATA[<h1 id="🏅-Day-3"><a href="#🏅-Day-3" class="headerlink" title="🏅 Day 3"></a>🏅 Day 3</h1><h2 id="MongoDB-基本操作：-新增、查詢"><a href="#MongoDB-基本操作：-新增、查詢" class="headerlink" title="MongoDB 基本操作： 新增、查詢"></a>MongoDB 基本操作： 新增、查詢</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>MongoDB 是一個 NoSQL 資料庫（Not only SQL，針對不同於傳統的關聯式資料庫的資料庫管理系統的統稱），一套以文件 (<code>document</code>) 導向的資料庫管理系統，相較於傳統的關聯式資料庫，非關聯式資料庫的特性讓 MongoDB 在處理巨量資料有更大的支援</p>
<a id="more"></a>
<p>MongoDB 會以 <strong>BSON</strong> 的形式儲存資料（Binary JSON），相較於 JSON 可以儲存的資料類型更多</p>
<p>MongoDB 整體資料結構為：<code>db</code> -&gt; <code>collection</code> -&gt; <code>document</code><br>我們可以透過指令（The <code>mongo</code> Shell）的方式用終端機來操作資料庫</p>
<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><h4 id="新增單筆資料"><a href="#新增單筆資料" class="headerlink" title="新增單筆資料"></a>新增單筆資料</h4><p><code>collection</code> 需替換為資料庫中 collection 的名稱，例如：<code>db.users.insertOne()</code> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.collection.insertOne(</span><br><span class="line">   &#123;</span><br><span class="line">    example: <span class="string">&quot;text&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="新增多筆資料"><a href="#新增多筆資料" class="headerlink" title="新增多筆資料"></a>新增多筆資料</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.collection.insertMany(</span><br><span class="line">   &#123;</span><br><span class="line">    example: <span class="string">&quot;text&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">    example: <span class="string">&quot;text1&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">    example: <span class="string">&quot;text2&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>執行新增成功後會為每一筆 document 都新增不同的 <code>_id</code><br>例如執行新增多筆資料後會出現</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;acknowledged&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;insertedIds&quot;</span> : [</span><br><span class="line">    ObjectId(<span class="string">&quot;61ec1cf32fecb74092ce1463&quot;</span>),</span><br><span class="line">    ObjectId(<span class="string">&quot;61ec1cf32fecb74092ce1464&quot;</span>),</span><br><span class="line">    ObjectId(<span class="string">&quot;61ec1cf32fecb74092ce1465&quot;</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查詢"><a href="#查詢" class="headerlink" title="查詢"></a>查詢</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collection.find()</span><br></pre></td></tr></table></figure>
<p>直接執行此指令會將此 collection 中的資料全部列出<br>若是要查詢特定資料可以在 <code>find()</code> 帶入<code>&#123; 屬性： 值 &#125;</code> 尋找符合條件的資料<br>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collection.find(&#123; example: &quot;text&quot;&#125;)</span><br></pre></td></tr></table></figure>
<p>屬性值可以搭配運算子設定條件：<br>使用<strong>比較運算子</strong>設定篩選條件</p>
<table>
<thead>
<tr>
<th>$eq</th>
<th>等於</th>
</tr>
</thead>
<tbody><tr>
<td>$ne</td>
<td>不等於</td>
</tr>
<tr>
<td>$gt</td>
<td>大於</td>
</tr>
<tr>
<td>$lt</td>
<td>小於</td>
</tr>
<tr>
<td>$gte</td>
<td>大於等於</td>
</tr>
<tr>
<td>$lte</td>
<td>小於等於</td>
</tr>
<tr>
<td>$in</td>
<td>存在某個值</td>
</tr>
<tr>
<td>$nin</td>
<td>不存在某個值</td>
</tr>
</tbody></table>
<p>例：找出此 colletion 中符合 example 屬性值等於 <code>&quot;text&quot;</code> 的資料</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collection.find(&#123; example: &#123; $eq: &quot;text&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p><code>使用以下邏輯運算子</code></p>
<table>
<thead>
<tr>
<th>$and</th>
<th>全部條件皆符合</th>
</tr>
</thead>
<tbody><tr>
<td>$or</td>
<td>符合其中一項條件</td>
</tr>
<tr>
<td>$nor</td>
<td>全部條件皆不符合</td>
</tr>
<tr>
<td>$not</td>
<td>與條件相反</td>
</tr>
</tbody></table>
<p>例：找出此 colletion 中符合以下條件之一的資料： status 屬性為 <code>A</code>，或 qty 值小於 30 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collection.find(&#123; $or: [ &#123; status: &quot;A&quot; &#125;, &#123; qty: &#123; $lt: 30 &#125; &#125; ] &#125;)</span><br></pre></td></tr></table></figure>

<p>也可以帶入<strong>正規表達式</strong>篩選有符合的文字<br>例：查詢 example 有包含 <code>text</code> 的資料</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.collection.find(&#123; example: &#x2F;text&#x2F;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://docs.mongodb.com/v4.4/reference/method/db.collection.insertOne/#db.collection.insertone--">insertOne()</a><br><a href="https://docs.mongodb.com/v4.4/reference/method/db.collection.insertMany/#db.collection.insertmany--">insertMany()</a><br><a href="https://courses.hexschool.com/courses/1670869/lectures/38579072">新增資料：insertOne、insertMany</a>（章節影片）<br><a href="https://www.mongodb.com/docs/v4.4/reference/method/db.collection.find/#db.collection.find--">db.collection.find()</a><br><a href="https://www.mongodb.com/docs/v4.4/reference/operator/query/#comparison">Query and Projection Operators — MongoDB Manual</a><br><a href="https://courses.hexschool.com/courses/1670869/lectures/38565205">MongoDB 簡介</a>(章節影片)</p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>請建立一個 database（名稱可自定義），並建立一個 <code>students</code> collection<br>將答案依序列在 HackMD 並將連結貼至回報區</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">範例：</span><br><span class="line">1. ...</span><br><span class="line">2. ...</span><br><span class="line">3. ...</span><br><span class="line">4. ...</span><br><span class="line">5. ...</span><br><span class="line">6. ...</span><br></pre></td></tr></table></figure>
<ol>
<li><p>依以下格式新增一筆 document 到 <code>students</code> collection</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;studentName&quot;</span>: <span class="string">&quot;Riley Parker&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;group&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;score&quot;</span>: <span class="number">83</span>,</span><br><span class="line">  <span class="attr">&quot;isPaid&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.students.insertOne(&#123;</span><br><span class="line">    <span class="string">&quot;studentName&quot;</span>: <span class="string">&quot;Riley Parker&quot;</span>,</span><br><span class="line">    <span class="string">&quot;group&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">    <span class="string">&quot;score&quot;</span>: <span class="number">83</span>,</span><br><span class="line">    <span class="string">&quot;isPaid&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>依以下格式一次新增多筆 document 到 <code>students</code> collection</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;studentName&quot;</span>: <span class="string">&quot;Brennan Miles&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;group&quot;</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;score&quot;</span>: <span class="number">72</span>,</span><br><span class="line">  <span class="attr">&quot;isPaid&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;studentName&quot;</span>: <span class="string">&quot;Mia Diaz&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;group&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;score&quot;</span>: <span class="number">98</span>,</span><br><span class="line">  <span class="attr">&quot;isPaid&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;studentName&quot;</span>: <span class="string">&quot;Caroline morris&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;group&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;score&quot;</span>: <span class="number">55</span>,</span><br><span class="line">  <span class="attr">&quot;isPaid&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;studentName&quot;</span>: <span class="string">&quot;Beverly Stewart&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;group&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;score&quot;</span>: <span class="number">60</span>,</span><br><span class="line">  <span class="attr">&quot;isPaid&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查詢 <code>students</code> collection 中的所有資料</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.students.find()</span><br></pre></td></tr></table></figure></li>
<li><p>查詢 <code>students</code> collection 中符合 group 屬性為 B 的資料 <code>使用 &#123; &lt;field&gt;: &lt;value&gt; &#125; 設定符合的項目</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.students.find(&#123;<span class="attr">group</span>:<span class="string">&quot;B&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>查詢 <code>students</code> collection 中符合分數在 60 分以上的的資料</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.students.find(&#123;<span class="attr">score</span>: &#123;<span class="attr">$gte</span>: <span class="number">60</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>查詢 <code>students</code> collection 中符合分數在 60 分以下<strong>或是</strong> group 為 B 的資料</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.students.find(&#123;<span class="attr">$or</span>:[&#123;<span class="attr">score</span>: &#123;<span class="attr">$gte</span>: <span class="number">60</span>&#125;&#125;, &#123;<span class="attr">group</span>:<span class="string">&quot;B&quot;</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 4(MongoDB 基本操作： 修改、刪除)</title>
    <url>/2022/04/24/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-13/</url>
    <content><![CDATA[<h1 id="🏅-Day-4"><a href="#🏅-Day-4" class="headerlink" title="🏅 Day 4"></a>🏅 Day 4</h1><h2 id="MongoDB-基本操作：-修改、刪除"><a href="#MongoDB-基本操作：-修改、刪除" class="headerlink" title="MongoDB 基本操作： 修改、刪除"></a>MongoDB 基本操作： 修改、刪除</h2><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><h4 id="修改單筆資料"><a href="#修改單筆資料" class="headerlink" title="修改單筆資料"></a>修改單筆資料</h4><p><code>updateOne()</code> 第一個參數透過設定符合的屬性找出要修改的資料，若第一個參數帶入空物件 <code>&#123;&#125;</code>，則會選取全部資料的第一筆資料，第二個參數放入要修改的屬性，需先加上 <code>$set</code> 物件，並在此物件中帶入要修改的物件屬性</p>
<a id="more"></a>
<p>第二個參數可選擇帶入 <code>$currentDate</code> 屬性，會再修改資料成功後顯示出最新修改的時間</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.collection.updateOne(</span><br><span class="line">   &#123;</span><br><span class="line">    example: <span class="string">&quot;text&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">    $set: &#123;</span><br><span class="line">      example: <span class="string">&quot;texttext&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    $currentDate: &#123;</span><br><span class="line">      lastModified: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="修改多筆資料"><a href="#修改多筆資料" class="headerlink" title="修改多筆資料"></a>修改多筆資料</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.collection.updateMany(</span><br><span class="line">   &#123;</span><br><span class="line">    example: <span class="regexp">/text/</span></span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">    $set: &#123;</span><br><span class="line">      example: <span class="string">&quot;texttext&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    $currentDate: &#123;</span><br><span class="line">      lastModified: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="刪除"><a href="#刪除" class="headerlink" title="刪除"></a>刪除</h3><h4 id="刪除一筆資料"><a href="#刪除一筆資料" class="headerlink" title="刪除一筆資料"></a>刪除一筆資料</h4><p>只刪除一筆符合條件的資料</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.collection.deleteOne(</span><br><span class="line">   &#123;</span><br><span class="line">    example: <span class="regexp">/text/</span></span><br><span class="line">   &#125; </span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="刪除多筆資料"><a href="#刪除多筆資料" class="headerlink" title="刪除多筆資料"></a>刪除多筆資料</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.collection.deleteMany(</span><br><span class="line">  &#123;</span><br><span class="line">    example: <span class="regexp">/text/</span></span><br><span class="line">  &#125; </span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="刪除全部資料"><a href="#刪除全部資料" class="headerlink" title="刪除全部資料"></a>刪除全部資料</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.collection.deleteMany(&#123;&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://www.mongodb.com/docs/v4.4/reference/method/db.collection.updateOne/#mongodb-method-db.collection.updateOne">db.collection.updateOne() — MongoDB Manual</a><br><a href="https://www.mongodb.com/docs/v4.4/reference/method/db.collection.updateMany/#mongodb-method-db.collection.updateMany">db.collection.updateMany() — MongoDB Manual</a><br><a href="https://www.mongodb.com/docs/v4.4/reference/method/db.collection.deleteOne/#mongodb-method-db.collection.deleteOne">db.collection.deleteOne() — MongoDB Manual</a><br><a href="https://www.mongodb.com/docs/v4.4/reference/method/db.collection.deleteMany/#mongodb-method-db.collection.deleteMany">db.collection.deleteMany() — MongoDB Manual</a><br><a href="https://courses.hexschool.com/courses/1670869/lectures/38579075">更新資料 - updateOne、updateMany</a>（章節影片）<br><a href="https://courses.hexschool.com/courses/1670869/lectures/38579077">刪除資料 - deleteOne、deleteMany</a>（章節影片）<br><a href="https://courses.hexschool.com/courses/1670869/lectures/38579080">尋找資料 - find 關鍵字搜尋</a>（章節影片）</p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>若尚未做前一天的每日任務，需先建立一個 database（名稱可自定義），並建立一個 <code>students</code> collection<br>將以下資料新增至 <code>students</code> collection（若已做完前一天的每日任務，可繼續沿用已建立的 <code>students</code> collection）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;studentName&quot;</span>: <span class="string">&quot;Riley Parker&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;group&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;score&quot;</span>: <span class="number">83</span>,</span><br><span class="line">  <span class="attr">&quot;isPaid&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;studentName&quot;</span>: <span class="string">&quot;Brennan Miles&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;group&quot;</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;score&quot;</span>: <span class="number">72</span>,</span><br><span class="line">  <span class="attr">&quot;isPaid&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;studentName&quot;</span>: <span class="string">&quot;Mia Diaz&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;group&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;score&quot;</span>: <span class="number">98</span>,</span><br><span class="line">  <span class="attr">&quot;isPaid&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;studentName&quot;</span>: <span class="string">&quot;Caroline morris&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;group&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;score&quot;</span>: <span class="number">55</span>,</span><br><span class="line">  <span class="attr">&quot;isPaid&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;studentName&quot;</span>: <span class="string">&quot;Beverly Stewart&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;group&quot;</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;score&quot;</span>: <span class="number">60</span>,</span><br><span class="line">  <span class="attr">&quot;isPaid&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將答案依序列在自己的 HackMD 並將連結貼至回報區</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">範例：</span><br><span class="line">1. ...</span><br><span class="line">2. ...</span><br><span class="line">3. ...</span><br><span class="line">4. ...</span><br></pre></td></tr></table></figure>
<ol>
<li>指定其中一個 <code>_id</code> ，並將該筆 document 的 <code>group</code> 改為 <code>D</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.students.updateOne(</span><br><span class="line">   &#123;</span><br><span class="line">      _id: ObjectId(&quot;62577a8450d31380a7051165&quot;)</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">    $set: &#123;</span><br><span class="line">      group: &quot;D&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>將 <code>group</code> 為 <code>B</code> 的多筆 document 的 <code>isPaid</code> 改為 <code>true</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.students.updateMany(</span><br><span class="line">   &#123;</span><br><span class="line">      group: &quot;B&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      $set: &#123;</span><br><span class="line">        isPaid: true</span><br><span class="line">    &#125;,</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>將 <code>studentName</code> 包含關鍵字 <code>Brennan</code> 的 document 刪除<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.students.deleteMany(</span><br><span class="line">   &#123;</span><br><span class="line">     studentName: &#x2F;Brennan&#x2F;</span><br><span class="line">   &#125; </span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>將 <code>isPaid</code> 為 <code>true</code> 的多筆 document 刪除<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.students.deleteMany(</span><br><span class="line">   &#123;</span><br><span class="line">     isPaid: true</span><br><span class="line">   &#125; </span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 5(非同步概念、async await)</title>
    <url>/2022/04/24/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-14/</url>
    <content><![CDATA[<h1 id="🏅-Day-5"><a href="#🏅-Day-5" class="headerlink" title="🏅 Day 5"></a>🏅 Day 5</h1><h2 id="非同步概念、async-await"><a href="#非同步概念、async-await" class="headerlink" title="非同步概念、async await"></a>非同步概念、async await</h2><p>async 及 await 是執行非同步函式的一種寫法，此寫法可以讓非同步函式在閱讀上更接近同步函式</p>
<p>在非同步函式前加上 <code>async</code> 關鍵字，執行此函式時回傳值就會被轉為一個 Promise<br>在 <code>async</code> 非同步函式中，使用 <code>await</code> 接收回傳的結果，它會暫停此 async 函式的執行，並且等待 Promise 的解析，解析完之後會回傳解析值，並繼續此 async 函式的執行<br>也就是說在未等待到結果回傳前，不會執行到 <code>await</code> 之後的程式</p>
<a id="more"></a>
<p>範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveAfter2Seconds</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(x);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">await</span> resolveAfter2Seconds(<span class="number">20</span>);</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">await</span> resolveAfter2Seconds(<span class="number">30</span>);</span><br><span class="line">  <span class="keyword">return</span> x + a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://www.casper.tw/development/2020/10/16/async-await/">Async function / Await 深度介紹 | 卡斯伯 Blog - 前端，沒有極限</a><br><a href="https://developer.mozilla.org/zh-TW/docs/conflicting/Learn/JavaScript/Asynchronous/Promises">利用 async 及 await 讓非同步程式設計變得更容易 | MDN</a><br><a href="https://courses.hexschool.com/courses/1670869/lectures/38886995">async、await 再升級</a>（章節影片）</p>
<h3 id="題目（將答案寫在-CodePen-並提交至回報區）"><a href="#題目（將答案寫在-CodePen-並提交至回報區）" class="headerlink" title="題目（將答案寫在 CodePen 並提交至回報區）"></a>題目（將答案寫在 CodePen 並提交至回報區）</h3><p>流程：<br>批改作業 → 檢查獎勵 → 給予獎勵 → 退學或懲罰</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批改作業</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">correctTest</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> score = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*<span class="number">100</span>);</span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">score &gt;= <span class="number">60</span></span>)</span> &#123;</span><br><span class="line">        resolve(&#123;</span><br><span class="line">          name,</span><br><span class="line">          score</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">&quot;您已達退學門檻&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 檢查獎勵</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkReward</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">data.score &gt;= <span class="number">90</span></span>)</span> &#123;</span><br><span class="line">        resolve(<span class="string">`<span class="subst">$&#123;data.name&#125;</span> 獲得電影票`</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.score &gt;= <span class="number">60</span> &amp;&amp; data.score &lt; <span class="number">90</span>) &#123;</span><br><span class="line">        resolve(<span class="string">`<span class="subst">$&#123;data.name&#125;</span> 獲得嘉獎`</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">`您沒有獎品`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>將以下這段程式碼改寫為 async await 的寫法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">correctTest(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line"> .then(<span class="function"><span class="params">data</span> =&gt;</span> checkReward(data))</span><br><span class="line"> .then(<span class="function"><span class="params">reward</span> =&gt;</span> <span class="built_in">console</span>.log(reward))</span><br><span class="line"> .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br></pre></td></tr></table></figure>
<p>回覆範例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> init = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">/* 在此填寫答案 */</span></span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解答</span></span><br><span class="line"><span class="keyword">const</span> init = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)   </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> studentData = <span class="keyword">await</span> correctTest(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> reward = <span class="keyword">await</span> checkReward(studentData);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure>



<h2 id="回報區"><a href="#回報區" class="headerlink" title="回報區"></a>回報區</h2><table>
<thead>
<tr>
<th>報數</th>
<th>組別 / 名字</th>
<th>codepen / hackMD / 其他回饋</th>
</tr>
</thead>
<tbody><tr>
<td>39</td>
<td>第 6 組 / 謦麟</td>
<td><a href="https://codepen.io/pvzfeusk/pen/bGamQWX?editors=0012">hackMD</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 6(Mongoose、schema)</title>
    <url>/2022/04/24/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-15/</url>
    <content><![CDATA[<h1 id="🏅-Day-6"><a href="#🏅-Day-6" class="headerlink" title="🏅 Day 6"></a>🏅 Day 6</h1><h2 id="Mongoose、schema"><a href="#Mongoose、schema" class="headerlink" title="Mongoose、schema"></a>Mongoose、schema</h2><h3 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h3><p>Mongoose 是 MongoDB 的 ODM（Object Data Modeling） 套件，Mongoose 套件會藉由 MongoDB driver 操作資料庫的資料</p>
<p>使用 ODM 通常可以降低開發和維護成本，因 ODM 會使用 JavaScript 的物件反映出資料庫中的資料，相對於使用資料庫原生的查詢語言 (SQL)，用 ODM 的方式操作資料庫會更好上手</p>
<a id="more"></a>
<ul>
<li>在專案中安裝 Mongoose<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install mongoose --save</span><br></pre></td></tr></table></figure></li>
<li>引入 mongoose 套件並連線 MongoDB 資料庫<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost:27017/test&#x27;</span>);</span><br><span class="line"><span class="comment">// test 為資料庫的名稱，可以改為自己的資料庫名稱</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h3><p>安裝 Mongoose 並連線至資料庫後，接著可以開始建立 Schema（資料庫綱要），定義需要哪些資料、型別、是否顯示、預設值…等等</p>
<p>例如：<a href="https://mongoosejs.com/docs/guide.html">文件</a>中列出 Blog 的 Schema</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> blogSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  title:  <span class="built_in">String</span>, <span class="comment">// String is shorthand for &#123;type: String&#125;</span></span><br><span class="line">  author: <span class="built_in">String</span>,</span><br><span class="line">  body:   <span class="built_in">String</span>,</span><br><span class="line">  comments: [&#123; <span class="attr">body</span>: <span class="built_in">String</span>, <span class="attr">date</span>: <span class="built_in">Date</span> &#125;],</span><br><span class="line">  date: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;,</span><br><span class="line">  hidden: <span class="built_in">Boolean</span>,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    votes: <span class="built_in">Number</span>,</span><br><span class="line">    favs:  <span class="built_in">Number</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>當接收到資料，就可以依此 Schema 把關資料是否帶入正確</p>
<p>Schema 中會有需要帶入的資料屬性，title、author 等等，並會針對此資料加入相關設定，例如：型別、必填、預設…等等</p>
<h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">title: &#123;<span class="attr">type</span>: <span class="built_in">String</span>&#125; <span class="comment">// 代表 title 需為一個字串</span></span><br></pre></td></tr></table></figure>
<p>若只有設定型別可以使用簡寫 <code>title: String</code></p>
<p>若 title 是一個<strong>物件</strong>，可以針對裡面的屬性設定型別</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">title: &#123;</span><br><span class="line">  chinese: &#123;<span class="attr">type</span>: <span class="built_in">String</span>&#125;,</span><br><span class="line">  english: &#123;<span class="attr">type</span>: <span class="built_in">String</span>&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>若 title 為一個<strong>陣列</strong>，也可指定陣列中資料型別</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">title: [&#123;<span class="attr">type</span>: <span class="built_in">String</span>&#125;] <span class="comment">// 若只有設定型別可以使用簡寫 [String]</span></span><br></pre></td></tr></table></figure>
<h4 id="required"><a href="#required" class="headerlink" title="required"></a>required</h4><p>若此資料需為必填項目，可以設定 required，並且可客製化錯誤訊息，格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">title: &#123;</span><br><span class="line">  type: <span class="built_in">String</span>,</span><br><span class="line">  required: [<span class="literal">true</span>, <span class="string">&#x27;title 為必填&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><p>若有資料未填寫，也可以設定此資料的預設值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">title: &#123;</span><br><span class="line">  type: <span class="built_in">String</span>,</span><br><span class="line">  <span class="keyword">default</span>: <span class="string">&#x27;未命名的文章&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通常 required 與 default 不會同時使用</p>
<h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>若有資料欄位希望可以被保護，不顯示出來，可以加入 select 設定<br>例如：若有涉及使用者相關個資 password、email …等等，都會建議加入 <code>select: false</code> 不將資料回傳給前端</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">password: &#123;</span><br><span class="line">  type: <span class="built_in">String</span>,</span><br><span class="line">  select: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h4><p>若此資料設定型別為 <code>String</code> 或 <code>Number</code>，可以設定 <code>enum</code> 指定需為哪些值<br>以字串為例，若 author 需為 Amy、Bob 或 Cody 其中之一，可以設定為以下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">author: &#123;</span><br><span class="line">  type: <span class="built_in">String</span>,</span><br><span class="line">  enum: [<span class="string">&#x27;Amy&#x27;</span>,<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;Cody&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://mongoosejs.com/docs/guide.html">Mongoose v6.2.10: Schemas</a><br><a href="https://mongoosejs.com/docs/schematypes.html">Mongoose v6.2.10: SchemaTypes</a></p>
<p><a href="https://courses.hexschool.com/courses/1670869/lectures/39252168">Mongoose NPM 教學（可看到 Mongoose 新增 Model 流程）</a>（章節影片）</p>
<h3 id="題目（將答案寫在-CodePen-並提交至回報區）"><a href="#題目（將答案寫在-CodePen-並提交至回報區）" class="headerlink" title="題目（將答案寫在 CodePen 並提交至回報區）"></a>題目（將答案寫在 CodePen 並提交至回報區）</h3><p>請參考以下需求，設計手搖飲的 Schema</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 產品名稱（product）: 需為字串,必填，若未填寫，錯誤訊息為「產品名稱未填寫」</span><br><span class="line">- 價錢（price）: 需為數字, 必填，若未填寫，錯誤訊息為「價錢未填寫」</span><br><span class="line">- 冰塊（ice）： 需為字串, 若未填寫預設為 &#39;正常冰&#39;</span><br><span class="line">- 甜度（sugar）：需為字串，若未填寫預設為 &#39;全糖&#39;</span><br><span class="line">- 配料（toppings）：為陣列，內容需為字串</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> drinkSchema = <span class="keyword">new</span> mongoose.Schema(&#123;  </span><br><span class="line"> <span class="comment">/* 請在此填入答案 */</span></span><br><span class="line">   product: &#123;</span><br><span class="line">       type: <span class="built_in">String</span>,</span><br><span class="line">       <span class="built_in">require</span>: [<span class="literal">true</span>, <span class="string">&quot;產品名稱未填寫&quot;</span>]</span><br><span class="line">   &#125;,</span><br><span class="line">   price: &#123;</span><br><span class="line">       type: <span class="built_in">Number</span>,</span><br><span class="line">       <span class="built_in">require</span>: [<span class="literal">true</span>, <span class="string">&quot;價錢未填寫&quot;</span>]</span><br><span class="line">   &#125;,</span><br><span class="line">   ice: &#123;</span><br><span class="line">       type: <span class="built_in">String</span>,</span><br><span class="line">       <span class="keyword">default</span>: <span class="string">&quot;正常冰&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   sugar: &#123;</span><br><span class="line">       type: <span class="built_in">String</span>,</span><br><span class="line">       <span class="keyword">default</span>: <span class="string">&quot;全糖&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   toppings: [</span><br><span class="line">       &#123;<span class="attr">type</span>: <span class="built_in">String</span>&#125;</span><br><span class="line">   ]       </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--```javascript
const drinkSchema = new mongoose.Schema({  
  product: {
    type: String,
    required: [true, '產品名稱未填寫']
  },
  price: {
    type: Number,
    required: [true, '價錢未填寫'] 
  },
  ice: {
    type: String,
    default: "正常冰"
  },
  sugar: {
    type: String,
    default: "全糖"
  },
  toppings: [{type: String}]
 });
```
-->]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 7(model、Mongoose 新增 / 查詢)</title>
    <url>/2022/04/24/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-18/</url>
    <content><![CDATA[<h1 id="🏅-Day-7"><a href="#🏅-Day-7" class="headerlink" title="🏅 Day 7"></a>🏅 Day 7</h1><h2 id="model、Mongoose-新增-查詢"><a href="#model、Mongoose-新增-查詢" class="headerlink" title="model、Mongoose 新增 / 查詢"></a>model、Mongoose 新增 / 查詢</h2><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>延續前一天的每日任務，接下來會建立 Model，以連接資料庫中的 Collection 及 Schema，並使用建立好的 Model 新增、查詢 document</p>
<p>須先在專案中引入 Mongoose 套件、連線本地端資料庫，並建立 Schema(可參考 Day6 每日任務)</p>
<a id="more"></a>
<p>建立 Model 寫法如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> roomSchema = <span class="keyword">new</span> mongoose.Schema(&#123; </span><br><span class="line">    name: <span class="built_in">String</span>, </span><br><span class="line">    price: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        required: [<span class="literal">true</span>, <span class="string">&#x27;價格必填&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    rating: <span class="built_in">Number</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 建立 Model</span></span><br><span class="line"><span class="keyword">const</span> Room = mongoose.model(<span class="string">&#x27;Room&#x27;</span>, roomSchema);</span><br></pre></td></tr></table></figure>
<p><code>mongoose.model()</code> 第一個參數為 Collection 的名稱，第二個參數帶入 Schema</p>
<p>其中需注意第一個參數 Collection 的名稱，Mongoose 會自動視為小寫開頭及改為複數（結尾加 s）<br>因此 <code>Room</code> Model 實際上是連接至名稱為 <code>rooms</code> 的 Collection</p>
<p>接著可以使用 Model 新增 document</p>
<h3 id="Mongoose-新增"><a href="#Mongoose-新增" class="headerlink" title="Mongoose 新增"></a>Mongoose 新增</h3><p>新增寫法如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Room = mongoose.model(<span class="string">&#x27;Room&#x27;</span>, roomSchema);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> testRoom = <span class="keyword">new</span> Room(&#123;</span><br><span class="line">  name: <span class="string">&#x27;總統套房單人房&#x27;</span>,</span><br><span class="line">  price: <span class="number">2000</span>,</span><br><span class="line">  rating: <span class="number">4.5</span></span><br><span class="line">&#125;);</span><br><span class="line">testRoom.save()</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">&#x27;新增資料成功&#x27;</span>)&#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log(error)&#125;)</span><br></pre></td></tr></table></figure>
<p>建立 Model 後，若要使用 Model 新增資料，需先使用 <code>new</code> 建立 Room 的實體（instance），一個 Model 的 instance 就是 document</p>
<p>產生一個 document 後就可以使用 <code>save()</code> 將其儲存到 rooms Collection 中</p>
<p>新增 document 也可以使用另一種方式<code>create()</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Room.create(&#123;</span><br><span class="line">  name: <span class="string">&#x27;總統套房單人房&#x27;</span>,</span><br><span class="line">  price: <span class="number">2000</span>,</span><br><span class="line">  rating: <span class="number">4.5</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>執行後可以連線至 MongoDB Compass 本地端資料庫 <code>&#39;mongodb://localhost:27017/test&#39;</code>（test 可更換為自己建立的資料庫名稱）查看，若新增成功可以看到 rooms collection 中會有剛剛新增的資料</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_id: ObjectId(&#39;...&#39;)</span><br><span class="line">name: &#39;總統套房單人房&#39;</span><br><span class="line">price: 2000</span><br><span class="line">rating: 4.5</span><br><span class="line">__v: 0 </span><br></pre></td></tr></table></figure>

<h3 id="Mongoose-查詢"><a href="#Mongoose-查詢" class="headerlink" title="Mongoose 查詢"></a>Mongoose 查詢</h3><p>Model instance 可以使用 <code>.find()</code> 查詢 documents</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查詢所有 documents</span></span><br><span class="line">Room.find(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 帶入篩選條件</span></span><br><span class="line">Room.find(&#123; <span class="attr">name</span>: <span class="string">&#x27;總統套房單人房&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://mongoosejs.com/docs/models.html">Mongoose v6.2.10: Models</a><br><a href="https://mongoosejs.com/docs/api/model.html">Mongoose v6.2.10: Model</a></p>
<p><a href="https://courses.hexschool.com/courses/1670869/lectures/39252173">Mongoose 新增 Model 流程</a>（章節影片）</p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>延續前一天每日任務練習的手搖飲 Schema，建立名稱為 Drink 的 Model，並嘗試新增一筆 document</p>
<p>新增 document 內容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">product: &#39;鮮奶茶&#39;,</span><br><span class="line">price: 55,</span><br><span class="line">sugar: &#39;微糖&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>提交範例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Drink = mongoose.model(<span class="string">&#x27;Drink&#x27;</span>, schema 名稱);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newDrink = <span class="keyword">new</span> Drink(&#123;</span><br><span class="line">  <span class="comment">/* 新增 document 內容 */</span></span><br><span class="line">    product: <span class="string">&#x27;鮮奶茶&#x27;</span>,</span><br><span class="line">    price: <span class="number">55</span>,</span><br><span class="line">    sugar: <span class="string">&#x27;微糖&#x27;</span>  </span><br><span class="line">&#125;);</span><br><span class="line">newDrink.save()</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">&#x27;新增資料成功&#x27;</span>)&#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log(error)&#125;)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 或另一種方式</span></span><br><span class="line"></span><br><span class="line">Drink.create(&#123;</span><br><span class="line">  <span class="comment">/* 新增 document 內容 */</span></span><br><span class="line">    product: <span class="string">&#x27;鮮奶茶&#x27;</span>,</span><br><span class="line">    price: <span class="number">55</span>,</span><br><span class="line">    sugar: <span class="string">&#x27;微糖&#x27;</span> </span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<!-- ```javascript
const Drink = mongoose.model('Drink', drinkSchema);
// 寫法一
const newDrink = new Drink({
  product: '鮮奶茶',
  price: 55,
  sugar: '微糖'
});
newDrink.save()
  .then(() => {console.log('新增資料成功')})
  .catch((error) => {console.log(error)})

// 二、寫法二

Drink.create({
  product: '鮮奶茶',
  price: 55,
  sugar: '微糖'
})
``` -->
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 8(Schema 補充)</title>
    <url>/2022/04/24/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-19/</url>
    <content><![CDATA[<h1 id="🏅-Day-8"><a href="#🏅-Day-8" class="headerlink" title="🏅 Day 8"></a>🏅 Day 8</h1><h2 id="Schema-補充"><a href="#Schema-補充" class="headerlink" title="Schema 補充"></a>Schema 補充</h2><h3 id="Schema-Options"><a href="#Schema-Options" class="headerlink" title="Schema Options"></a>Schema Options</h3><p>建立 Schema 時，Mongoose 也有提供一些可調整的設定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new mongoose.Schema(&#123;..&#125;, options);</span><br></pre></td></tr></table></figure>
<p>在 <code>Schema()</code> 中第一個參數放 Schema，第二個參數可以調整設定<br>可以參考<a href="https://mongoosejs.com/docs/guide.html#options">文件說明</a>查看可調整的 options</p>
<a id="more"></a>
<h4 id="versionKey"><a href="#versionKey" class="headerlink" title="versionKey"></a>versionKey</h4><p>新增 document 時，預設都會在 document 中加上 <code>__v: 0</code>，若不需要加上此設定的話，可以設定 <code>versionKey: false</code> 將 versionKey 移除</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> mongoose.Schema(&#123;..&#125;, &#123; <span class="attr">versionKey</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h4><p>Mongoose 預設會將 model 連接的 collection 的名稱轉為全小寫，並以複數呈現，例如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&#x27;User&#x27;</span>, userSchema);</span><br></pre></td></tr></table></figure>
<p><code>&#39;User&#39;</code> 會被視為 <strong>users</strong>，若是需要不同的 collection 名稱，可以透過 <code>&#123; collection: &#39;...&#39; &#125;)</code> 更改</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> mongoose.Schema(&#123;..&#125;, &#123; <span class="attr">collection</span>: <span class="string">&#x27;data&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>上方設定會將 collection 名稱改為 <code>data</code>，若是 <code>mongoose.model(&#39;Test&#39;, Schema);</code> 設定不同的 collection 名稱，仍然會以 <code>&#123; collection: &#39;data&#39; &#125;</code> 為主</p>
<h4 id="timestamps"><a href="#timestamps" class="headerlink" title="timestamps"></a>timestamps</h4><p>可以透過 <code>&#123; timestamps: true &#125;</code> 為每筆新增的 document 加上 <code>createdAt</code> 和 <code>updatedAt</code> 欄位<br>也可以透過 <code>&#123; timestamps: &#123; createdAt: &#39;created_at&#39; &#125;, &#123; updatedAt: &#39;updated_at&#39; &#125; &#125;</code> 自定義 <code>createdAt</code> 和 <code>updatedAt</code> 欄位</p>
<p>因設定 timestamps 預設會同時加入 <code>createdAt</code> 和 <code>updatedAt</code>，若只想加入其中一個欄位，則可以將欄位加在 Schema 中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line"> ...</span><br><span class="line"> createdAt: &#123;</span><br><span class="line">  type: <span class="built_in">Date</span>, </span><br><span class="line">  <span class="keyword">default</span>: <span class="built_in">Date</span>.now</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>若不希望在前端顯示資料建立時間也可以加入 <code>select: false</code> 設定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line"> ...</span><br><span class="line"> createdAt: &#123;</span><br><span class="line">  type: <span class="built_in">Date</span>, </span><br><span class="line">  <span class="keyword">default</span>: <span class="built_in">Date</span>.now,</span><br><span class="line">  select: <span class="literal">false</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://mongoosejs.com/docs/guide.html#options">Mongoose v6.2.10: Schemas</a><br><a href="https://mongoosejs.com/docs/schematypes.html">Mongoose v6.2.10: SchemaTypes</a></p>
<p><a href="https://courses.hexschool.com/courses/1670869/lectures/39252177">移除欄位 __v 方法</a> 到 <a href="https://courses.hexschool.com/courses/1670869/lectures/39252180">另一種新增方法 create()</a>（章節影片）</p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>延續 Day6 的每日任務，調整手搖飲的 Schema </p>
<ul>
<li>加入 createdAt 欄位，並設定為隱藏欄位（不會顯示於前端）</li>
<li>隱藏 versionKey 欄位</li>
</ul>
<p>提交範例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> drinkSchema = <span class="keyword">new</span> mongoose.Schema(&#123;  </span><br><span class="line"> <span class="comment">/* 填入 Schema 內容 */</span></span><br><span class="line">   product: &#123;</span><br><span class="line">       type: <span class="built_in">String</span>,</span><br><span class="line">       <span class="built_in">require</span>: [<span class="literal">true</span>, <span class="string">&quot;產品名稱未填寫&quot;</span>]</span><br><span class="line">   &#125;,</span><br><span class="line">   price: &#123;</span><br><span class="line">       type: <span class="built_in">Number</span>,</span><br><span class="line">       <span class="built_in">require</span>: [<span class="literal">true</span>, <span class="string">&quot;價錢未填寫&quot;</span>]</span><br><span class="line">   &#125;,</span><br><span class="line">   ice: &#123;</span><br><span class="line">       type: <span class="built_in">String</span>,</span><br><span class="line">       <span class="keyword">default</span>: <span class="string">&quot;正常冰&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   sugar: &#123;</span><br><span class="line">       type: <span class="built_in">String</span>,</span><br><span class="line">       <span class="keyword">default</span>: <span class="string">&quot;全糖&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   toppings: [</span><br><span class="line">       &#123;<span class="attr">type</span>: <span class="built_in">String</span>&#125;</span><br><span class="line">   ],</span><br><span class="line">    createAt: &#123;</span><br><span class="line">        type: <span class="built_in">Date</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="built_in">Date</span>.now,</span><br><span class="line">        select: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line"> <span class="comment">/* 填入 options 內容 */</span></span><br><span class="line">    versionKey: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<!--
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> drinkSchema = <span class="keyword">new</span> mongoose.Schema(&#123;  </span><br><span class="line">  product: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: [<span class="literal">true</span>, <span class="string">&#x27;產品名稱未填寫&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  price: &#123;</span><br><span class="line">    type: <span class="built_in">Number</span>,</span><br><span class="line">    required: [<span class="literal">true</span>, <span class="string">&#x27;價錢未填寫&#x27;</span>] </span><br><span class="line">  &#125;,</span><br><span class="line">  ice: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">&quot;正常冰&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  sugar: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">&quot;全糖&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  toppings: [&#123;<span class="attr">type</span>: <span class="built_in">String</span>&#125;],</span><br><span class="line">  <span class="comment">/* 加入 createdAt */</span></span><br><span class="line">  createdAt: &#123;</span><br><span class="line">    type: <span class="built_in">Date</span>, </span><br><span class="line">    <span class="keyword">default</span>: <span class="built_in">Date</span>.now,</span><br><span class="line">    select: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,&#123;</span><br><span class="line">  versionKey: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>–&gt;</p>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 9(Mongoose 修改 / 刪除)</title>
    <url>/2022/04/24/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-20/</url>
    <content><![CDATA[<h1 id="🏅-Day-9"><a href="#🏅-Day-9" class="headerlink" title="🏅 Day 9"></a>🏅 Day 9</h1><h2 id="Mongoose-修改-刪除"><a href="#Mongoose-修改-刪除" class="headerlink" title="Mongoose 修改 / 刪除"></a>Mongoose 修改 / 刪除</h2><p>延續前兩天的每日任務，須先建立 Schema、Model 後，再透過 Model 執行修改、刪除 document 等動作</p>
<p>針對 Model 修改、刪除有多個方式（可參考<a href="https://mongoosejs.com/docs/api/model.html">文件</a>），在此列出其中幾個方式</p>
<a id="more"></a>
<h3 id="Mongoose-修改"><a href="#Mongoose-修改" class="headerlink" title="Mongoose 修改"></a>Mongoose 修改</h3><h4 id="findByIdAndUpdate"><a href="#findByIdAndUpdate" class="headerlink" title="findByIdAndUpdate"></a>findByIdAndUpdate</h4><p>修改單筆 ID document<br>寫法為：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Room = mongoose.model(<span class="string">&#x27;Room&#x27;</span>, roomSchema);</span><br><span class="line"><span class="comment">// 修改特定 Id 的 document</span></span><br><span class="line">Room.findByIdAndUpdate(<span class="string">&quot;621e45063ff3c8af575a7498&quot;</span>, &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;海景雙人房&quot;</span></span><br><span class="line">&#125;) <span class="comment">// id, update</span></span><br></pre></td></tr></table></figure>
<p>需分別帶入參數 id，以及需修改的欄位</p>
<h4 id="updateOne"><a href="#updateOne" class="headerlink" title="updateOne()"></a>updateOne()</h4><p>修改單筆的特定條件之 document</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Room = mongoose.model(<span class="string">&#x27;Room&#x27;</span>, roomSchema);</span><br><span class="line"><span class="comment">// 修改特定條件的第一筆 document</span></span><br><span class="line">Room.updateOne(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;海景雙人房&quot;</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">&quot;price&quot;</span>: <span class="number">4500</span></span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>
<p>也可使用 <strong>updateMany()</strong> 修改多筆 documents</p>
<h3 id="Mongoose-刪除"><a href="#Mongoose-刪除" class="headerlink" title="Mongoose 刪除"></a>Mongoose 刪除</h3><h4 id="deleteMany"><a href="#deleteMany" class="headerlink" title="deleteMany()"></a>deleteMany()</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刪除所有 rooms collection 中的 documents</span></span><br><span class="line">Room.deleteMany(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除符合特定條件的多個 documents</span></span><br><span class="line">Room.deleteMany(&#123;<span class="attr">rating</span>: &#123;<span class="attr">$lt</span>: <span class="number">3</span>&#125;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="findByIdAndDelete"><a href="#findByIdAndDelete" class="headerlink" title="findByIdAndDelete()"></a>findByIdAndDelete()</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刪除特定 ID 的 documents</span></span><br><span class="line">Room.findByIdAndDelete(<span class="string">&quot;621e45063ff3c8af575a7498&quot;</span>) <span class="comment">// id</span></span><br></pre></td></tr></table></figure>
<p>帶入參數 ID，為 <code>findOneAndDelete(&#123;_id: id&#125;)</code> 的簡寫</p>
<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://mongoosejs.com/docs/api/model.html">Mongoose v6.2.10: Model</a></p>
<p>章節影片<br><a href="https://courses.hexschool.com/courses/1670869/lectures/39252184">deleteMany() 刪除全部房型</a><br><a href="https://courses.hexschool.com/courses/1670869/lectures/39252185">刪除單筆 findByIdAndDelete()、更新單筆 findByIdAndUpdate()</a></p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>延續 Day6 - 7 每日任務，嘗試修改、刪除手搖飲 documents<br>可下載此<a href="https://drive.google.com/drive/folders/1oRjCzs3OajeUXVroNO6QS7fNomO1hwZ0?usp=sharing">檔案</a>測試是否可正確更新、刪除單筆資料</p>
<ol>
<li><p>尋找一筆 document 並將 <code>ice</code> 改為 <code>去冰</code>，<code>sugar</code> 改為 <code>半糖</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Drink.findOneAndUpdate(&#123;<span class="attr">name</span>: <span class="string">&quot;百香雙響砲&quot;</span>&#125;,&#123;<span class="attr">ice</span>: <span class="string">&quot;去冰&quot;</span>, <span class="attr">sugar</span>: <span class="string">&quot;半糖&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>以 ID 尋找一筆 document 並將其刪除</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Drink.findByIdAndDelete(<span class="string">&quot;dfkjjh4k2h8a&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>刪除全部 documents</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Drinlk.deleteMany(&#123;&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ol>
<!-- 解答

1.尋找一筆 document 並將 `ice` 改為 `去冰`，`sugar` 改為 `半糖`

Drink.findOneAndUpdate({ name: "鮮奶茶" }, {
    "ice": "去冰",
    "sugar": "半糖"
})

Drink.findByIdAndUpdate("...", {
  "ice": "去冰",
  "sugar": "半糖"
})

// 或是 updateOne() 也可以



2. 以 ID 尋找一筆 document 並將其刪除

Drink.findByIdAndDelete("62559f3bef2d96ec6556bd1e")


3. 刪除全部 documents

Drink.deleteMany({})

]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>node春季直播班第二周主線</title>
    <url>/2022/04/24/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E7%AC%AC%E4%BA%8C%E5%91%A8%E4%B8%BB%E7%B7%9A/</url>
    <content><![CDATA[<h1 id="🏅-node-js直播班-第二周主線-MVC拆分"><a href="#🏅-node-js直播班-第二周主線-MVC拆分" class="headerlink" title="🏅 node.js直播班 第二周主線: MVC拆分"></a>🏅 node.js直播班 第二周主線: MVC拆分</h1><h2 id="MVC架構程式拆分圖"><a href="#MVC架構程式拆分圖" class="headerlink" title="MVC架構程式拆分圖"></a>MVC架構程式拆分圖</h2><p><img src="https://i.imgur.com/OIWbw6G.png"></p>
<a id="more"></a>
<h3 id="MVC架構圖"><a href="#MVC架構圖" class="headerlink" title="MVC架構圖"></a>MVC架構圖</h3><p><img src="https://i.imgur.com/IxrAfjC.png"></p>
<h3 id="初始化圖"><a href="#初始化圖" class="headerlink" title="初始化圖"></a>初始化圖</h3><p><img src="https://i.imgur.com/0pkrmKs.png"></p>
<h3 id="完成圖"><a href="#完成圖" class="headerlink" title="完成圖"></a>完成圖</h3><p><img src="https://i.imgur.com/CVRIUzZ.png"></p>
<h3 id="express-部署流程"><a href="#express-部署流程" class="headerlink" title="express 部署流程"></a>express 部署流程</h3><ol>
<li><code>express --no-view project</code></li>
<li><code>cd project</code></li>
<li><code>npm install</code></li>
<li>加入git版控<code>git init</code></li>
<li><code>git add .</code></li>
<li><code>git commit -m &#39;init&#39;</code></li>
<li>部屬heroku <code>heroku create</code></li>
<li><code>git push heroku master</code></li>
</ol>
<p>errorResponse狀態碼寫法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> headers = <span class="built_in">require</span>(<span class="string">&#x27;./header/baseHeader&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> errorContentCenter = &#123;</span><br><span class="line">  <span class="number">400</span>: &#123;</span><br><span class="line">    <span class="number">40001</span>: <span class="string">&#x27;data is illegal.&#x27;</span>,</span><br><span class="line">    <span class="number">40002</span>: <span class="string">&#x27;data format error.&#x27;</span>,</span><br><span class="line">    <span class="number">40003</span>: <span class="string">&#x27;data not found.&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">403</span>: <span class="string">&#x27;login error&#x27;</span>,</span><br><span class="line">  <span class="keyword">default</span>: <span class="string">&#x27;connect error.&#x27;</span>,</span><br><span class="line">  <span class="number">404</span>: <span class="string">&#x27;page not found.&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> errorHandle = <span class="function">(<span class="params">res, status, errorCode</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> customErrorMessage = errorContentCenter[<span class="string">&#x27;default&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (status) customErrorMessage = errorContentCenter[status]</span><br><span class="line">  <span class="keyword">if</span> (status &amp;&amp; errorCode)</span><br><span class="line">    customErrorMessage = errorContentCenter[status][errorCode]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> data = &#123;</span><br><span class="line">    status: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">    data: <span class="string">`error : <span class="subst">$&#123;customErrorMessage&#125;</span>`</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (errorCode) &#123;</span><br><span class="line">    data = &#123;</span><br><span class="line">      ...data,</span><br><span class="line">      code: errorCode,</span><br><span class="line">      data: <span class="string">`error : <span class="subst">$&#123;errorContentCenter[status][errorCode]&#125;</span>`</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  res.writeHead(status, headers)</span><br><span class="line">  res.write(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">  res.end()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = errorHandle</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>JS新手任務村</title>
    <url>/2023/04/03/JS%E6%96%B0%E6%89%8B%E4%BB%BB%E5%8B%99%E6%9D%91/</url>
    <content><![CDATA[<h1 id="🏅-JS新手任務村"><a href="#🏅-JS新手任務村" class="headerlink" title="🏅 JS新手任務村"></a>🏅 JS新手任務村</h1><h2 id="🏅-Day-1"><a href="#🏅-Day-1" class="headerlink" title="🏅 Day 1"></a>🏅 Day 1</h2><p>真心鎮大冒險 番外篇：</p>
<p>因為追求漂亮阿姨的關係，小明最近手頭非常緊，於是他找到家境不錯的好友「杰倫」，想跟他討教賺大錢的方式。不過杰倫平時也不是很好聯絡，因此小明決定先開發一款用於通訊的小工具，便於與杰倫討論相關事宜。</p>
<h4 id="任務："><a href="#任務：" class="headerlink" title="任務："></a>任務：</h4><ol>
<li>在畫面上呈現小明、杰倫的區塊</li>
<li>區塊內分別有 input, button 以及呈現文字的地方</li>
<li>在小明的區塊內，可以將文字發送到杰倫的區塊內，反之亦可</li>
<li>發出訊息後，須清空 input 欄位<a id="more"></a>
示意圖片：</li>
</ol>
<p><img src="https://i.imgur.com/DSxO9UU.png"></p>
<p>參考 HTML 結構：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;mingInput&quot;&gt;</span><br><span class="line">&lt;button id&#x3D;&quot;mingBtn&quot;&gt;小明發出訊息&lt;&#x2F;button&gt;</span><br><span class="line">&lt;div&gt;小明收到的訊息：&lt;span id&#x3D;&quot;mingMsg&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;jayInput&quot;&gt;</span><br><span class="line">&lt;button id&#x3D;&quot;jayBtn&quot;&gt;杰倫發出訊息&lt;&#x2F;button&gt;</span><br><span class="line">&lt;div&gt;杰倫收到的訊息：&lt;span id&#x3D;&quot;jayMsg&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="學習重點："><a href="#學習重點：" class="headerlink" title="學習重點："></a>學習重點：</h4><ul>
<li>了解如何取得畫面元素 <code>document.querySelector</code></li>
<li>了解如何製作事件監聽及觸發事件 <code>addEventListener</code>、<code>function</code></li>
<li>了解如何將資料寫在畫面上：<a href="https://www.fooish.com/javascript/dom/">https://www.fooish.com/javascript/dom/</a><ul>
<li>主要了解 textContent、value、innerHTML</li>
</ul>
</li>
</ul>
<h4 id="普通挑戰："><a href="#普通挑戰：" class="headerlink" title="普通挑戰："></a>普通挑戰：</h4><ul>
<li>完成雙邊溝通的功能</li>
</ul>
<h4 id="英雄挑戰："><a href="#英雄挑戰：" class="headerlink" title="英雄挑戰："></a>英雄挑戰：</h4><ul>
<li>雙邊溝通只能使用一個函式（參數）</li>
</ul>
<h4 id="批改重點："><a href="#批改重點：" class="headerlink" title="批改重點："></a>批改重點：</h4><ul>
<li>程式執行功能是否正確</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mingMoney = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">var</span> mingTotal = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#mingTotal&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#input&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> addMoneyBtn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#addMoney&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> reduceMoneyBtn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#reduceMoney&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mingTotal.textContent = mingMoney;</span><br><span class="line">addMoneyBtn.addEventListener(<span class="string">&#x27;click&#x27;</span>,addMoney);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMoney</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  mingTotal.textContent = mingMoney += <span class="built_in">Number</span>(input.value);</span><br><span class="line">  input.value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reduceMoneyBtn.addEventListener(<span class="string">&#x27;click&#x27;</span>,reduceMoney);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceMoney</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  mingTotal.textContent = mingTotal.innerText -= input.value;</span><br><span class="line">  input.value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="解答"><a href="#解答" class="headerlink" title="解答:"></a>解答:</h4><ul>
<li>普通挑戰:</li>
</ul>
<iframe height="300" style="width: 100%;" scrolling="no" title="JS新手任務普通挑戰6/15" src="https://codepen.io/pvzfeusk/embed/JjGEZzy?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/JjGEZzy">
  JS新手任務普通挑戰6/15</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<ul>
<li>英雄挑戰:</li>
</ul>
<iframe height="300" style="width: 100%;" scrolling="no" title="JS新手任務Day 1 (6/15)英雄挑戰" src="https://codepen.io/pvzfeusk/embed/ExeqwgX?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/ExeqwgX">
  JS新手任務Day 1 (6/15)英雄挑戰</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
---

<h2 id="🏅-Day-2"><a href="#🏅-Day-2" class="headerlink" title="🏅 Day 2"></a>🏅 Day 2</h2><p>小明在討教前也準備了自己的構想，白手起家就要做無本生意，小明與杰倫說到：「想在這小鎮上進行乞討，不需要資金也可以開始動手」</p>
<p>開始動手乞討前，小明還準備了一個小工具，每當收到乞討費用或支出都可以記錄！</p>
<h4 id="任務：-1"><a href="#任務：-1" class="headerlink" title="任務："></a>任務：</h4><ul>
<li>在畫面上新增一個 input、兩個按鈕以及呈現文字的區塊</li>
<li>按鈕可以觸發新增、減少錢的事件，用來讀取 input 的欄位做計算</li>
<li>小明預設有 1000 元，每次新增、減少都會呈現最終費用於畫面上</li>
</ul>
<p><img src="https://i.imgur.com/57nfC6f.png"></p>
<p>參考 HTML 結構：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;addMoney&quot;</span>&gt;</span>小明增加錢<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;reduceMoney&quot;</span>&gt;</span>小明扣錢<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>小明現在有的錢：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;mingMoney&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="學習重點：-1"><a href="#學習重點：-1" class="headerlink" title="學習重點："></a>學習重點：</h4><ul>
<li>input 取得的都是字串，計算前需要先做到<strong>型別轉換</strong></li>
<li>計算運算子的計算方式</li>
</ul>
<h4 id="普通挑戰：-1"><a href="#普通挑戰：-1" class="headerlink" title="普通挑戰："></a>普通挑戰：</h4><ul>
<li>完成基本計算功能</li>
</ul>
<h4 id="英雄挑戰：-1"><a href="#英雄挑戰：-1" class="headerlink" title="英雄挑戰："></a>英雄挑戰：</h4><ul>
<li>加 / 減 只能使用一個函式</li>
<li>避免出現 NaN 的判斷邏輯</li>
</ul>
<h4 id="批改重點：-1"><a href="#批改重點：-1" class="headerlink" title="批改重點："></a>批改重點：</h4><ul>
<li>程式執行功能是否正確</li>
<li>型別轉換是否正確</li>
</ul>
<h4 id="解答-1"><a href="#解答-1" class="headerlink" title="解答:"></a>解答:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班6/16 Day 2新手任務" src="https://codepen.io/pvzfeusk/embed/mdVWdwo?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/mdVWdwo">
  JS直播班6/16 Day 2新手任務</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<hr>
<h2 id="🏅-Day-3"><a href="#🏅-Day-3" class="headerlink" title="🏅 Day 3"></a>🏅 Day 3</h2><p>杰倫對小明乞討的概念回應：「這個方式很遜，我們有錢人是不會做乞討的行為」，與小明提到「助人為快樂之本」，可以將「將資金借給需要的人」。由杰倫出錢小明去尋找鎮上需要幫助的人，借款後再收取微薄費用作為利息，不僅能夠賺錢更能助人。</p>
<p>小明最喜歡幫助人了，別人的事情就是他的事情，但在開始前需要一個簡單的工具，用來計算是否可以借錢給需要的人。</p>
<h4 id="任務：-2"><a href="#任務：-2" class="headerlink" title="任務："></a>任務：</h4><ul>
<li>杰倫預設有 5,000,000 元</li>
<li>鄰居的借款金額審核<ul>
<li>填寫一個金額，並且計算是否符合借款標準</li>
</ul>
</li>
<li>借款標準及利息，金額太低代表此人不需要幫助，越需要幫助的人利息越低<ul>
<li>借款低於 1000 元，不借款</li>
<li>1001 ~ 10000 年利率 20%</li>
<li>10001 ~ 100000 年利率 18%</li>
<li>100001 年利率 15%</li>
</ul>
</li>
<li>於畫面上<ul>
<li>呈現借或不借，當不借的時候「鄰居決定貸款」的按鈕加上 disabled，反之移除</li>
<li>以及 1 ~ 3 年期的累計年利率</li>
<li>數字都以整數呈現</li>
</ul>
</li>
<li>增加一個按鈕 「鄰居決定貸款」<ul>
<li>決定貸款後重新計算杰倫還有多少費用</li>
<li>清空上方的資料內容</li>
</ul>
</li>
</ul>
<p>金額太少不借款<br><img src="https://i.imgur.com/exUTUHQ.png"></p>
<p>試算利息金額<br><img src="https://i.imgur.com/YN0cBss.png"></p>
<p>預估成效<br><img src="https://i.imgur.com/DrbhrWe.png"></p>
<p>範例程式碼：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;number&quot; id&#x3D;&quot;input&quot;&gt; 鄰居的貸款金額</span><br><span class="line">&lt;button id&#x3D;&quot;submit&quot;&gt;送出&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;貸款結果：&lt;span id&#x3D;&quot;result&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;一年期：&lt;span id&#x3D;&quot;oneYear&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;二年期：&lt;span id&#x3D;&quot;twoYears&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;三年期：&lt;span id&#x3D;&quot;threeYears&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;button id&#x3D;&quot;loanBtn&quot;&gt;鄰居決定貸款&lt;&#x2F;button&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;div&gt;杰倫還剩下：&lt;span id&#x3D;&quot;remaining&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;三年後會有多少錢：&lt;span id&#x3D;&quot;profit&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;hr&gt;</span><br></pre></td></tr></table></figure>

<h4 id="學習重點：-2"><a href="#學習重點：-2" class="headerlink" title="學習重點："></a>學習重點：</h4><ul>
<li>判斷式的運用</li>
<li>型別轉換、parseInt 轉換成整數</li>
<li>數字累算</li>
</ul>
<h4 id="普通挑戰：-2"><a href="#普通挑戰：-2" class="headerlink" title="普通挑戰："></a>普通挑戰：</h4><ul>
<li>完成 1 ~ 3 年期的計算方式即可（確定借款不需要製作）</li>
</ul>
<h4 id="英雄挑戰：-2"><a href="#英雄挑戰：-2" class="headerlink" title="英雄挑戰："></a>英雄挑戰：</h4><ul>
<li>使用陣列完成 1 ~ 3 年期的統計方式</li>
<li>完成「確定借款」功能</li>
</ul>
<h4 id="批改重點：-2"><a href="#批改重點：-2" class="headerlink" title="批改重點："></a>批改重點：</h4><ul>
<li>程式執行功能是否正確</li>
<li>型別轉換是否正確</li>
</ul>
<h4 id="解答-2"><a href="#解答-2" class="headerlink" title="解答:"></a>解答:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班新手任務6/17Day3" src="https://codepen.io/pvzfeusk/embed/gOPmbba?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/gOPmbba">
  JS直播班新手任務6/17Day3</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<hr>
<h2 id="🏅-Day-4"><a href="#🏅-Day-4" class="headerlink" title="🏅 Day 4"></a>🏅 Day 4</h2><p>小明認為，要呈現自己在「借款」領域的專業，就需要準備一台計算計算機，因此就自幹了一台計算機來解決工作上的需求。</p>
<h4 id="任務：-3"><a href="#任務：-3" class="headerlink" title="任務："></a>任務：</h4><ul>
<li>畫面上陳列數字 0 ~ 9、運算符號、計算的按鈕、呈現結果的區塊</li>
<li>新增第一組數值、第二組數值的變數</li>
<li>每次按下任何數字，都會將第一組數值顯示在畫面上</li>
<li>按下運算符號後，則會進入第二組數值</li>
<li>按下任何數字後，則會將第一組、運算符號、第二組數值呈現在畫面上</li>
<li>按下 計算 的按鈕，則會計算以上的結果（呈現整數即可）</li>
<li>計算結果後清除第一組、第二組、運算符號的變數內容</li>
</ul>
<p>範例程式碼：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;display&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;number&quot;&gt;0&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;number&quot;&gt;1&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;number&quot;&gt;2&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;number&quot;&gt;3&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;number&quot;&gt;4&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;number&quot;&gt;5&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;number&quot;&gt;6&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;number&quot;&gt;7&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;number&quot;&gt;8&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;number&quot;&gt;9&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;operation&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;operation&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;operation&quot;&gt;*&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;operation&quot;&gt;&#x2F;&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="學習重點：-3"><a href="#學習重點：-3" class="headerlink" title="學習重點："></a>學習重點：</h4><ul>
<li>變數儲存的靈活運用</li>
<li>迴圈的基本運用</li>
<li>文字串接在畫面上的技巧</li>
<li>利用判斷式決定第一組、第二組變數的運作</li>
</ul>
<h4 id="普通挑戰：-3"><a href="#普通挑戰：-3" class="headerlink" title="普通挑戰："></a>普通挑戰：</h4><ul>
<li>輸入文字到畫面的呈現（不製作計算）</li>
</ul>
<h4 id="英雄挑戰：-3"><a href="#英雄挑戰：-3" class="headerlink" title="英雄挑戰："></a>英雄挑戰：</h4><ul>
<li>完成計算功能</li>
</ul>
<h4 id="批改重點：-3"><a href="#批改重點：-3" class="headerlink" title="批改重點："></a>批改重點：</h4><ul>
<li>程式執行功能是否正確</li>
<li>型別轉換是否正確</li>
</ul>
<h4 id="解答-3"><a href="#解答-3" class="headerlink" title="解答:"></a>解答:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班新手任務Day 4 (6/18)基本計算機" src="https://codepen.io/pvzfeusk/embed/ZEQeOPX?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/ZEQeOPX">
  JS直播班新手任務Day 4 (6/18)基本計算機</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<hr>
<h2 id="🏅-Day-5"><a href="#🏅-Day-5" class="headerlink" title="🏅 Day 5"></a>🏅 Day 5</h2><p>人在江湖誠信最重要，為了避免糾紛需要紀錄每個鎮上居民的借款金額，小明又撰寫了一個工具來統計<del>用戶的借款記錄</del>小明的助人紀錄。</p>
<p>也因為如此，小明很快迎來第一個客人，鎮上想要自己開店的小杰</p>
<h4 id="任務：-4"><a href="#任務：-4" class="headerlink" title="任務："></a>任務：</h4><ul>
<li>新增鄰居姓名、借款金額的欄位</li>
<li>新增一個陣列，用來儲存所有用戶的借款記錄<ul>
<li>每個陣列內都是一個物件，物件內包含了借款人、借款金額的欄位</li>
</ul>
</li>
<li>當輸入姓名、金額 送出以後，則會新增一筆資料於借款陣列內</li>
<li>預設先新增一筆用戶紀錄</li>
<li>將陣列內的資料呈現於畫面上，包含<ul>
<li>借款的總人數（陣列長度）</li>
<li>貸款總金額（迴圈金額計算）</li>
<li>欠款人的資料</li>
</ul>
</li>
</ul>
<p>參考畫面：<br><img src="https://i.imgur.com/sUIT6fq.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    鄰居姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    鄰居貸款金額：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>送出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;display&quot;</span>&gt;</span>目前借貸人數 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;displayTotal&quot;</span>&gt;</span>目前借貸總金額 50000<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;loanList&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="學習重點：-4"><a href="#學習重點：-4" class="headerlink" title="學習重點："></a>學習重點：</h4><ul>
<li>陣列的新增技巧：<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/push">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/push</a></li>
<li>陣列方法：<a href="https://wcc723.github.io/javascript/2017/06/29/es6-native-array/">https://wcc723.github.io/javascript/2017/06/29/es6-native-array/</a></li>
</ul>
<h4 id="普通挑戰：-4"><a href="#普通挑戰：-4" class="headerlink" title="普通挑戰："></a>普通挑戰：</h4><ul>
<li>完成以上功能</li>
</ul>
<h4 id="英雄挑戰：-4"><a href="#英雄挑戰：-4" class="headerlink" title="英雄挑戰："></a>英雄挑戰：</h4><ul>
<li>完成編輯、刪除特定用戶的功能</li>
</ul>
<h4 id="批改重點：-4"><a href="#批改重點：-4" class="headerlink" title="批改重點："></a>批改重點：</h4><ul>
<li>程式執行功能是否正確</li>
<li>型別轉換是否正確</li>
</ul>
<h4 id="解答-4"><a href="#解答-4" class="headerlink" title="解答:"></a>解答:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班6/19新手任務" src="https://codepen.io/pvzfeusk/embed/eYJvBNa?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/eYJvBNa">
  JS直播班6/19新手任務</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>參考: <a href="https://hackmd.io/@hexschool/HJDbvkFqU/%2FEVTOFKXCRHeHGYcLVfklfw">課程連結</a></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 10(拆分 Model)</title>
    <url>/2022/04/24/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-21/</url>
    <content><![CDATA[<h1 id="🏅-Day-10"><a href="#🏅-Day-10" class="headerlink" title="🏅 Day 10"></a>🏅 Day 10</h1><h2 id="拆分-Model"><a href="#拆分-Model" class="headerlink" title="拆分 Model"></a>拆分 Model</h2><p>因專案會使用到的資料不只有一個 Collection，像是最後會完成的貼文動態牆，會使用到貼文及使用者等等資料，所有資料的 Model、Schema 都集中在 server.js，可能會造成維護、管理不易<br>因此可以嘗試將不同資料的 Model 拆分出來，再引入至 server.js 做使用</p>
<a id="more"></a>
<h3 id="拆分步驟"><a href="#拆分步驟" class="headerlink" title="拆分步驟"></a>拆分步驟</h3><ul>
<li>在專案中建立 models 資料夾</li>
<li>分別依 Collection 建立檔案，如：<code>posts.js</code>、<code>users.js</code>…等等</li>
<li>因 Schema、Model 建立都需要 Mongoose 套件，因此需記得分別在 <code>posts.js</code>、<code>users.js</code> 引入 Mongoose 套件</li>
<li>將 Schema、Model 拆出來<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> postSchema = <span class="keyword">new</span> mongoose.Schema(</span><br><span class="line">  ...</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> Post = mongoose.model(<span class="string">&#x27;Post&#x27;</span>, postSchema);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Post;</span><br></pre></td></tr></table></figure></li>
<li>接著引入 models 資料夾中的 Model 到 server.js，即可直接針對 Model 操作新增、查詢、修改、刪除資料<br>註：引入 Model 時通常變數會使用大寫開頭，例如 Post、User，即可使用 <code>Post.create(...)</code> 等方式直接針對 Post 操作</li>
</ul>
<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://courses.hexschool.com/courses/1670869/lectures/39252181">model export 模組化</a>（章節影片）</p>
<h3 id="題目（將答案貼在-HackMD-並提交至回報區）"><a href="#題目（將答案貼在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案貼在 HackMD 並提交至回報區）"></a>題目（將答案貼在 HackMD 並提交至回報區）</h3><p>嘗試將此<a href="https://drive.google.com/drive/folders/1oRjCzs3OajeUXVroNO6QS7fNomO1hwZ0?usp=sharing">檔案</a>的 Model 拆分到 models 資料夾，並引入 server.js 做使用<br>並附上拆分後的 models 程式碼以及將 models 引入 server.js 的程式碼</p>
<p>提交範例</p>
<ul>
<li>models 資料夾 - posts.js<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> postSchema = <span class="keyword">new</span> mongoose.Schema(</span><br><span class="line">  &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: [<span class="literal">true</span>, <span class="string">&quot;貼文姓名未填寫&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    content: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: [<span class="literal">true</span>, <span class="string">&quot;內容未填寫&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    image: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    createAt: &#123;</span><br><span class="line">      type: <span class="built_in">Date</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="built_in">Date</span>.now,</span><br><span class="line">      select: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    likes: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    versionKey: <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Post = mongoose.model(<span class="string">&quot;Post&quot;</span>, postSchema);</span><br><span class="line"><span class="built_in">module</span>.exports = Post;</span><br></pre></td></tr></table></figure></li>
<li>server.js<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Post = <span class="built_in">require</span>(<span class="string">&#x27;./model/posts&#x27;</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<!-- 解答

- models 資料夾 - posts.js
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> postsSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  <span class="comment">/* Schema 可自行設計 */</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Post = mongoose.model(</span><br><span class="line">  <span class="string">&#x27;Post&#x27;</span>,</span><br><span class="line">  postsSchema</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Post;</span><br></pre></td></tr></table></figure>

<ul>
<li>server.js<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Post = <span class="built_in">require</span>(<span class="string">&#x27;./model/posts&#x27;</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>–&gt;</p>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 11(Express)</title>
    <url>/2022/04/26/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-22/</url>
    <content><![CDATA[<h1 id="🏅-Day-11"><a href="#🏅-Day-11" class="headerlink" title="🏅 Day 11"></a>🏅 Day 11</h1><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><p>Express 是一個 Node.js 的 web 框架，接下來我們會使用它來實作 API，回傳 JSON 給前端使用</p>
<h3 id="安裝-Express"><a href="#安裝-Express" class="headerlink" title="安裝 Express"></a>安裝 Express</h3><ul>
<li>開啟新的專案，並在此專案路徑下先執行 <code>npm init -y</code> 建立 package.json</li>
<li>執行 <code>npm install express --save</code></li>
<li>在專案中新增 app.js，並引入 express 模組，express 是一個 function，執行後會建立一個 app<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br></pre></td></tr></table></figure></li>
<li>指定 port，並使用 app 監聽</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>設定當接收到 GET request 時，回傳 <code>&#39;Hello World!&#39;</code> 文字</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>執行<code>node app.js</code>，並造訪<code> http://localhost:3000/</code>，若設定成功則會看到頁面出現 Hello World!</li>
</ul>
<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://expressjs.com/zh-tw/starter/installing.html">安裝 Express</a><br><a href="https://expressjs.com/zh-tw/starter/hello-world.html">Express “Hello World” 範例</a></p>
<p><a href="https://courses.hexschool.com/courses/1670869/lectures/39299596">Express - Node.js Web 應用程式架構 （可看到 開啟 web 伺服器 章節）</a>（章節影片）</p>
<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>依循上方步驟在專案中安裝 express，並參考此<a href="https://expressjs.com/zh-tw/starter/hello-world.html">範例</a>，造訪頁面時會回傳 Hello World 文字</p>
<p>完成圖如下：造訪 <code> http://localhost:3000/</code>（或自訂的 port) 並有回傳 Hello World<br><img src="https://i.imgur.com/WTYZJFC.png"></p>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 12(設計基本路由)</title>
    <url>/2022/04/26/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-25/</url>
    <content><![CDATA[<h1 id="🏅-Day-12"><a href="#🏅-Day-12" class="headerlink" title="🏅 Day 12"></a>🏅 Day 12</h1><h2 id="設計基本路由"><a href="#設計基本路由" class="headerlink" title="設計基本路由"></a>設計基本路由</h2><p>延續前一天的每日任務，我們設定當造訪根目錄 <code>&#39;/&#39;</code>時，會回傳 Hello World，接著可以此類推，設定當造訪其他頁面的路由（router）</p>
<a id="more"></a>
<p>Express 定義路由的結構如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.METHOD(PATH, HANDLER)</span><br></pre></td></tr></table></figure>
<ul>
<li>  <code>app</code> 是 <code>express</code> 的實例。</li>
<li>  <code>METHOD</code> 是 <a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol">HTTP 要求方法</a>。</li>
<li>  <code>PATH</code> 是伺服器上的路徑。</li>
<li>  <code>HANDLER</code> 是當路由相符時要執行的函數。</li>
</ul>
<p>以<a href="https://xd.adobe.com/view/c0763dbe-fc15-42e8-be0b-8956ed03e675-9525/grid">最終作業設計稿</a>為例，當造訪「全體動態牆」頁面時，路由可以設定為</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/posts&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;全體動態牆&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>新增貼文（POST 請求）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/posts&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;新增一則貼文&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>若是使用者的個人頁面，因每個使用者會有各自的 id 或帳號，此時就可以設計成動態路由<br>再透過 <code>req.params</code> 取得參數</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.params.id</span><br><span class="line">  res.send(<span class="string">`<span class="subst">$&#123;id&#125;</span> 個人頁面`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>




<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://expressjs.com/zh-tw/starter/basic-routing.html">Express 基本路由</a></p>
<p><a href="https://courses.hexschool.com/courses/1670869/lectures/39299599">網址規則介紹</a> 到 <a href="https://courses.hexschool.com/courses/1670869/lectures/39299606">query - 取得網址參數</a>（章節影片）</p>
<h3 id="題目（將答案貼在-HackMD-並提交至回報區）"><a href="#題目（將答案貼在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案貼在 HackMD 並提交至回報區）"></a>題目（將答案貼在 HackMD 並提交至回報區）</h3><p>參考<a href="https://xd.adobe.com/view/c0763dbe-fc15-42e8-be0b-8956ed03e675-9525/grid">最終作業設計稿</a>頁面，設計當使用者造訪以下頁面（<code>GET</code>）時的路由， response 可先回傳一段簡單的文字即可</p>
<ul>
<li>登入</li>
<li>註冊</li>
<li>全體動態牆</li>
<li>個人牆</li>
<li>個人追蹤名單</li>
</ul>
<p>範例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;歡迎來到登入頁&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">- 登入</span><br><span class="line">app.get(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;歡迎來到登入頁&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">- 註冊</span><br><span class="line">app.get(<span class="string">&#x27;/signin&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;歡迎來到註冊頁&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">- 全體動態牆</span><br><span class="line">app.get(<span class="string">&#x27;/posts&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;歡迎來到全體動態牆&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">- 個人牆</span><br><span class="line">app.get(<span class="string">`/user/:id`</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.params.id</span><br><span class="line">  res.send(<span class="string">`歡迎來到 <span class="subst">$&#123;id&#125;</span> 個人動態`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// path 設定為 `/:id` 也可以</span></span><br><span class="line"></span><br><span class="line">- 個人追蹤名單</span><br><span class="line">app.get(<span class="string">`/user/:id/following`</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.params.id</span><br><span class="line">  res.send(<span class="string">`<span class="subst">$&#123;id&#125;</span> 追蹤名單`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// path 設定為 `/:id/following` 也可以</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 13(Express 應用程式產生器（Express generater）)</title>
    <url>/2022/04/26/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-26/</url>
    <content><![CDATA[<h1 id="🏅-Day-13"><a href="#🏅-Day-13" class="headerlink" title="🏅 Day 13"></a>🏅 Day 13</h1><h2 id="Express-應用程式產生器（Express-generater）、在-routes-設計路由"><a href="#Express-應用程式產生器（Express-generater）、在-routes-設計路由" class="headerlink" title="Express 應用程式產生器（Express generater）、在 routes 設計路由"></a>Express 應用程式產生器（Express generater）、在 routes 設計路由</h2><p>express 應用程式產生器可以快速產生一個應用程式架構</p>
<a id="more"></a>
<p>安裝步驟</p>
<ul>
<li>先開好一個新專案</li>
<li>執行 <code>npm install express-generator -g</code></li>
<li>接著切換到專案路徑下，執行 <code>express --no-view</code><br>可參考<a href="https://expressjs.com/zh-tw/starter/generator.html">文件</a>查看指令選項<br>注意：這裡需要選擇 <code>no view</code>，因最終作業最後設計出的 API 只需要回傳 JSON 資料，不會使用到 view 模板引擎<br>:::spoiler 指令選項<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ express -h</span><br><span class="line"></span><br><span class="line">  Usage: express [options][dir]</span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">    -h, --help          output usage information</span><br><span class="line">        --version       output the version number</span><br><span class="line">    -e, --ejs           add ejs engine support</span><br><span class="line">        --hbs           add handlebars engine support</span><br><span class="line">        --pug           add pug engine support</span><br><span class="line">    -H, --hogan         add hogan.js engine support</span><br><span class="line">        --no-view       generate without view engine</span><br><span class="line">    -v, --view &lt;engine&gt; add view &lt;engine&gt; support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)</span><br><span class="line">    -c, --css &lt;engine&gt;  add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)</span><br><span class="line">        --git           add .gitignore</span><br><span class="line">    -f, --force         force on non-empty directory</span><br></pre></td></tr></table></figure>
:::</li>
</ul>
<p>執行成功後應該會出現以下結構<br>:::spoiler 資料夾結構</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── app.js</span><br><span class="line">├── bin</span><br><span class="line">│   └── www</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   ├── images</span><br><span class="line">│   ├── javascripts</span><br><span class="line">│   ├── stylesheets</span><br><span class="line">│       └── style.css</span><br><span class="line">    └── index.html</span><br><span class="line">└── routes</span><br><span class="line">    ├── index.js</span><br><span class="line">    └── users.js</span><br></pre></td></tr></table></figure>
<p>:::</p>
<p>此結構已將 routes 的部分拆成獨立模組，並在 app.js 引入<br>在 routes 的 index.js 或 users.js，會使用 <code>const router = express.Router()</code><br>並使用 <code>router</code> 來設定路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;respond with a resource&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>需注意在 app.js 引入使用時，就會自動帶入 <code>/users</code>，因此 users.js 中 path 可直接從 <code>/users</code> 之後開始（<code>router.get(&#39;/&#39;, ...)</code> 就會是 <code>/users</code>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const usersRouter &#x3D; require(&#39;.&#x2F;routes&#x2F;users&#39;);</span><br><span class="line">app.use(&#39;&#x2F;users&#39;, usersRouter);</span><br></pre></td></tr></table></figure>
<p>第一次啟用伺服器時需執行 <code>npm install</code> 安裝相關套件，並執行 <code>npm start</code><br>若想使用 nodemon 運行也可自行在 package.json 加上指令，並使用 <code>npm run start:dev</code> 運行</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;node ./bin/www&quot;,</span><br><span class="line">    &quot;start:dev&quot;: &quot;nodemon ./bin/www&quot;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p> <a href="https://expressjs.com/zh-tw/starter/generator.html">Express 應用程式產生器</a><br> <a href="http://expressjs.com/zh-tw/api.html#express.router">Express - API</a><br><a href="https://courses.hexschool.com/courses/1670869/lectures/39299607">Router 進階設定</a> 到 <a href="https://courses.hexschool.com/courses/1670869/lectures/39299612">express-generator (下)</a>（章節影片）</p>
<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>此<a href="https://github.com/dogwantfly/express-user">專案</a>為使用 express generater 產生的結構，請嘗試在此 routes 資料夾的 users.js，設計新增及修改個人資料的路由（搭配動態路由），在註解處填上答案（可使用 POSTMAN 測試是否可正確運作），完成後將 users.js 的程式碼貼到 HackMD 並提交至回報區</p>
<p>解答<br>users.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">&#x27;../models/users&#x27;</span>);</span><br><span class="line"><span class="comment">/* GET users listing. */</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> allUser =  <span class="keyword">await</span> User.find();</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: allUser</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">router.delete(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> User.deleteMany(&#123;&#125;);</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data = req.body;</span><br><span class="line">    <span class="keyword">let</span> &#123; nickName, gender, avatar&#125; = data;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">!nickName||!gender</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 回傳失敗</span></span><br><span class="line">      res.status(<span class="number">400</span>).json(&#123;</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;使用者資料未填寫完整&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 新增至 User model</span></span><br><span class="line">      <span class="keyword">const</span> newUser = <span class="keyword">await</span> User.create(</span><br><span class="line">        &#123;</span><br><span class="line">          nickName,</span><br><span class="line">          gender,</span><br><span class="line">          avatar</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">      res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: newUser</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 回傳失敗</span></span><br><span class="line">    res.status(<span class="number">400</span>).json(&#123;</span><br><span class="line">      <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;message&quot;</span>: error.message</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 </span></span><br><span class="line">router.patch(<span class="string">&#x27;/:id&#x27;</span>, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 取得 id</span></span><br><span class="line">    <span class="keyword">const</span> id = req.params.id;</span><br><span class="line">    <span class="keyword">const</span> data = req.body;</span><br><span class="line">    <span class="keyword">let</span> &#123; nickName, gender, avatar &#125; = data;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">!nickName||!gender</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 回傳失敗 &quot;使用者資料未填寫完整&quot;</span></span><br><span class="line">      res.status(<span class="number">400</span>).json(&#123;</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;使用者資料未填寫完整&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> editContent = &#123;</span><br><span class="line">        nickName,</span><br><span class="line">        gender</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="comment">// 找出此筆 id 並編輯資料</span></span><br><span class="line">      <span class="comment">// const editUser = </span></span><br><span class="line">      <span class="keyword">const</span> editUser = <span class="keyword">await</span> User.findByIdAndUpdate(id, editContent, &#123; <span class="attr">new</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">      <span class="keyword">if</span> (editUser) &#123;</span><br><span class="line">        res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">          <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">          <span class="string">&quot;data&quot;</span>: editUser</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.status(<span class="number">400</span>).json(&#123;</span><br><span class="line">          <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">          <span class="string">&quot;message&quot;</span>: <span class="string">&quot;id 不存在&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 回傳失敗</span></span><br><span class="line">    res.status(<span class="number">400</span>).json(&#123;</span><br><span class="line">      <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;message&quot;</span>: error.message</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 14(req.query 篩選網址參數)</title>
    <url>/2022/04/30/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-27/</url>
    <content><![CDATA[<h1 id="🏅-Day-14"><a href="#🏅-Day-14" class="headerlink" title="🏅 Day 14"></a>🏅 Day 14</h1><h2 id="req-query-篩選網址參數"><a href="#req-query-篩選網址參數" class="headerlink" title="req.query 篩選網址參數"></a>req.query 篩選網址參數</h2><p>除了先前使用 <code>req.params</code> 取得動態路由外，也可在 url 帶入相關資訊，再使用 <code>req.query</code> 取出網址列的參數</p>
<a id="more"></a>
<p>例如：網址列為 <code>https://example.com/over/there?name=ferrett&amp;color=purple</code>，其中 ? 用來分隔後面帶入的參數 <code>name=ferret</code> 及 <code>color=purple</code>，多個參數之間也會使用 &amp; 分隔</p>
<p>當使用者造訪此網址時， express 可以使用 req.query 取出網址列的這些參數 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;https://example.com/over/there?name=ferrett&amp;color=purple)&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.query)</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// req.query</span></span><br><span class="line">&#123; </span><br><span class="line">  name: <span class="string">&#x27;ferret&#x27;</span>,</span><br><span class="line">  color: <span class="string">&#x27;purple&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>req.query.name</code> 或 <code>req.query.color</code> 就可以取出需要的資訊做相關處理</p>
<p>req.query 常見的應用是搜尋關鍵字，當使用者輸入關鍵字後，會將關鍵字帶到網址列中，伺服器接收到，再藉由 req.query 取出，尋找資料庫中符合其關鍵字的資料，並回傳至客戶端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#39;https:&#x2F;&#x2F;example.com&#x2F;search?q&#x3D;apple&#39; &#x2F;&#x2F; 通常會以 q 表示搜尋關鍵字</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/search&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> q = req.query.q</span><br><span class="line">  <span class="keyword">const</span> results = <span class="keyword">await</span> Data.find(q); <span class="comment">// 使用 mongoose 搜尋資料庫中符合 req.query.q 的資料</span></span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    results: results.length,</span><br><span class="line">    data: &#123;</span><br><span class="line">        results</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://expressjs.com/zh-tw/api.html#req.query">Express - req.query</a></p>
<p><a href="https://courses.hexschool.com/courses/1670869/lectures/39299606">query - 取得網址參數</a>（章節影片）</p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>請在 express 專案中，將以下 url 中的參數使用 req.query 取出，並回傳取出的參數（可自行建立 express 專案，先在 app.js 練習即可）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;http://localhost:3000/products?category=music&amp;page=1&#x27;</span> <span class="comment">// 在 POSTMAN 發出 GET 請求</span></span><br><span class="line">app.get(<span class="string">&#x27;/products&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 取出參數</span></span><br><span class="line">  <span class="comment">/* 請在此填寫答案*/</span></span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      <span class="comment">/* 請在此填寫答案*/</span>      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/products&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 取出參數</span></span><br><span class="line">  <span class="keyword">const</span> category = req.query.category;</span><br><span class="line">  <span class="keyword">const</span> page = req.query.page;</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      category,</span><br><span class="line">      page,     </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 15(req.body)</title>
    <url>/2022/04/30/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-28/</url>
    <content><![CDATA[<h1 id="🏅-Day-15"><a href="#🏅-Day-15" class="headerlink" title="🏅 Day 15"></a>🏅 Day 15</h1><h2 id="req-body"><a href="#req-body" class="headerlink" title="req.body"></a>req.body</h2><p>若客戶端請求有 request body，可使用 req.body 取得 request body 的 <code>key: value</code> 資料</p>
<a id="more"></a>
<p>範例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#39;http:&#x2F;&#x2F;localhost:3000&#x2F;products&#39; </span><br><span class="line"></span><br><span class="line">將資料帶入 request body</span><br><span class="line">&#123;</span><br><span class="line">  &quot;product&quot;: &quot;hamburger&quot;,</span><br><span class="line">  &quot;quantity&quot;: 2,</span><br><span class="line">  &quot;price&quot;: 50</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/products&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = req.body;</span><br><span class="line">    <span class="keyword">if</span> (data.product) &#123;</span><br><span class="line">      <span class="comment">// 使用 mongoose 將 data 新增至資料庫 </span></span><br><span class="line">      <span class="keyword">const</span> newProduct = <span class="keyword">await</span> Product.create(</span><br><span class="line">        &#123;</span><br><span class="line">          product: data.product,</span><br><span class="line">          quantity: data.quantity,</span><br><span class="line">          price: data.price</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">      res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">        status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        data,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;欄位填寫錯誤&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://expressjs.com/zh-tw/api.html">Express - API</a></p>
<h3 id="題目（將答案寫在-GitHub-Repo-並提交至回報區）"><a href="#題目（將答案寫在-GitHub-Repo-並提交至回報區）" class="headerlink" title="題目（將答案寫在 GitHub Repo 並提交至回報區）"></a>題目（將答案寫在 <strong>GitHub Repo</strong> 並提交至回報區）</h3><p>請參考<a href="https://xd.adobe.com/view/c0763dbe-fc15-42e8-be0b-8956ed03e675-9525/grid">最終作業設計稿</a>，透過 POST API 的 req.body 新增一則貼文，並加上 Schema 欄位資料驗證，可複製或下載此<a href="https://github.com/dogwantfly/express-add-post">程式碼</a>練習，完成後提交自己的 GitHub Repo</p>
<p>解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span>(req, res, next) =&gt;  &#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; body &#125; = req;</span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">body.content !== <span class="literal">undefined</span></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">const</span> newPost = <span class="keyword">await</span> Post.create(</span><br><span class="line">              &#123;</span><br><span class="line">                  name: body.name,</span><br><span class="line">                  content: body.content,</span><br><span class="line">                  tags:body.tags,</span><br><span class="line">                  type:body.type</span><br><span class="line">              &#125;</span><br><span class="line">          );</span><br><span class="line">          res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">              status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">              <span class="string">&quot;data&quot;</span>: newPost</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          res.status(<span class="number">400</span>).json(&#123;</span><br><span class="line">              <span class="string">&quot;status&quot;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">              <span class="string">&quot;message&quot;</span>: <span class="string">&quot;欄位未填寫正確，或無此 ID&quot;</span></span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">      res.status(<span class="number">400</span>).json(&#123;</span><br><span class="line">          status: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">          <span class="string">&quot;message&quot;</span>: <span class="string">&quot;欄位未填寫正確，或無此 ID&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 16(req.params 取得特定資料)</title>
    <url>/2022/04/30/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%994-29/</url>
    <content><![CDATA[<h1 id="🏅-Day-16"><a href="#🏅-Day-16" class="headerlink" title="🏅 Day 16"></a>🏅 Day 16</h1><h2 id="req-params-取得特定資料"><a href="#req-params-取得特定資料" class="headerlink" title="req.params 取得特定資料"></a>req.params 取得特定資料</h2><a id="more"></a>
<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://expressjs.com/zh-tw/api.html#req.params">Express 4.x - API 參照(req.params)</a><br><a href="https://courses.hexschool.com/courses/1670869/lectures/39299605">params - 取得指定路徑</a>（章節影片）</p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>延續 Day 15 每日任務，練習取得(GET) 特定貼文資料<br>請在先前每日任務的 express <a href="https://github.com/dogwantfly/express-add-post">專案</a>使用 express 提供的 req.params 取得貼文 id，並使用 mongoose 尋找符合 id 的資料，最後 response 該特定貼文資料（若 id 不存在可做簡易錯誤處理）</p>
<p>例如：例如當 client 端輸入這個<a href="https://www.facebook.com/sfismy/posts/5281803261839276">網址</a>時，可以 response 該特定貼文資料</p>
<p>將 routes/posts.js 中，取得單一貼文的程式碼貼至 HackMD 並提交至回報區</p>
<p>解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/:id&#x27;</span>, <span class="keyword">async</span>(req, res, next) =&gt;  &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = req.params.id;</span><br><span class="line">    <span class="keyword">const</span> post = <span class="keyword">await</span> Post.find(&#123; <span class="attr">_id</span>: id &#125;);</span><br><span class="line">    <span class="keyword">if</span> (post.length) &#123;</span><br><span class="line">      res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">        status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            post</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.status(<span class="number">400</span>).json(&#123;</span><br><span class="line">        status: <span class="string">&#x27;fail&#x27;</span>,</span><br><span class="line">        message: <span class="string">&quot;id 不存在&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    res.status(<span class="number">400</span>).json(&#123;</span><br><span class="line">      status: <span class="string">&#x27;fail&#x27;</span>,</span><br><span class="line">      message: err.message</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 18(Mongoose - Populate)</title>
    <url>/2022/05/06/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day18/</url>
    <content><![CDATA[<h1 id="🏅-Day-18"><a href="#🏅-Day-18" class="headerlink" title="🏅 Day 18"></a>🏅 Day 18</h1><h2 id="Mongoose-Populate"><a href="#Mongoose-Populate" class="headerlink" title="Mongoose - Populate"></a>Mongoose - Populate</h2><p>Mongoose 有提供 <code>populate()</code> 方法，可以將其他 collection 的資料關聯到目前在操作的 collection</p>
<a id="more"></a>
<p>這裡引用官方文件中的範例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Schema &#125; = mongoose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personSchema = Schema(&#123;</span><br><span class="line">  _id: Schema.Types.ObjectId,</span><br><span class="line">  name: <span class="built_in">String</span>,</span><br><span class="line">  age: <span class="built_in">Number</span>,</span><br><span class="line">  stories: [&#123; <span class="attr">type</span>: Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">&#x27;Story&#x27;</span> &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storySchema = Schema(&#123;</span><br><span class="line">  author: &#123; <span class="attr">type</span>: Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">&#x27;Person&#x27;</span> &#125;,</span><br><span class="line">  title: <span class="built_in">String</span>,</span><br><span class="line">  fans: [&#123; <span class="attr">type</span>: Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">&#x27;Person&#x27;</span> &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Story = mongoose.model(<span class="string">&#x27;Story&#x27;</span>, storySchema);</span><br><span class="line"><span class="keyword">const</span> Person = mongoose.model(<span class="string">&#x27;Person&#x27;</span>, personSchema);</span><br></pre></td></tr></table></figure>
<p>可以看到上方最後兩行有兩個 Model，分別是 Story 和 Person，兩者也都有連到各自的資料庫 collection<br>personSchema 中的 <code>stories</code> 欄位關聯至 storySchema 的 <code>id</code> 欄位，storySchema 的 <code>author</code> 及 <code>fans</code> 欄位，其中 <code>ref</code> 選項是告訴 Mongoose 關聯資料時要使用哪個 Model</p>
<p>接下來取得資料時就可以使用 <code>populate()</code> 加入相關設定，就可以在取得資料時依據 Schema 的設定取得其他 collection 的資料</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Story.</span><br><span class="line">  find().</span><br><span class="line">  populate(&#123; <span class="attr">path</span>: <span class="string">&#x27;fans&#x27;</span>, <span class="attr">select</span>: <span class="string">&#x27;name&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>
<p>取得 Story 資料時，資料的 fans 欄位就會關聯至 Person collection，找出符合該 id 的 document，<code>select</code> 是指定要取出該 document 的哪些欄位，上方範例是取出 document 中的 <code>name</code> 欄位<br>取出多個欄位的寫法為 <code>select: &#39;name age&#39;</code>，就會取出 document 中的 <code>name</code> 和 <code>age</code> 欄位</p>
<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://mongoosejs.com/docs/populate.html">Mongoose v6.3.1: Query Population</a></p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>以下為書籍與作者的 collection，請填入對應答案，讓取出單筆書籍資料時，可以關聯至 author 的資料</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> authorSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    introduction: <span class="built_in">String</span></span><br><span class="line">  &#125;, &#123; <span class="attr">versionKey</span>: <span class="literal">false</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bookSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  author : &#123; <span class="attr">type</span>: mongoose.Schema.ObjectId, <span class="attr">ref</span>: <span class="string">&#x27;Author&#x27;</span><span class="comment">/*請填入答案*/</span> &#125;,</span><br><span class="line">  title: <span class="built_in">String</span></span><br><span class="line">&#125;, &#123; <span class="attr">versionKey</span>: <span class="literal">false</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Author = mongoose.model(<span class="string">&#x27;Author&#x27;</span>, authorSchema);</span><br><span class="line"><span class="keyword">const</span> Book = mongoose.model(<span class="string">&#x27;Book&#x27;</span>, bookSchema);</span><br></pre></td></tr></table></figure>
<p>取出所有 books 的資料，關聯 author 欄位並指定顯示 author 資料的 name 欄位</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Book.find(&#123;<span class="attr">_id</span>: id &#125;).populate(&#123;</span><br><span class="line">    path: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">    select: <span class="string">&#x27;name&#x27;</span></span><br><span class="line">&#125;)<span class="comment">/*請填入答案*/</span></span><br></pre></td></tr></table></figure>
<p>可使用此<a href="https://github.com/dogwantfly/mongoose-populate">專案</a>練習及測試是否可正確運作，流程為以下</p>
<ul>
<li>新增一筆 author 資料</li>
<li>帶入 author id 新增一筆 book 資料</li>
<li>以 book id 取得指定的 book 資料，並有正確顯示出 author 的 name<br>取得單筆 book 資料範例<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;book&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;62700cf6fe019820d43e5332&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;author&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;62700a66e6922ea65f83054b&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Mike&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;book title&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// models/books.js</span></span><br><span class="line"><span class="keyword">const</span> bookSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  author : &#123; <span class="attr">type</span>: mongoose.Schema.ObjectId, <span class="attr">ref</span>: <span class="string">&#x27;Author&#x27;</span> &#125;,</span><br><span class="line">  title: <span class="built_in">String</span></span><br><span class="line">&#125;, &#123; <span class="attr">versionKey</span>: <span class="literal">false</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// models/books.js</span></span><br><span class="line"> <span class="keyword">const</span> book = <span class="keyword">await</span> Book.find(&#123;<span class="attr">_id</span>: id &#125;).populate(&#123;</span><br><span class="line">      path: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">      select: <span class="string">&#x27;name&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 19(取得資料搭配 sort()、limit())</title>
    <url>/2022/05/06/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day19/</url>
    <content><![CDATA[<h1 id="🏅-Day-19"><a href="#🏅-Day-19" class="headerlink" title="🏅 Day 19"></a>🏅 Day 19</h1><h2 id="取得資料搭配-sort-、limit"><a href="#取得資料搭配-sort-、limit" class="headerlink" title="取得資料搭配 sort()、limit()"></a>取得資料搭配 sort()、limit()</h2><a id="more"></a>
<p>Mongoose 的 <code>sort()</code>  可使用物件寫法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort(&#123; field: &#39;asc&#39;, test: -1 &#125;) </span><br><span class="line">&#x2F;&#x2F; field 欄位以升序排列，test 欄位以降序排列</span><br></pre></td></tr></table></figure>
<p>，也可只帶入欄位名稱（欄位名稱前加上 - 代表降序排列）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query.sort(&#39;field -test&#39;);</span><br><span class="line">&#x2F;&#x2F; field 欄位以升序排列，test 欄位以降序排列</span><br></pre></td></tr></table></figure>

<p>Mongoose 的 <code>limit()</code> 可直接帶入數字，如：<code>.limit(20)</code> 代表最多呈現 20 筆資料</p>
<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://mongoosejs.com/docs/api/query.html#query_Query-sort">Query.prototype.sort()</a><br><a href="https://mongoosejs.com/docs/api/query.html#query_Query-limit">Query.prototype.limit()</a></p>
<p><a href="https://courses.hexschool.com/courses/1670869/lectures/39299606">query - 取得網址參數</a>（章節影片）</p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>在 GET posts 網址列帶入排序及限制筆數的參數<br>並運用 Express 提供的 req.query 取得網址列的參數，將尋找到符合的資料設定排序及呈現指定資料數量</p>
<p>提交範例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// routes/posts.js</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用三元運算子判斷是否為 asc (由舊至新)，若是則由舊至新排列，否則由新至舊排列</span></span><br><span class="line">  <span class="keyword">const</span> timeSort = </span><br><span class="line">  <span class="comment">// 帶入網址列的參數</span></span><br><span class="line">  <span class="keyword">const</span> limit = </span><br><span class="line">  <span class="keyword">const</span> post = <span class="keyword">await</span> Post.find()<span class="comment">/* 請填入答案 */</span></span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      post</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> timeSort = req.query.timeSort == <span class="string">&quot;asc&quot;</span> ? <span class="string">&quot;createdAt&quot;</span>:<span class="string">&quot;-createdAt&quot;</span></span><br><span class="line">  <span class="keyword">const</span> q = req.query.q !== <span class="literal">undefined</span> ? &#123;<span class="string">&quot;content&quot;</span>: <span class="keyword">new</span> <span class="built_in">RegExp</span>(req.query.q)&#125; : &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> limit = req.query.limit;</span><br><span class="line">  <span class="keyword">const</span> post = <span class="keyword">await</span> Post.find(q).populate(&#123;</span><br><span class="line">    path: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    select: <span class="string">&#x27;name photo &#x27;</span></span><br><span class="line">  &#125;).sort(timeSort).limit(limit);</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      post</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">  <span class="comment">// asc 遞增(由小到大，由舊到新) createdAt ; </span></span><br><span class="line">  <span class="comment">// desc 遞減(由大到小、由新到舊) &quot;-createdAt&quot;</span></span><br></pre></td></tr></table></figure>
<p>可自行建立專案或使用先前提供的<a href="https://github.com/dogwantfly/express-add-post">專案</a>測試是否正確運作</p>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 21(HTTP 狀態碼)</title>
    <url>/2022/05/06/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day21/</url>
    <content><![CDATA[<h1 id="🏅-Day-21"><a href="#🏅-Day-21" class="headerlink" title="🏅 Day 21"></a>🏅 Day 21</h1><h2 id="HTTP-狀態碼"><a href="#HTTP-狀態碼" class="headerlink" title="HTTP 狀態碼"></a>HTTP 狀態碼</h2><p>Server 端通常會在回應時以 HTTP 狀態碼表示 Client 端發出的請求是否已被完成、處理狀態，狀態碼通常會以三個數字呈現，並以開頭第一個數字表示主要的處理狀態</p>
<a id="more"></a>


<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Status">HTTP 狀態碼 - HTTP | MDN</a></p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>請根據以下情境，回覆 Server 端在 response 中應回傳何種 HTTP 狀態碼</p>
<p>回覆範例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.200</span><br><span class="line">2.400</span><br><span class="line">3.500</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ol>
<li>Client 端對 Server 端發出 GET 請求，並且請求的 url 是 Server 端有的，將此資料回傳給 Client</li>
<li>Client 端對 Server 端發出 POST 請求並帶入產品資料，Server 端接收請求後成功新增一筆產品資料到資料庫中，並回傳此產品資料給 Client 端</li>
<li>Client 端對 Server 端發出 POST 請求並帶入產品資料，但帶入的資料格式錯誤，導致 Server 端無法正確處理資料及新增，因此回傳失敗的訊息給 Client</li>
<li>Client 端對 Server 端發出 GET 請求，但因 Server 端發生意外情況導致無法回傳需要的資源給 Client</li>
<li>Client 端對 Server 端發出 GET 請求，但 Server 端沒有與此 url 相符的路由，因此無法將請求資料回傳給 Client</li>
<li>Client 端對 Server 端發出 GET 請求，但請求的 url 需要有相關 Token 驗證，而Server 端未接收到 Token，驗證失敗，因此無法將請求資料回傳給 Client</li>
</ol>
<p>解答<br>1.200<br>2.201 或 200<br>3.400<br>4.500<br>5.404<br>6.401</p>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 20(Middleware)</title>
    <url>/2022/05/06/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day20/</url>
    <content><![CDATA[<h1 id="🏅-Day-20"><a href="#🏅-Day-20" class="headerlink" title="🏅 Day 20"></a>🏅 Day 20</h1><h2 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h2><a id="more"></a>
<p>Express 在收到 request 到回傳 response，中間會經過一系列的 middleware（中間件/中介軟體）處理，<br>middleware 本身像是一個守門員的概念，通常會使用 <code>app.use((req, res, next) =&gt; &#123;...&#125;)</code> 並帶入 function，function 中除了 req 及 res 參數，還有 next，當執行 <code>next()</code> 就代表要將控制權交給下一個 Middleware<br>需注意若在 Middleware 最後沒有執行 <code>next()</code>，程式就會停留在這個 Middleware，無法進入下一個階段</p>
<p>使用 <code>app.use((req, res, next) =&gt; &#123;...&#125;)</code> 的寫法在接收 request 時都會經過此 middleware，若是只想要在接收特定 request 時經過 middleware 把關，也可以改為此寫法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> checkLogin = <span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = req.url;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">url !== <span class="string">&#x27;/&#x27;</span></span>)</span>&#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(<span class="string">&#x27;你的登入資料有錯！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 將 middleware 放在特定的路由中，只有接收到此 request 才會經過 checkLogin middleware</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, checkLogin, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Login&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://expressjs.com/zh-tw/guide/using-middleware.html">使用 Express 中介軟體</a><br><a href="https://courses.hexschool.com/courses/1670869/lectures/39299787">middleware 設計</a>（章節影片）</p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>嘗試使用 <code>app.use()</code> 設計一個處理錯誤路由以及一個伺服器程式錯誤的 Middleware，</p>
<ul>
<li><p>處理錯誤路由：<br>當 client 端造訪錯誤的路由，就回傳狀態碼 404，並回傳 JSON 物件，status 為 <code>&#39;error&#39;</code>，回饋訊息 message 為<code>無此頁面資訊</code></p>
</li>
<li><p>伺服器程式錯誤：<br>當 server 端有程式出錯的情況，導致 client 端無法正確造訪路由，就回傳狀態碼 500，並回傳 JSON 物件，status 為 <code>&#39;error&#39;</code>，回饋訊息 message 為 <code>系統錯誤，請恰系統管理員</code></p>
</li>
</ul>
<p> 解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.status(<span class="number">404</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">    message: <span class="string">&quot;無此頁面資訊&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.status(<span class="number">500</span>).json(&#123;</span><br><span class="line">   status: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">   message: <span class="string">&#x27;系統錯誤，請洽系統管理員&#x27;</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 22(uncaughtException、unhandledRejection)</title>
    <url>/2022/05/13/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day22/</url>
    <content><![CDATA[<h1 id="🏅-Day-22"><a href="#🏅-Day-22" class="headerlink" title="🏅 Day 22"></a>🏅 Day 22</h1><h2 id="uncaughtException、unhandledRejection"><a href="#uncaughtException、unhandledRejection" class="headerlink" title="uncaughtException、unhandledRejection"></a>uncaughtException、unhandledRejection</h2><p>在設計程式時也有可能會有開發者程式沒寫好、沒考慮到的部分，這時可能就因此出現不可預期的錯誤，因此在 Node.js，運行程式出錯時，若是<strong>同步</strong>的程式就會出現 <code>uncaughtException</code>，<strong>非同步</strong>程式則會出現 <code>unhandledRejection</code></p>
<a id="more"></a>
<p>同步的錯誤例如：app.js 中有出現未宣告過的變數 test<br>非同步錯誤例如：某 async function 中，未使用到 await，或遠端資料庫連線失敗 （若未使用 catch 接錯誤就會發生 unhandledRejection）</p>
<p>在事件發生時，將錯誤記錄於 server，並在處理後離開此 process</p>
<p><strong>uncaughtException 處理範例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 程式出現重大錯誤時</span></span><br><span class="line">process.on(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 記錄錯誤下來，等到服務都處理完後，停掉該 process</span></span><br><span class="line">	<span class="built_in">console</span>.error(<span class="string">&#x27;Uncaughted Exception！&#x27;</span>)</span><br><span class="line">	<span class="built_in">console</span>.error(err);</span><br><span class="line">	process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>出錯時的紀錄會出現:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Uncaughted Exception！</span><br><span class="line">ReferenceError: test is not defined</span><br><span class="line">    at Object.&lt;anonymous&gt; (...略)</span><br></pre></td></tr></table></figure>
<p><strong>uncaughtException 處理範例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未捕捉到的 catch </span></span><br><span class="line">process.on(<span class="string">&#x27;unhandledRejection&#x27;</span>, <span class="function">(<span class="params">reason, promise</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;未捕捉到的 rejection：&#x27;</span>, promise, <span class="string">&#x27;原因：&#x27;</span>, reason);</span><br><span class="line">  <span class="comment">// 記錄於 log 上</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>出錯時的紀錄會出現</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">未捕捉到的 rejection： Promise &#123;</span><br><span class="line">  &lt;rejected&gt; ReferenceError: timeSor is not defined</span><br><span class="line">      at ...略</span><br><span class="line">&#125; 原因： ReferenceError: timeSor is not defined</span><br><span class="line">    at ...略</span><br></pre></td></tr></table></figure>

<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://nodejs.org/api/process.html#event-uncaughtexception">Event: uncaughtException</a><br><a href="https://nodejs.org/api/process.html#event-unhandledrejection">Event: unhandledrejection</a></p>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 23(自訂錯誤訊息)</title>
    <url>/2022/05/13/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day23/</url>
    <content><![CDATA[<h1 id="🏅-Day-23"><a href="#🏅-Day-23" class="headerlink" title="🏅 Day 23"></a>🏅 Day 23</h1><h2 id="自訂錯誤訊息"><a href="#自訂錯誤訊息" class="headerlink" title="自訂錯誤訊息"></a>自訂錯誤訊息</h2><p>我們可以另外新增自定義錯誤訊息的模組，在預期使用者可能會出錯的地方驗證錯誤</p>
<a id="more"></a>
<p><strong>範例</strong>（較完整範例可觀看此 <a href="https://github.com/gonsakon/express-week4-sample/blob/week5/service/appError.js">GitHub</a>）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> appError = <span class="function">(<span class="params">httpStatus, errMessage, next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(errMessage);</span><br><span class="line">    error.statusCode = httpStatus;</span><br><span class="line">    error.isOperational = <span class="literal">true</span>;</span><br><span class="line">    next(error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = appError;</span><br></pre></td></tr></table></figure>

<p>自訂一個 appError function，將狀態碼及自訂錯誤訊息及 next 參數傳到 function 中<br>使用 <code>new Error()</code> 建立 Error 物件，並設定 Error 回傳的資訊：<code>statusCode</code> <code>isOperational</code> ，其中 <code>isOperational</code> 代表是否為<strong>可預期</strong>的錯誤，因是自訂的錯誤，通常都會設定為 true（可預期）<br>最後使用 next() 將 Error 交給 app.js 中的錯誤處理 middleware 回傳錯誤訊息</p>
<p><strong>error handler 範例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// error handler</span></span><br><span class="line"><span class="comment">// 錯誤處理的 middleware 相較一般 middleware 會多一個 err 引數</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  err.statusCode = err.statusCode || <span class="number">500</span>;</span><br><span class="line">  err.status = err.status || <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">  res.status(err.statusCode).json(&#123;</span><br><span class="line">    status: err.status,</span><br><span class="line">    message: err.message</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<p><strong>使用情境(第六週 JWT)</strong><br>假設此路由 /posts 是已登入的會員才能造訪的路由，當接收到的 request 是未通過驗證，則可回傳「未登入」的回饋訊息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, handleErrorAsync(<span class="keyword">async</span>(req, res, next) =&gt;  &#123;</span><br><span class="line">  <span class="comment">// 自訂未通過登入驗證的錯誤</span></span><br><span class="line">  <span class="keyword">return</span> next(AppError(<span class="number">401</span>, <span class="string">&#x27;您並未登入&#x27;</span>, next));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> timeSort = req.query.timeSort == <span class="string">&quot;asc&quot;</span> ? <span class="string">&quot;createdAt&quot;</span>:<span class="string">&quot;-createdAt&quot;</span></span><br><span class="line">  <span class="keyword">const</span> q = req.query.q !== <span class="literal">undefined</span> ? &#123;<span class="string">&quot;content&quot;</span>: <span class="keyword">new</span> <span class="built_in">RegExp</span>(req.query.q)&#125; : &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> post = <span class="keyword">await</span> Post.find(q).populate(&#123;</span><br><span class="line">    path: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    select: <span class="string">&#x27;name photo&#x27;</span></span><br><span class="line">  &#125;).sort(timeSort);</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    results: post.length,</span><br><span class="line">    data: &#123;</span><br><span class="line">      post</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>






<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Error">Error - JavaScript | MDN</a></p>
<p><a href="https://expressjs.com/zh-tw/guide/error-handling.html">Express 錯誤處理</a></p>
<h3 id="題目（將答案寫在-GitHub-並提交至回報區）"><a href="#題目（將答案寫在-GitHub-並提交至回報區）" class="headerlink" title="題目（將答案寫在 GitHub 並提交至回報區）"></a>題目（將答案寫在 GitHub 並提交至回報區）</h3><p>將以下 POST 路由中的註解下方的程式碼改為使用 <code>appError()</code> 自訂錯誤資訊，並測試可正確回傳錯誤訊息<br>routes/posts.js 的 POST 範例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span>(req, res, next) =&gt;  &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = req.body;</span><br><span class="line">    <span class="keyword">if</span> (!data.content) &#123;</span><br><span class="line">      <span class="comment">// 將以下改為 appError 自訂錯誤回饋</span></span><br><span class="line">      res.status(<span class="number">400</span>).json(&#123;</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;content 欄位為必填&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newPost = <span class="keyword">await</span> Post.create(</span><br><span class="line">      &#123;</span><br><span class="line">        user: data.user,</span><br><span class="line">        content: data.content,</span><br><span class="line">        tags: data.tags,</span><br><span class="line">        type:data.type</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">      status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">      data: newPost</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    next(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>可將自己的專案加入 appError.js 自訂錯誤<br>若沒有也可使用此<a href="https://github.com/dogwantfly/week5-middleware/tree/appError">專案</a></p>
<h2 id="回報流程"><a href="#回報流程" class="headerlink" title="回報流程"></a>回報流程</h2><p>請同學依照下圖教學觀看解答、回報答案:</p>
<p><img src="https://i.imgur.com/QtL8zEW.png"></p>
<p>回報格式：請在「回報區」貼上 CodePen 或 HackMD 連結回報答案 (為了統計人數，請同學依序加上「報數」)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span>(req, res, next) =&gt;  &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = req.body;</span><br><span class="line">    <span class="keyword">if</span> (!data.content) &#123;</span><br><span class="line">      <span class="comment">// 錯誤訊息可自行調整</span></span><br><span class="line">      <span class="keyword">return</span> next(appError(<span class="number">400</span>, <span class="string">&quot;欄位未填寫正確：貼文內容為必填&quot;</span>, next));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newPost = <span class="keyword">await</span> Post.create(</span><br><span class="line">      &#123;</span><br><span class="line">        user: data.user,</span><br><span class="line">        content: data.content,</span><br><span class="line">        tags: data.tags,</span><br><span class="line">        type: data.type</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">      status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">      data: newPost</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    next(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 24(development 及 production 環境變數指令、客製錯誤訊息)</title>
    <url>/2022/05/13/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day24/</url>
    <content><![CDATA[<h1 id="🏅-Day-24"><a href="#🏅-Day-24" class="headerlink" title="🏅 Day 24"></a>🏅 Day 24</h1><h2 id="development-及-production-環境變數指令、客製錯誤訊息"><a href="#development-及-production-環境變數指令、客製錯誤訊息" class="headerlink" title="development 及 production 環境變數指令、客製錯誤訊息"></a>development 及 production 環境變數指令、客製錯誤訊息</h2><p>由於通常不會將開發時遇到的詳細錯誤資訊（如 error.stack）呈現在客戶端，避免過多資訊暴露而有資安疑慮，因此會區分 development 及 production 模式下的錯誤訊息</p>
<a id="more"></a>
<p>可在錯誤處理 (error handler) middleware 判斷 Node.js 環境變數<br><code>process.env.NODE_ENV</code> 為 <code>dev</code> 或是 <code>production</code>（下方 error handler 範例 31 及 33 行），以提供不同錯誤處理</p>
<p>:::spoiler error handler 範例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自己設定的 err 錯誤 </span></span><br><span class="line"><span class="keyword">const</span> resErrorProd = <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err.isOperational) &#123;</span><br><span class="line">    res.status(err.statusCode).json(&#123;</span><br><span class="line">      status: err.status,</span><br><span class="line">      message: err.message</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// log 紀錄</span></span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;出現重大錯誤&#x27;</span>, err);</span><br><span class="line">    <span class="comment">// 送出罐頭預設訊息</span></span><br><span class="line">    res.status(<span class="number">500</span>).json(&#123;</span><br><span class="line">      status: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      message: <span class="string">&#x27;系統錯誤，請恰系統管理員&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 開發環境錯誤</span></span><br><span class="line"><span class="keyword">const</span> resErrorDev = <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.status(err.statusCode).json(&#123;</span><br><span class="line">    status: err.status,</span><br><span class="line">    message: err.message,</span><br><span class="line">    error: err,</span><br><span class="line">    stack: err.stack</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  err.statusCode = err.statusCode || <span class="number">500</span>;</span><br><span class="line">  err.status = err.status || <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;dev&#x27;</span>) &#123;</span><br><span class="line">    resErrorDev(err, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">err.isAxiosError == <span class="literal">true</span></span>)</span>&#123;</span><br><span class="line">      err.message = <span class="string">&quot;axios 連線錯誤&quot;</span>;</span><br><span class="line">      err.isOperational = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> resErrorProd(err, res)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err.name === <span class="string">&#x27;ValidationError&#x27;</span>)&#123;</span><br><span class="line">      <span class="comment">// mongoose 資料辨識錯誤</span></span><br><span class="line">      err.isOperational = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> resErrorProd(err, res)</span><br><span class="line">    &#125;</span><br><span class="line">    resErrorProd(err, res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>:::<br>範例中分別以 <code>resErrorDev(err, res)</code> <code>resErrorProd(err, res)</code> 回傳不同模式回饋錯誤的 JSON 資料<br>Production 模式會依據是否為預期 client 端可能會出現的錯誤，決定是否回傳提示 client 端錯誤處，若為 server 端需處理的錯誤，則回傳「系統錯誤，請恰系統管理員」的文字，不需回傳相關錯誤資訊</p>
<p>–</p>
<p>設定好不同模式的錯誤回饋後，在 package.json 設定設定執行指令，測試不同模式是否有正確回饋錯誤訊息</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start:dev&quot;: &quot;NODE_ENV=dev nodemon ./bin/www&quot;,</span><br><span class="line">    &quot;start:production&quot;: &quot;NODE_ENV=production nodemon ./bin/www&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>若是 windows 系統可能會遇到不支援執行以上指令的情況，可安裝 <a href="https://www.npmjs.com/package/cross-env">cross-env 套件</a><br>並調整為以下指令</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start:dev&quot;: &quot;cross-env NODE_ENV=dev nodemon ./bin/www&quot;,</span><br><span class="line">    &quot;start:production&quot;: &quot;cross-env NODE_ENV=production nodemon ./bin/www&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<!-- ### 參考資源 -->

<p><a href="https://github.com/gonsakon/express-week4-sample/blob/week5/app.js#L47-L86">GitHub 範例</a></p>
<h3 id="題目（將答案寫在-GitHub-並提交至回報區）"><a href="#題目（將答案寫在-GitHub-並提交至回報區）" class="headerlink" title="題目（將答案寫在 GitHub 並提交至回報區）"></a>題目（將答案寫在 GitHub 並提交至回報區）</h3><p>參考上方 error handler 範例，設計 POST 新增貼文時的 development 及 production 模式的錯誤處理，並以 POSTMAN 測試可正確運作</p>
<p>情境：</p>
<ul>
<li>request body 的 JSON 資料格式錯誤（缺少 <code>&#125;</code>）<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// production 模式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;資料格式錯誤&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// devlopment 模式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Unexpected end of JSON input&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;expose&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;statusCode&quot;</span>: <span class="number">400</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">400</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: <span class="string">&quot;&#123;\n \&quot;name\&quot;: \&quot;test1\&quot;,\n \&quot;content\&quot;: \&quot;test1\&quot;,\n \&quot;tags\&quot;: [\&quot;感情\&quot;],\n \&quot;type\&quot;: \&quot;person\&quot;\n&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;entity.parse.failed&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;stack&quot;</span>: <span class="string">&quot;SyntaxError: Unexpected end of JSON input\n    at JSON.parse (&lt;anonymous&gt;)\n    ...略&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
也可以其他錯誤情境練習，有正確回饋 development 及 production 模式的錯誤就 ok</li>
</ul>
<h2 id="回報流程"><a href="#回報流程" class="headerlink" title="回報流程"></a>回報流程</h2><p>請同學依照下圖教學觀看解答、回報答案:</p>
<p><img src="https://i.imgur.com/QtL8zEW.png"></p>
<p>回報格式：請在「回報區」貼上 CodePen 或 HackMD 連結回報答案 (為了統計人數，請同學依序加上「報數」)</p>
<p>解答<br>error handler 範例參考（也可自行依需求設計）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> errorHandler = <span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  err.statusCode = err.statusCode || <span class="number">500</span>;</span><br><span class="line">  err.status = err.status || <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;dev&#x27;</span>) &#123;</span><br><span class="line">    resErrorDev(err, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;prod&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.isAxiosError == <span class="literal">true</span>)&#123;</span><br><span class="line">      err.message = <span class="string">&quot;axios 連線錯誤&quot;</span>;</span><br><span class="line">      err.isOperational = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> resErrorProd(err, res)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err.name === <span class="string">&#x27;ValidationError&#x27;</span>)&#123;</span><br><span class="line">      <span class="comment">// mongoose 資料辨識錯誤</span></span><br><span class="line">      err.isOperational = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> resErrorProd(err, res)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err.name === <span class="string">&#x27;SyntaxError&#x27;</span>) &#123;</span><br><span class="line">      err.statusCode = <span class="number">400</span></span><br><span class="line">      err.isOperational = <span class="literal">true</span>;</span><br><span class="line">      err.message = <span class="string">&#x27;資料格式錯誤&#x27;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    resErrorProd(err, res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 25(非同步錯誤管理)</title>
    <url>/2022/05/25/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day25/</url>
    <content><![CDATA[<h1 id="🏅-Day-25"><a href="#🏅-Day-25" class="headerlink" title="🏅 Day 25"></a>🏅 Day 25</h1><h2 id="非同步錯誤管理"><a href="#非同步錯誤管理" class="headerlink" title="非同步錯誤管理"></a>非同步錯誤管理</h2><p>在二到四週主線任務中，我們會使用 try catch 處理 async function 中的錯誤，當 try {…} 中執行的程式發生錯誤就會跑到 catch<br>目前每個非同步函式中都各有 try catch，可以嘗試將執行非同步函式的錯誤一併接到 function 中處理，以減少每次加上 try catch 的動作 </p>
<a id="more"></a>
<p>範例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// handleErrorAsync.js</span></span><br><span class="line"><span class="keyword">const</span> handleErrorAsync = <span class="function"><span class="keyword">function</span> <span class="title">handleErrorAsync</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">        func(req, res, next).catch(</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> next(error);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleErrorAsync;</span><br></pre></td></tr></table></figure>
<p>將 handleErrorAsync 加入 router 中執行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, handleErrorAsync(getPosts))</span><br><span class="line"></span><br><span class="line"><span class="comment">// getPosts 為 async function</span></span><br><span class="line"><span class="keyword">async</span>(req, res, next) =&gt;  &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> post = <span class="keyword">await</span> Post.find();</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    results: post.length,</span><br><span class="line">    data: &#123;</span><br><span class="line">      post</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>運作流程為：</p>
<ul>
<li>將非同步函式傳入 <code>handleErrorAsync()</code> 並在其中回傳 <code>function(req, res, next) &#123;...&#125;</code> 接收 router 的資料<code>req, res, next</code></li>
<li>再執行傳入的 function，並接上 <code>catch()</code>，當傳入的非同步 function 在執行上出錯時，就會統一跑到 <code>handleErrorAsync()</code> 的 catch</li>
<li>在 <code>catch()</code> 中會再執行一個 function 並把 error 資料透過 <code>next()</code> 交給 app.js 中的<a href="https://github.com/gonsakon/express-week4-sample/blob/week5/app.js#L47-L86">錯誤處理 middleware</a></li>
</ul>
<p>可觀看完整範例 <a href="https://github.com/gonsakon/express-week4-sample/tree/week5">GitHub</a> 測試</p>
<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://expressjs.com/zh-tw/guide/error-handling.html">Express 錯誤處理</a></p>
<h3 id="題目（將答案寫在-GitHub-並提交至回報區）"><a href="#題目（將答案寫在-GitHub-並提交至回報區）" class="headerlink" title="題目（將答案寫在 GitHub 並提交至回報區）"></a>題目（將答案寫在 GitHub 並提交至回報區）</h3><p>嘗試參考上方介紹的方式，在 router 如：POST /posts，加入 <code>handleErrorAsync()</code> ，測試當執行 POST 有錯誤時，錯誤可正確透過此 middleware 接到 catch 並由 app.js 中的錯誤處理 middleware 回傳錯誤訊息</p>
<p>解答<br>routes/posts.js 範例參考</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, handleErrorAsync( <span class="keyword">async</span>(req, res, next) =&gt;  &#123;</span><br><span class="line">  <span class="keyword">const</span> data = req.body;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">data.content</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> newPost = <span class="keyword">await</span> Post.create(</span><br><span class="line">          &#123;</span><br><span class="line">              user: data.user,</span><br><span class="line">              content: data.content,</span><br><span class="line">              tags: data.tags,</span><br><span class="line">              type:data.type</span><br><span class="line">          &#125;</span><br><span class="line">      );</span><br><span class="line">      res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">          status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">          data: newPost</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      res.status(<span class="number">400</span>).json(&#123;</span><br><span class="line">          status: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">          <span class="string">&quot;message&quot;</span>: <span class="string">&quot;欄位未填寫正確，或無此 todo ID&quot;</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 26(bcrypt.js 密碼加解密)</title>
    <url>/2022/05/25/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day26/</url>
    <content><![CDATA[<h1 id="🏅-Day-26"><a href="#🏅-Day-26" class="headerlink" title="🏅 Day 26"></a>🏅 Day 26</h1><h2 id="bcrypt-js-密碼加解密"><a href="#bcrypt-js-密碼加解密" class="headerlink" title="bcrypt.js 密碼加解密"></a>bcrypt.js 密碼加解密</h2><a id="more"></a>
<p><strong>密碼加密</strong><br>使用 bcrypt.js 的 <code>hash()</code> 以非同步的方式將密碼加密</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bcrypt.hash(password,<span class="number">12</span>);</span><br><span class="line"><span class="comment">// 第一個參數是要做雜湊加密的字串，第二個參數是要加鹽的字串長度</span></span><br></pre></td></tr></table></figure>
<p>補充：<br><a href="https://zh.wikipedia.org/zh-tw/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8">雜湊(Hash function)</a>為一種演算法，會將資料打亂建立雜湊值，雜湊值具有「不可逆」的性質（由此值回推原本的值非常困難），因此常用於密碼加密<br><a href="https://zh.wikipedia.org/zh-tw/%E7%9B%90_(%E5%AF%86%E7%A0%81%E5%AD%A6)">鹽（Salt）</a>在密碼學中，是指在雜湊之前將雜湊內容（例如：密碼）的任意固定位置插入特定的字串。這個在雜湊中加入字串的方式稱為「加鹽」</p>
<p><strong>密碼解密</strong><br>密碼加密後，未來需要驗證是否為該註冊帳號就需以 <code>compare()</code> 將密碼與加密後的字串進行比對</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bcrypt.compare(password, user.password);</span><br><span class="line"><span class="comment">// 第一個參數是接收到的密碼，第二個參數是由資料庫找出的該 user 的密碼，為雜湊加密的字串</span></span><br></pre></td></tr></table></figure>


<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/dcodeIO/bcrypt.js#hashs-salt-callback-progresscallback">bcrypt.js - hash</a><br><a href="https://github.com/dcodeIO/bcrypt.js#compares-hash-callback-progresscallback">bcryptjs - compare</a></p>
<h3 id="題目（將答案寫在-GitHub-並提交至回報區）"><a href="#題目（將答案寫在-GitHub-並提交至回報區）" class="headerlink" title="題目（將答案寫在 GitHub 並提交至回報區）"></a>題目（將答案寫在 GitHub 並提交至回報區）</h3><p>測試註冊功能 POST <code>/users/sign_up</code>，使用<a href="https://github.com/gonsakon/express-week4-sample/tree/week5">第五週專案</a> 練習（接下來會以此專案陸續練習第六週的內容）</p>
<ul>
<li>於 models/user.js 加入使用者資料 schema，以儲存使用者 email 暱稱 密碼（可參考第六週<a href="https://github.com/gonsakon/express-week4-sample/blob/week6/models/usersModel.js">範例</a>）</li>
<li>安裝 <a href="https://www.npmjs.com/package/bcryptjs">bcryptjs</a> 套件，使用 bcrypt.js 的 <code>hash()</code> 將 client 端傳送的密碼經過雜湊再儲存至資料庫<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/sign_up&#x27;</span>, handleErrorAsync(<span class="keyword">async</span>(req, res, next) =&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; email, password, confirmPassword, name &#125; = req.body;</span><br><span class="line">  <span class="comment">// 加密密碼</span></span><br><span class="line">  password = </span><br><span class="line">  <span class="keyword">const</span> newUser = <span class="keyword">await</span> User.create(&#123;</span><br><span class="line">    email,</span><br><span class="line">    password,</span><br><span class="line">    name</span><br><span class="line">  &#125;);</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    data: newUser</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
測試註冊 API <code>/users/sign_up</code> 並取得加密後的密碼<br>範例<br>![](<a href="https://i.imgur.com/iVkplJW.png">https://i.imgur.com/iVkplJW.png</a> =500x)</li>
</ul>
<p>解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">範例參考 https:<span class="comment">//github.com/gonsakon/express-week4-sample/blob/week6/routes/users.js</span></span><br><span class="line"><span class="comment">// routes/users.js</span></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/sign_up&#x27;</span>, handleErrorAsync(<span class="keyword">async</span>(req, res, next) =&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; email, password, confirmPassword, name &#125; = req.body;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 加密密碼</span></span><br><span class="line">  password = <span class="keyword">await</span> bcrypt.hash(password,<span class="number">12</span>);</span><br><span class="line">  <span class="keyword">const</span> newUser = <span class="keyword">await</span> User.create(&#123;</span><br><span class="line">    email,</span><br><span class="line">    password,</span><br><span class="line">    name</span><br><span class="line">  &#125;);</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    data: newUser</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 28(JWT 產生身份驗證 token)</title>
    <url>/2022/05/25/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day28/</url>
    <content><![CDATA[<h1 id="🏅-Day-28"><a href="#🏅-Day-28" class="headerlink" title="🏅 Day 28"></a>🏅 Day 28</h1><h2 id="JWT-產生身份驗證-token"><a href="#JWT-產生身份驗證-token" class="headerlink" title="JWT 產生身份驗證 token"></a>JWT 產生身份驗證 token</h2><p><a href="https://whimsical.com/jwt-UKUY1rj1vfoN6uyic7e4Sm">JWT 流程圖</a><br><img src="https://i.imgur.com/C2fj19V.png"><br>當使用者登入或註冊，後端經過驗證後確認資料格式正確，就會產生一組的 token 回傳至使用者（client 端），此 token 用於身份驗證，接下來 client 端造訪需權限的頁面、發送需要權限的請求，若未帶上此 token 或是 token 驗證錯誤，都會請求失敗</p>
<a id="more"></a>
<p>接下來會使用 jsonwebtoken（JWT） 套件中的 <code>sign()</code> 實作產生 token 的流程（流程圖步驟 2）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line">jwt.sign(payload, secretOrPrivateKey, \[options, callback\])</span><br></pre></td></tr></table></figure>
<ul>
<li>payload 會是一個物件，為該使用者的相關資訊（如 id）</li>
<li>secretOrPrivateKey 私鑰可以是字串、buffer 或物件，這裡會加入一段字串（如：<code>secret</code>）並設定為環境變數 <code>process.env.JWT_SECRET</code></li>
<li>options 或 callback 函式，options 為一個物件，可根據文件中有提供的選項客製化，例如：設定此 token 的到期日<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> token = jwt.sign(&#123;<span class="attr">id</span>:id&#125;,process.env.JWT_SECRET,&#123;</span><br><span class="line">      expiresIn: process.env.JWT_EXPIRES_DAY</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
產生出的 token 會以 . 分隔，其中第一二段的 header 及 payload 都是可以透過 base64 編碼得知內容的<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.  # header</span><br><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.  # payload</span><br><span class="line">TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ  # signature</span><br></pre></td></tr></table></figure>
<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3></li>
</ul>
<p><a href="https://github.com/auth0/node-jsonwebtoken#jwtsignpayload-secretorprivatekey-options-callback">jwt.sign()</a><br><a href="https://5xruby.tw/posts/what-is-jwt">什麼是 JWT</a></p>
<h3 id="題目（將答案寫在-並提交至回報區）"><a href="#題目（將答案寫在-並提交至回報區）" class="headerlink" title="題目（將答案寫在  並提交至回報區）"></a>題目（將答案寫在  並提交至回報區）</h3><p>延續前一天的每日任務，優化註冊功能，當使用者的資料都通過自訂的驗證條件，並成功新增使用者資料後，使用 <code>jwt.sign()</code> 產生 JWT，並回傳給 client（回傳內容須包含 token、使用者名稱 name）</p>
<p>解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">範例參考 https:<span class="comment">//github.com/gonsakon/express-week4-sample/blob/week6/routes/users.js</span></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/sign_up&#x27;</span>, handleErrorAsync(<span class="keyword">async</span>(req, res, next) =&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; email, password, confirmPassword, name &#125; = req.body;</span><br><span class="line">  <span class="comment">// 內容不可為空</span></span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">!email||!password||!confirmPassword||!name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError(<span class="string">&quot;400&quot;</span>,<span class="string">&quot;欄位未填寫正確！&quot;</span>,next));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 密碼正確</span></span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">password!==confirmPassword</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError(<span class="string">&quot;400&quot;</span>,<span class="string">&quot;密碼不一致！&quot;</span>,next));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 密碼 8 碼以上</span></span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">!validator.isLength(password,&#123;min:<span class="number">8</span>&#125;)</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError(<span class="string">&quot;400&quot;</span>,<span class="string">&quot;密碼字數低於 8 碼&quot;</span>,next));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 是否為 Email</span></span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">!validator.isEmail(email)</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError(<span class="string">&quot;400&quot;</span>,<span class="string">&quot;Email 格式不正確&quot;</span>,next));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 加密密碼</span></span><br><span class="line">  password = <span class="keyword">await</span> bcrypt.hash(password,<span class="number">12</span>);</span><br><span class="line">  <span class="keyword">const</span> newUser = <span class="keyword">await</span> User.create(&#123;</span><br><span class="line">    email,</span><br><span class="line">    password,</span><br><span class="line">    name</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 產生 JWT</span></span><br><span class="line">  <span class="keyword">const</span> token = jwt.sign(&#123;<span class="attr">id</span>:newUser._id&#125;,process.env.JWT_SECRET,&#123;</span><br><span class="line">    expiresIn: process.env.JWT_EXPIRES_DAY</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 將 token 回傳至 client</span></span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    user:&#123;</span><br><span class="line">      token,</span><br><span class="line">      name: newUser.name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 27(validator 驗證)</title>
    <url>/2022/05/25/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day27/</url>
    <content><![CDATA[<h1 id="🏅-Day-27"><a href="#🏅-Day-27" class="headerlink" title="🏅 Day 27"></a>🏅 Day 27</h1><h2 id="validator-驗證"><a href="#validator-驗證" class="headerlink" title="validator 驗證"></a>validator 驗證</h2><p>使用 <a href="https://www.npmjs.com/package/validator">validator</a> 驗證使用者註冊資料</p>
<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/validatorjs/validator.js#validators">validator 方法</a></p>
<a id="more"></a>
<h3 id="題目（將答案寫在-GitHub-並提交至回報區）"><a href="#題目（將答案寫在-GitHub-並提交至回報區）" class="headerlink" title="題目（將答案寫在 GitHub 並提交至回報區）"></a>題目（將答案寫在 GitHub 並提交至回報區）</h3><p>延續前一天的每日任務，參考設計稿的<a href="https://xd.adobe.com/view/c0763dbe-fc15-42e8-be0b-8956ed03e675-9525/screen/1e66e82f-3514-46bf-8b3f-2d1e8260acd4/specs/">註冊（錯誤訊息）頁面</a>，安裝並使用 validator 提供的方法，加入自訂的驗證（暱稱、密碼長度、email 格式 … 等等）<br>在接收到 req.body 的註冊資料後驗證資料是否符合格式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/sign_up&#x27;</span>, handleErrorAsync(<span class="keyword">async</span>(req, res, next) =&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; email, password, confirmPassword, name &#125; = req.body;</span><br><span class="line">  <span class="comment">// 加入驗證，確保使用者註冊資料符合格式</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 加密密碼</span></span><br><span class="line">  password = </span><br><span class="line">  <span class="keyword">const</span> newUser = <span class="keyword">await</span> User.create(&#123;</span><br><span class="line">    email,</span><br><span class="line">    password,</span><br><span class="line">    name</span><br><span class="line">  &#125;);</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    data: newUser</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<p>測試送出錯誤資料需正確回饋自訂的錯誤訊息<br>範例<br><img src="https://i.imgur.com/KBgdaJM.png=600x"></p>
<p>解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes/users.js</span></span><br><span class="line"><span class="comment">// 驗證條件可依據設計稿新增暱稱字元長度驗證</span></span><br><span class="line">router.post(<span class="string">&#x27;/sign_up&#x27;</span>, handleErrorAsync(<span class="keyword">async</span>(req, res, next) =&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; email, password, confirmPassword, name &#125; = req.body;</span><br><span class="line">  <span class="comment">// 內容不可為空</span></span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">!email||!password||!confirmPassword||!name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError(<span class="string">&quot;400&quot;</span>,<span class="string">&quot;欄位未填寫正確！&quot;</span>,next));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 密碼正確</span></span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">password!==confirmPassword</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError(<span class="string">&quot;400&quot;</span>,<span class="string">&quot;密碼不一致！&quot;</span>,next));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 密碼 8 碼以上</span></span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">!validator.isLength(password,&#123;min:<span class="number">8</span>&#125;)</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError(<span class="string">&quot;400&quot;</span>,<span class="string">&quot;密碼字數低於 8 碼&quot;</span>,next));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 是否為 Email</span></span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">!validator.isEmail(email)</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError(<span class="string">&quot;400&quot;</span>,<span class="string">&quot;Email 格式不正確&quot;</span>,next));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 加密密碼</span></span><br><span class="line">  password = <span class="keyword">await</span> bcrypt.hash(password,<span class="number">12</span>);</span><br><span class="line">  <span class="keyword">const</span> newUser = <span class="keyword">await</span> User.create(&#123;</span><br><span class="line">    email,</span><br><span class="line">    password,</span><br><span class="line">    name</span><br><span class="line">  &#125;);</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    data: newUser</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 29(登入功能)</title>
    <url>/2022/05/25/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day29/</url>
    <content><![CDATA[<h1 id="🏅-Day-29"><a href="#🏅-Day-29" class="headerlink" title="🏅 Day 29"></a>🏅 Day 29</h1><h2 id="登入功能"><a href="#登入功能" class="headerlink" title="登入功能"></a>登入功能</h2><p><strong>密碼解密</strong><br>若使用者成功註冊，密碼被加密後，未來需要驗證是否為該註冊帳號可使用 <code>compare()</code> 將密碼與加密後的字串進行比對</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尋找資料庫符合接收到的使用者資料，因 password 欄位在 schema 通常設定為不顯示，因此可使用 select() 將密碼顯示出來</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> User.findOne(&#123; email &#125;).select(<span class="string">&#x27;+password&#x27;</span>);</span><br><span class="line">bcrypt.compare(password, user.password);</span><br><span class="line"><span class="comment">// 第一個參數是接收到的密碼，第二個參數是由資料庫找出的該 user 的密碼，為雜湊加密的字串</span></span><br></pre></td></tr></table></figure>




<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/dcodeIO/bcrypt.js#compares-hash-callback-progresscallback">bcryptjs - compare</a><br><a href="https://mongoosejs.com/docs/api/query.html#:~:text=When%20using%20string%20syntax%2C%20prefixing%20a%20path%20with%20%2D%20will%20flag%20that%20path%20as%20excluded.%20When%20a%20path%20does%20not%20have%20the%20%2D%20prefix%2C%20it%20is%20included.%20Lastly%2C%20if%20a%20path%20is%20prefixed%20with%20%2B%2C%20it%20forces%20inclusion%20of%20the%20path%2C%20which%20is%20useful%20for%20paths%20excluded%20at%20the%20schema%20level.">mongoose select()</a></p>
<h3 id="題目（將答案寫在-GitHub-並提交至回報區）"><a href="#題目（將答案寫在-GitHub-並提交至回報區）" class="headerlink" title="題目（將答案寫在 GitHub 並提交至回報區）"></a>題目（將答案寫在 GitHub 並提交至回報區）</h3><ul>
<li>實做登入功能 POST <code>/users/sign_in</code>，使用 bcryptjs <code>compare()</code> 比對密碼是否與資料庫中的密碼符合，並根據結果回饋訊息，若符合則需產生 JWT 給 client</li>
<li>若找不到符合的使用者資料或密碼比對不正確，都需回饋錯誤訊息</li>
<li>將產生 JWT 功能拆出獨立模組</li>
</ul>
<p>::: spoiler 回饋訊息範例</p>
<p><img src="https://i.imgur.com/GAWJkNu.png"></p>
<p><img src="https://i.imgur.com/EHmLduK.png"></p>
<p><img src="https://i.imgur.com/VXAYd2G.png"><br>:::</p>
<p>解答<br>範例參考 <a href="https://github.com/gonsakon/express-week4-sample/blob/week6/routes/users.js">https://github.com/gonsakon/express-week4-sample/blob/week6/routes/users.js</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> generateSendJWT= <span class="function">(<span class="params">user,statusCode,res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 產生 JWT token</span></span><br><span class="line">  <span class="keyword">const</span> token = jwt.sign(&#123;<span class="attr">id</span>:user._id&#125;,process.env.JWT_SECRET,&#123;</span><br><span class="line">    expiresIn: process.env.JWT_EXPIRES_DAY</span><br><span class="line">  &#125;);</span><br><span class="line">  user.password = <span class="literal">undefined</span>;</span><br><span class="line">  res.status(statusCode).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    user:&#123;</span><br><span class="line">      token,</span><br><span class="line">      name: user.name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/sign_in&#x27;</span>, handleErrorAsync(<span class="keyword">async</span>(req,res,next)=&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; email, password &#125; = req.body;</span><br><span class="line">  <span class="keyword">if</span> (!email || !password) &#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError( <span class="number">400</span>,<span class="string">&#x27;帳號密碼不可為空&#x27;</span>,next));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> User.findOne(&#123; email &#125;).select(<span class="string">&#x27;+password&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(user);</span><br><span class="line">  <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError(<span class="number">400</span>, <span class="string">&quot;帳號或密碼錯誤，請重新輸入！&quot;</span>, next));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> auth = <span class="keyword">await</span> bcrypt.compare(password, user.password);</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">!auth</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError(<span class="number">400</span>,<span class="string">&#x27;您的密碼不正確&#x27;</span>,next));</span><br><span class="line">  &#125;</span><br><span class="line">  generateSendJWT(user,<span class="number">200</span>,res);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 30(JWT 驗證)</title>
    <url>/2022/05/30/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day30/</url>
    <content><![CDATA[<h1 id="🏅-Day-30"><a href="#🏅-Day-30" class="headerlink" title="🏅 Day 30"></a>🏅 Day 30</h1><h2 id="JWT-驗證"><a href="#JWT-驗證" class="headerlink" title="JWT 驗證"></a>JWT 驗證</h2><p><a href="https://whimsical.com/jwt-UKUY1rj1vfoN6uyic7e4Sm">JWT 流程圖</a><br><img src="https://i.imgur.com/C2fj19V.png"></p>
<a id="more"></a>
<p>在前幾天的每日任務中，實做了註冊、登入功能，若成功註冊及登入的使用者會取得 JWT，也就是流程圖中的 1 - 3 步驟</p>
<p>接下來會實作 4 - 6 步驟，當需要登入才能造訪頁面或操作功能， client 端發出請求時就會需要在 header 的<code>Authorization</code> 帶上 JWT（<code>Bearer xxxxxx</code>)，並經由後端驗證</p>
<p>而後端驗證的部分會使用 jsonwebtoken 套件的 <code>vertify()</code> 方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line">jwt.verify(token, secretOrPublicKey, [options, callback])</span><br></pre></td></tr></table></figure>
<ul>
<li>token 為使用者夾帶需驗證的字串</li>
<li>secretOrPublicKey 需帶入先前的環境變數 <code>process.env.JWT_SECRET</code></li>
</ul>
<p>因驗證 token 需要時間，jwt 這裡沒有提供 Promise，因此會需要另外使用 Promise 處理驗證結果<br>範例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> decoded = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  jwt.verify(token,process.env.JWT_SECRET,<span class="function">(<span class="params">err,payload</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      resolve(payload)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback">jwt.verify()</a></p>
<h3 id="題目（將答案寫在-GitHub-並提交至回報區）"><a href="#題目（將答案寫在-GitHub-並提交至回報區）" class="headerlink" title="題目（將答案寫在 GitHub 並提交至回報區）"></a>題目（將答案寫在 GitHub 並提交至回報區）</h3><p><strong>將驗證 JWT 過程設計為一個 isAuth middleware，驗證前端傳送過來的 JWT，並回傳驗證成功訊息</strong></p>
<p>情境：當使用者發出 GET <code>/users/test</code> 請求時，需先以 <code>isAuth()</code> 驗證前端夾帶的 JWT 是否正確，若正確則回傳成功訊息<br>:::spoiler 回傳訊息參考<br><img src="https://i.imgur.com/LKIZF8y.png"></p>
<p>:::</p>
<p>–</p>
<ul>
<li>需使用先前完成的註冊功能，註冊一個測試的使用者資料，並成功取得回傳的 JWT</li>
<li>將此 JWT 帶入 isAuth middleware 驗證</li>
</ul>
<p><strong>middleware 範例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isAuth = handleErrorAsync(<span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> token = <span class="comment">// 請帶入註冊成功回傳的 JWT</span></span><br><span class="line">  <span class="comment">// 驗證 token 正確性</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    請在此參考上方做法驗證 JWT</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="keyword">const</span> currentUser = <span class="keyword">await</span> User.findById(<span class="comment">/* 帶入驗證 token 解碼後取得的使用者 id */</span>);</span><br><span class="line">  <span class="comment">// 在 req 物件加入 user 欄位，並由 next() 帶到 handleErrorAsync(async(req,res,next)=&gt;&#123;...&#125;)</span></span><br><span class="line">  req.user = currentUser;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>將 middleware 加入測試的 router 中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes/users.js</span></span><br><span class="line">router.get(<span class="string">&#x27;/test&#x27;</span>, isAuth, handleErrorAsync(<span class="keyword">async</span>(req,res,next)=&gt;&#123;</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    user: req.user</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>


<h2 id="回報流程"><a href="#回報流程" class="headerlink" title="回報流程"></a>回報流程</h2><p>請同學依照下圖教學觀看解答、回報答案:</p>
<p><img src="https://i.imgur.com/QtL8zEW.png"></p>
<p>回報格式：請在「回報區」貼上 CodePen 或 HackMD 連結回報答案 (為了統計人數，請同學依序加上「報數」)</p>
<p>解答<br>範例參考 <a href="https://github.com/gonsakon/express-week4-sample/blob/week6/service/auth.js">https://github.com/gonsakon/express-week4-sample/blob/week6/service/auth.js</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// isAuth middleware</span></span><br><span class="line"><span class="keyword">const</span> isAuth = handleErrorAsync(<span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> token = <span class="string">&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyN2IxNTlhMDlhZmMwZTU4NzZiNTE5MSIsImlhdCI6MTY1MjIzMzkwMCwiZXhwIjoxNjYwMDA5OTAwfQ.07q6Ib5tSZ1CYJLg-SaGIdGUnuyDaHY6wX9NnuM23io&#x27;</span> <span class="comment">// 測試用 JWT</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 驗證 token 正確性</span></span><br><span class="line">  <span class="keyword">const</span> decoded = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    jwt.verify(token,process.env.JWT_SECRET,<span class="function">(<span class="params">err,payload</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        resolve(payload)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> currentUser = <span class="keyword">await</span> User.findById(decoded.id);</span><br><span class="line"></span><br><span class="line">  req.user = currentUser;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// routes/users </span></span><br><span class="line">router.get(<span class="string">&#x27;/test&#x27;</span>, isAuth, handleErrorAsync(<span class="keyword">async</span>(req,res,next)=&gt;&#123;</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    user: req.user</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 31(JWT 驗證 middleware)</title>
    <url>/2022/05/30/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day31/</url>
    <content><![CDATA[<h1 id="🏅-Day-31"><a href="#🏅-Day-31" class="headerlink" title="🏅 Day 31"></a>🏅 Day 31</h1><h2 id="JWT-驗證-middleware"><a href="#JWT-驗證-middleware" class="headerlink" title="JWT 驗證 middleware"></a>JWT 驗證 middleware</h2><h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><ol>
<li>延續前一天的每日任務，isAuth middleware 第 3 行的固定 token 改寫為：<br>接收 <code>req.headers.authorization</code>，驗證 <code>req.headers.authorization</code> 是否存在，以及是否為 <code>Bearer</code> 開頭<br>若符合此條件則取出 JWT 字串，若未成功取得 JWT，表示使用者可能尚未登入，需回傳 401 錯誤<a id="more"></a>


</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// isAuth middleware</span></span><br><span class="line"><span class="keyword">const</span> isAuth = handleErrorAsync(<span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> token = <span class="string">&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyN2IxNTlhMDlhZmMwZTU4NzZiNTE5MSIsImlhdCI6MTY1MjIzMzkwMCwiZXhwIjoxNjYwMDA5OTAwfQ.07q6Ib5tSZ1CYJLg-SaGIdGUnuyDaHY6wX9NnuM23io&#x27;</span> <span class="comment">// 測試用 JWT</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 驗證 token 正確性</span></span><br><span class="line">  <span class="keyword">const</span> decoded = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    jwt.verify(token,process.env.JWT_SECRET,<span class="function">(<span class="params">err,payload</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        resolve(payload)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> currentUser = <span class="keyword">await</span> User.findById(decoded.id);</span><br><span class="line"></span><br><span class="line">  req.user = currentUser;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>設計<a href="https://xd.adobe.com/view/c0763dbe-fc15-42e8-be0b-8956ed03e675-9525/screen/112f9990-41f0-4c0d-8704-67279a52a49c/">取得個人資料</a>路由 GET <code>/users/profile</code>，加入 isAuth middleware，當 request 帶上的 token 驗證通過，就將取出的 user 資料回傳給 client</li>
</ol>
<h2 id="回報流程"><a href="#回報流程" class="headerlink" title="回報流程"></a>回報流程</h2><p>請同學依照下圖教學觀看解答、回報答案:</p>
<p><img src="https://i.imgur.com/QtL8zEW.png"></p>
<p>回報格式：請在「回報區」貼上 CodePen 或 HackMD 連結回報答案 (為了統計人數，請同學依序加上「報數」)</p>
<p>解答<br>範例參考 <a href="https://github.com/gonsakon/express-week4-sample/blob/week6/service/auth.js">https://github.com/gonsakon/express-week4-sample/blob/week6/service/auth.js</a><br><a href="https://github.com/gonsakon/express-week4-sample/blob/week6/routes/users.js#L53-L59">https://github.com/gonsakon/express-week4-sample/blob/week6/routes/users.js#L53-L59</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// isAuth middleware</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isAuth = handleErrorAsync(<span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 確認 token 是否存在</span></span><br><span class="line">    <span class="keyword">let</span> token;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      req.headers.authorization &amp;&amp;</span><br><span class="line">      req.headers.authorization.startsWith(<span class="string">&#x27;Bearer&#x27;</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      token = req.headers.authorization.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(appError(<span class="number">401</span>,<span class="string">&#x27;你尚未登入！&#x27;</span>,next));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 驗證 token 正確性</span></span><br><span class="line">    <span class="keyword">const</span> decoded = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      jwt.verify(token,process.env.JWT_SECRET,<span class="function">(<span class="params">err,payload</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          resolve(payload)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> currentUser = <span class="keyword">await</span> User.findById(decoded.id);</span><br><span class="line">  </span><br><span class="line">    req.user = currentUser;</span><br><span class="line">    next();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// routes/users.js</span></span><br><span class="line">router.get(<span class="string">&#x27;/profile&#x27;</span>,isAuth, handleErrorAsync(<span class="keyword">async</span>(req, res, next) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    user: req.user</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 32(實作重設密碼)</title>
    <url>/2022/05/30/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day32/</url>
    <content><![CDATA[<h1 id="🏅-Day-32"><a href="#🏅-Day-32" class="headerlink" title="🏅 Day 32"></a>🏅 Day 32</h1><h2 id="實作重設密碼"><a href="#實作重設密碼" class="headerlink" title="實作重設密碼"></a>實作重設密碼</h2><h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>實作重設密碼 API POST <code>/users/updatePassword</code><br>流程大致上為：<br>接收 request body 的資料<br>→ 驗證：密碼與確認密碼欄位值需為一致，可自行加上必填欄位、密碼需至少 8 碼以上，並包含英文與數字 … 等等<br>→ 使用 <a href="https://www.npmjs.com/package/bcryptjs">bcryptjs</a> 將密碼進行 hash<br>→ 更新至資料庫<br>→ <a href="https://github.com/auth0/node-jsonwebtoken">jsonwebtoken</a> 產生 JWT 並回傳 user 資料及 token</p>
<a id="more"></a>
<h2 id="回報流程"><a href="#回報流程" class="headerlink" title="回報流程"></a>回報流程</h2><p>請同學依照下圖教學觀看解答、回報答案:</p>
<p><img src="https://i.imgur.com/QtL8zEW.png"></p>
<p>回報格式：請在「回報區」貼上 CodePen 或 HackMD 連結回報答案 (為了統計人數，請同學依序加上「報數」)</p>
<p>解答<br>參考範例 <a href="https://github.com/gonsakon/express-week4-sample/blob/week6/routes/users.js#L61-L73">https://github.com/gonsakon/express-week4-sample/blob/week6/routes/users.js#L61-L73</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/updatePassword&#x27;</span>,isAuth,handleErrorAsync(<span class="keyword">async</span>(req,res,next)=&gt;&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> &#123;password,confirmPassword &#125; = req.body;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">password!== confirmPassword</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError(<span class="string">&quot;400&quot;</span>,<span class="string">&quot;密碼不一致！&quot;</span>,next));</span><br><span class="line">  &#125;</span><br><span class="line">  newPassword = <span class="keyword">await</span> bcrypt.hash(password,<span class="number">12</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> User.findByIdAndUpdate(req.user.id,&#123;</span><br><span class="line">    password:newPassword</span><br><span class="line">  &#125;);</span><br><span class="line">  generateSendJWT(user,<span class="number">200</span>,res)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 34(Imgur 串接)</title>
    <url>/2022/05/30/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day34/</url>
    <content><![CDATA[<h1 id="🏅-Day-34"><a href="#🏅-Day-34" class="headerlink" title="🏅 Day 34"></a>🏅 Day 34</h1><h2 id="Imgur-串接"><a href="#Imgur-串接" class="headerlink" title="Imgur 串接"></a>Imgur 串接</h2><p>延續前一天每日任務，使用 multer 將接收到的 form data 處理，在此過程若有出現錯誤，可以透過以下處理 multer 相關錯誤，若無錯誤則可進行 Imgur 串接</p>
<a id="more"></a>
<p>請先參考此 <a href="https://israynotarray.com/nodejs/20220517/432259079/">Express Imgur 套件上傳教學</a></p>
<p><strong>範例</strong>（完整範例可觀看 <a href="https://github.com/gonsakon/express-week4-sample/tree/week7">GitHub</a>）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> uploadRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/upload&#x27;</span>);</span><br><span class="line">app.use(<span class="string">&#x27;/api/v1/upload&#x27;</span>, uploadRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  routes/upload.js</span></span><br><span class="line"><span class="keyword">const</span> imgur = <span class="built_in">require</span>(<span class="string">&#x27;imgur&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sizeOf = <span class="built_in">require</span>(<span class="string">&#x27;image-size&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> upload = <span class="built_in">require</span>(<span class="string">&#x27;../service/image&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; ImgurClient &#125; = <span class="built_in">require</span>(<span class="string">&#x27;imgur&#x27;</span>);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  upload(req, res, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 若上傳檔案不符或沒有成功上傳，回傳錯誤訊息</span></span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">!req.files.length</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.status(<span class="number">400</span>).send(&#123;</span><br><span class="line">        message: <span class="string">&#x27;尚未上傳檔案。&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 檢測圖片尺寸</span></span><br><span class="line">    <span class="keyword">const</span> dimensions = sizeOf(req.files[<span class="number">0</span>].buffer);</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">dimensions.width !== dimensions.height</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.status(<span class="number">400</span>).send(&#123;</span><br><span class="line">        message: <span class="string">&#x27;圖片長寬不符合 1:1 尺寸。&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 加入申請好的 imgur client 資訊</span></span><br><span class="line">    <span class="keyword">const</span> client = <span class="keyword">new</span> ImgurClient(&#123;</span><br><span class="line">      clientId: process.env.IMGUR_CLIENTID,</span><br><span class="line">      clientSecret: process.env.IMGUR_CLIENT_SECRET,</span><br><span class="line">      refreshToken: process.env.IMGUR_REFRESH_TOKEN,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 將 buffer 編碼為 base64 格式並上傳至指定好的 imgur 相簿</span></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> client.upload(&#123;</span><br><span class="line">      image: req.files[<span class="number">0</span>].buffer.toString(<span class="string">&#x27;base64&#x27;</span>),</span><br><span class="line">      type: <span class="string">&#x27;base64&#x27;</span>,</span><br><span class="line">      album: process.env.IMGUR_ALBUM_ID</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 回傳圖片 url</span></span><br><span class="line">    res.send(&#123; <span class="attr">url</span>: response.data.link &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（21 - 26 行）以設計稿的<a href="https://xd.adobe.com/view/c0763dbe-fc15-42e8-be0b-8956ed03e675-9525/screen/c328cf8f-1de3-4de6-b944-245959af7dd0/specs/">修改個人資料頁面</a>（上傳大頭照）為例，需符合</p>
<ul>
<li>圖片比例 1:1 </li>
<li>解析度寬度至少 300 像素以上</li>
</ul>
<p>可以使用 <a href="https://github.com/image-size/image-size#image-size">image-size</a> 套件取得圖片尺寸相關資訊驗證圖片是否符合比例及最小寬度</p>
<p>（27 - 32 行）串接 Imgur 前，參考 <a href="https://israynotarray.com/nodejs/20220517/432259079/">Express Imgur 套件上傳教學</a>，註冊 Imgur app 並取得 client Id、client secret、refresh token，加入環境變數中</p>
<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://github.com/image-size/image-size#image-size">image-size</a><br>範例中使用到 imgur 套件的 <a href="https://github.com/keneucker/imgur#import-and-instantiate-with-credentials">new ImgurClient()</a> 、<a href="https://github.com/keneucker/imgur#upload-one-or-more-images-and-videos">upload()</a> 介紹<br>若是使用 <a href="mailto:&#x69;&#x6d;&#103;&#117;&#114;&#64;&#x32;&#x2e;&#x32;&#x2e;&#x30;">&#x69;&#x6d;&#103;&#117;&#114;&#64;&#x32;&#x2e;&#x32;&#x2e;&#x30;</a> 需另外安裝 <a href="https://www.npmjs.com/package/tslib">tslib</a></p>
<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>參考上方範例實作<strong>串接 Imgur</strong></p>
<ul>
<li>需驗證 解析度寬度至少 300 像素以上、圖片長寬比例需符合 1:1 尺寸</li>
<li>註冊 Imgur App、取得 refresh token</li>
<li>以 POSTMAN 測試可成功回傳圖片網址，並有成功上傳至自己的 Imgur 相簿</li>
</ul>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 33(multer 處理上傳檔案)</title>
    <url>/2022/05/30/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day33/</url>
    <content><![CDATA[<h1 id="🏅-Day-33"><a href="#🏅-Day-33" class="headerlink" title="🏅 Day 33"></a>🏅 Day 33</h1><h2 id="multer-處理上傳檔案"><a href="#multer-處理上傳檔案" class="headerlink" title="multer 處理上傳檔案"></a>multer 處理上傳檔案</h2><p>接下來第七週會製作上傳圖片功能，並實作 Imgur 串接<br>使用者上傳圖片 POST 請求，檔案會以 form data 的形式傳送到後端，<br>因此會使用到 multer 套件處理接收到的資料</p>
<p>Multer 為一個 node.js middleware，處理 multipart/form-data 資料，主要用於上傳檔案</p>
<a id="more"></a>
<p><strong>範例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> uploadRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/upload&#x27;</span>);</span><br><span class="line">app.use(<span class="string">&#x27;/api/v1/upload&#x27;</span>, uploadRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  routes/upload.js</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> upload = multer().any();</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  upload(req, res, <span class="function">() =&gt;</span>  &#123;</span><br><span class="line">    <span class="comment">// 這裡先回傳以下，接下來會串接 Imgur 將以成功處理的圖片上傳至 Imgur 相簿</span></span><br><span class="line">    res.send(&#123; </span><br><span class="line">      status: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其中 <code>multer()</code> 可以加入 options 設定，這裡主要會加入 <a href="https://github.com/expressjs/multer#filefilter">fileFilter</a>  及 <a href="https://github.com/expressjs/multer#limits">limits</a> 限制上傳圖片檔案類型以及最大檔案容量</p>
<p><strong>範例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  routes/upload.js</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123;</span><br><span class="line"></span><br><span class="line">  limits: &#123;</span><br><span class="line"></span><br><span class="line">    fileSize: <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">fileFilter</span>(<span class="params">req, file, cb</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ext = path.extname(file.originalname).toLowerCase();</span><br><span class="line">    <span class="comment">// path.extname() 取得副檔名(如 .jpg)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ext !== <span class="string">&#x27;.jpg&#x27;</span> &amp;&amp; ext !== <span class="string">&#x27;.png&#x27;</span> &amp;&amp; ext !== <span class="string">&#x27;.jpeg&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 拒絕上傳的檔案</span></span><br><span class="line">      cb(<span class="string">&#x27;檔案格式錯誤，僅限上傳 jpg、jpeg 與 png 格式。&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接受檔案</span></span><br><span class="line">    cb(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;).any();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://nodejs.org/api/path.html#pathextnamepath">path.extname(path)</a><br><a href="https://github.com/expressjs/multer">expressjs / multer </a></p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>請參考上方範例，加入上傳圖片路由 POST <code>/api/v1/upload</code>，使用 multer 套件處理 form-data，若有上傳圖片成功則回傳成功訊息<br>:::spoiler POSTMAN 範例圖<br><img src="https://i.imgur.com/eUg6H4f.png"><br>選擇 <code>form-data</code> 並選擇傳送 file<br>:::</p>
<h2 id="回報流程"><a href="#回報流程" class="headerlink" title="回報流程"></a>回報流程</h2><p>請同學依照下圖教學觀看解答、回報答案:</p>
<p><img src="https://i.imgur.com/QtL8zEW.png"></p>
<p>回報格式：請在「回報區」貼上 CodePen 或 HackMD 連結回報答案 (為了統計人數，請同學依序加上「報數」)</p>
<p>解答</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> uploadRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/upload&#x27;</span>);</span><br><span class="line">app.use(<span class="string">&#x27;/api/v1/upload&#x27;</span>, uploadRouter);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  routes/upload.js</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123;</span><br><span class="line"></span><br><span class="line">  limits: &#123;</span><br><span class="line">    fileSize: <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">fileFilter</span>(<span class="params">req, file, cb</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ext = path.extname(file.originalname).toLowerCase();</span><br><span class="line">    <span class="keyword">if</span> (ext !== <span class="string">&#x27;.jpg&#x27;</span> &amp;&amp; ext !== <span class="string">&#x27;.png&#x27;</span> &amp;&amp; ext !== <span class="string">&#x27;.jpeg&#x27;</span>) &#123;</span><br><span class="line">      cb(<span class="string">&#x27;檔案格式錯誤，僅限上傳 jpg、jpeg 與 png 格式。&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;).any();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  upload(req, res, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 這裡先回傳以下，接下來會串接 Imgur 將以成功處理的圖片上傳至 Imgur 相簿</span></span><br><span class="line">		res.send(&#123; </span><br><span class="line">      status: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 36(新增、取消特定貼文讚)</title>
    <url>/2022/05/30/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day36/</url>
    <content><![CDATA[<h1 id="🏅-Day-36"><a href="#🏅-Day-36" class="headerlink" title="🏅 Day 36"></a>🏅 Day 36</h1><h2 id="新增、取消特定貼文讚"><a href="#新增、取消特定貼文讚" class="headerlink" title="新增、取消特定貼文讚"></a>新增、取消特定貼文讚</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>實作<a href="https://xd.adobe.com/view/c0763dbe-fc15-42e8-be0b-8956ed03e675-9525/screen/ace2ccc4-7e50-401b-998a-a14f49e87918/">動態牆頁面</a><strong>新增及取消貼文讚的功能</strong></p>
<a id="more"></a>
<p><strong>新增按讚</strong><br>設計 POST <code>/posts/:id/likes</code> 路由，需登入才能請求（id 為貼文  ID）</p>
<ul>
<li>當使用者登入並驗證 JWT 正確，修改資料庫中該貼文的 likes 欄位，將使用者 ID 加入 likes 陣列中（使用 <code>$addToSet</code>，避免加入重複的使用者 ID）</li>
<li>若新增成功，回傳成功訊息及修改的貼文 ID、新增的使用者 ID</li>
</ul>
<p><strong>移除按讚</strong><br>設計 DELETE <code>/posts/:id/likes</code> 路由，需登入才能請求（id 為貼文  ID）</p>
<ul>
<li>當使用者登入並驗證 JWT 正確，修改資料庫中該貼文的 likes 欄位，將使用者 ID 由 likes 陣列中移除（使用 <code>$pull</code>）</li>
<li>若移除成功，回傳成功訊息及修改的貼文 ID、已移除的使用者 ID</li>
</ul>
<p><strong>使用 Postman 測試是否正確運作</strong><br><strong>將程式碼片段貼至 HackMD 並回報</strong></p>
<h2 id="回報流程"><a href="#回報流程" class="headerlink" title="回報流程"></a>回報流程</h2><p>請同學依照下圖教學觀看解答、回報答案:</p>
<p><img src="https://i.imgur.com/QtL8zEW.png"></p>
<p>回報格式：請在「回報區」貼上 CodePen 或 HackMD 連結回報答案 (為了統計人數，請同學依序加上「報數」)</p>
<p>解答</p>
<p>範例參考 <a href="https://github.com/gonsakon/express-week4-sample/blob/week8/routes/posts.js#L40-L65">https://github.com/gonsakon/express-week4-sample/blob/week8/routes/posts.js#L40-L65</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes/posts.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> Post = <span class="built_in">require</span>(<span class="string">&#x27;../models/postsModel&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; isAuth &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../service/auth&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增按讚</span></span><br><span class="line">router.post(<span class="string">&#x27;/:id/likes&#x27;</span>,isAuth, handleErrorAsync(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _id = req.params.id;</span><br><span class="line">    <span class="keyword">await</span> Post.findOneAndUpdate(</span><br><span class="line">        &#123; _id&#125;,</span><br><span class="line">        &#123; <span class="attr">$addToSet</span>: &#123; <span class="attr">likes</span>: req.user.id &#125; &#125;</span><br><span class="line">      );</span><br><span class="line">      res.status(<span class="number">201</span>).json(&#123;</span><br><span class="line">        status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        postId: _id,</span><br><span class="line">        userId: req.user.id</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除按讚</span></span><br><span class="line">router.delete(<span class="string">&#x27;/:id/likes&#x27;</span>,isAuth, handleErrorAsync(<span class="keyword">async</span>(req, res, next) =&gt;  &#123;</span><br><span class="line">  <span class="keyword">const</span> _id = req.params.id;</span><br><span class="line">  <span class="keyword">await</span> Post.findOneAndUpdate(</span><br><span class="line">      &#123; _id&#125;,</span><br><span class="line">      &#123; <span class="attr">$pull</span>: &#123; <span class="attr">likes</span>: req.user.id &#125; &#125;</span><br><span class="line">    );</span><br><span class="line">    res.status(<span class="number">201</span>).json(&#123;</span><br><span class="line">      status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">      postId: _id,</span><br><span class="line">      userId: req.user.id</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 37(資料庫設計 embedded / references)</title>
    <url>/2022/05/30/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day37/</url>
    <content><![CDATA[<h1 id="🏅-Day-37"><a href="#🏅-Day-37" class="headerlink" title="🏅 Day 37"></a>🏅 Day 37</h1><h2 id="MongoDB-資料設計-embedded-references"><a href="#MongoDB-資料設計-embedded-references" class="headerlink" title="MongoDB 資料設計 embedded / references"></a>MongoDB 資料設計 embedded / references</h2><p>常見的資料庫設計有：<strong>embedded</strong> 及 <strong>references</strong><br><img src="https://i.imgur.com/TkJ5tXJ.png"><br>像是第四週有練習的 Mongoose populate 語法，因貼文資料會加入 user 欄位把使用者資料加入，不過因使用者的資料在眾多貼文中可能會重複，並且是可能會被修改的，若將資料寫死在貼文資料中，修改上會很麻煩，因此可以將使用者資料另外放一個 Model，取得貼文時再使用 populate 關聯使用者資料，確保取得貼文時帶入的是最新的使用者資料</p>
<a id="more"></a>

<p>實作上也會依不同需求情境來選擇要使用哪種資料庫設計</p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>請依據以下描述的情境選擇要使用 ==<strong>方案 A embedded</strong>== 或 ==<strong>方案 B references</strong>== 的做法</p>
<p>回覆範例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">題目一</span><br><span class="line">1.A</span><br><span class="line">2.B</span><br><span class="line">3.A</span><br><span class="line"></span><br><span class="line">題目二</span><br><span class="line">A</span><br><span class="line"></span><br><span class="line">題目三</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><a href="https://whimsical.com/3CkqgyD3n3GvsCrdkywruw">題目來源</a></p>
<h4 id="題目一"><a href="#題目一" class="headerlink" title="題目一"></a>題目一</h4><p><img src="https://i.imgur.com/EpvwLTV.png"></p>
<ol>
<li>製作訂房系統，但希望可以做註冊登入功能，另外儲存使用者資料，訂單資料同時也會需要紀錄使用者的資料</li>
<li>以留言板的模式製作一個較陽春的訂房系統，預約一個房型就如同新增一個留言，為了節省開發成本，不會新增其他資料，也不需註冊會員</li>
</ol>
<h4 id="題目二"><a href="#題目二" class="headerlink" title="題目二"></a>題目二</h4><p><img src="https://i.imgur.com/nJHXQ2o.png"><br>該火車時刻表每天會被查詢近千萬次，班次資料幾乎都是固定的，變更頻率低（很常被讀取，較少被寫入）</p>
<h4 id="題目三"><a href="#題目三" class="headerlink" title="題目三"></a>題目三</h4><p><img src="https://i.imgur.com/0IgKTdF.png"><br>使用者可以時常新增貼文（無法預測貼文數量），系統也允許修改個人資料<br>例如：修改個人大頭貼後，所有該使用者發布的貼文的個人大頭貼都會同步更換<br>使用者也很常觀看其他人的貼文，貼文中也會顯示個人資訊</p>
<h4 id="題目四"><a href="#題目四" class="headerlink" title="題目四"></a>題目四</h4><p><img src="https://i.imgur.com/F6VFGcX.png"><br>依<a href="https://xd.adobe.com/view/c0763dbe-fc15-42e8-be0b-8956ed03e675-9525/screen/ace2ccc4-7e50-401b-998a-a14f49e87918/specs/">設計稿此頁</a>設計<br>貼文的數量不可預測，按讚資訊不會顯示出按讚者的資訊，同時使用者資料可能隨時變更</p>
<h2 id="回報流程"><a href="#回報流程" class="headerlink" title="回報流程"></a>回報流程</h2><p>請同學依照下圖教學觀看解答、回報答案:</p>
<p><img src="https://i.imgur.com/QtL8zEW.png"></p>
<p>回報格式：請在「回報區」貼上 CodePen 或 HackMD 連結回報答案 (為了統計人數，請同學依序加上「報數」)</p>
<p>解答<br>題目一<br>1.B<br>2.A</p>
<p>題目二<br>A</p>
<p>題目三<br>B</p>
<p>題目四<br>B</p>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 35(取得按讚貼文列表)</title>
    <url>/2022/05/30/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day35/</url>
    <content><![CDATA[<h1 id="🏅-Day-35"><a href="#🏅-Day-35" class="headerlink" title="🏅 Day 35"></a>🏅 Day 35</h1><h2 id="取得按讚貼文列表"><a href="#取得按讚貼文列表" class="headerlink" title="取得按讚貼文列表"></a>取得按讚貼文列表</h2><h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>實作<a href="https://xd.adobe.com/view/c0763dbe-fc15-42e8-be0b-8956ed03e675-9525/screen/f4bf7d1f-0681-4645-a07c-c5ac3cd38065/">此頁面</a>的取得使用者按讚貼文列表功能</p>
<p><strong>流程</strong><br>當使用者按讚，將按讚的使用者 ID 存到該則貼文資料 likes 陣列中，在使用者的個人頁面可以嘗試取得貼文資料中 likes 欄位含有該使用者 ID 的貼文</p>
<a id="more"></a>
<p><strong>實作前準備</strong></p>
<ul>
<li><p>請先在貼文 posts 的 schema 中，將 likes 欄位改為以陣列呈現，陣列中的內容， type 型別更改為 <code>mongoose.Schema.ObjectId</code> 並且需來自 <code>User</code> Model 的 ObjectId</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">likes: [</span><br><span class="line">  &#123; </span><br><span class="line">    type: mongoose.Schema.ObjectId, </span><br><span class="line">    ref: <span class="string">&#x27;User&#x27;</span> </span><br><span class="line">  &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
</li>
<li><p>預先新增一些測試的貼文資料以及註冊新增使用者資料，在 MongoDB Compass 將已註冊的使用者 ID 加入貼文的 likes 欄位中<br>:::spoiler 如圖<br><img src="https://i.imgur.com/OWLguRc.png"></p>
</li>
</ul>
<p>:::</p>
<p>–<br><strong>開始實作</strong></p>
<ul>
<li>設計一個 GET <code>/users/getLikeList</code> 路由，需登入才能請求貼文資料</li>
<li>當使用者登入並驗證 JWT 正確，尋找資料庫中 likes 欄位包含該使用者 ID 的貼文</li>
<li>找出的貼文需顯示使用者的<code>name</code>及 <code>_id</code></li>
<li>回傳成功訊息及貼文資料</li>
</ul>
<p><strong>將程式碼片段貼至 HackMD 並回報</strong></p>
<h2 id="回報流程"><a href="#回報流程" class="headerlink" title="回報流程"></a>回報流程</h2><p>請同學依照下圖教學觀看解答、回報答案:</p>
<p><img src="https://i.imgur.com/QtL8zEW.png"></p>
<p>回報格式：請在「回報區」貼上 CodePen 或 HackMD 連結回報答案 (為了統計人數，請同學依序加上「報數」)</p>
<p>解答</p>
<p>範例參考 <a href="https://github.com/gonsakon/express-week4-sample/blob/week8/routes/users.js#L76-L88">https://github.com/gonsakon/express-week4-sample/blob/week8/routes/users.js#L76-L88</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes/users.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> Post = <span class="built_in">require</span>(<span class="string">&#x27;../models/postsModel&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; isAuth &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../service/auth&#x27;</span>);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/getLikeList&#x27;</span>, isAuth, handleErrorAsync(<span class="keyword">async</span>(req, res, next) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> likeList = <span class="keyword">await</span> Post.find(&#123;</span><br><span class="line">    likes: &#123; <span class="attr">$in</span>: [req.user.id] &#125;</span><br><span class="line">  &#125;).populate(&#123;</span><br><span class="line">    path:<span class="string">&quot;user&quot;</span>,</span><br><span class="line">    select:<span class="string">&quot;name _id&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    likeList</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 38(常見資料庫設計)</title>
    <url>/2022/06/12/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day38/</url>
    <content><![CDATA[<h1 id="🏅-Day-38"><a href="#🏅-Day-38" class="headerlink" title="🏅 Day 38"></a>🏅 Day 38</h1><h2 id="常見資料庫設計"><a href="#常見資料庫設計" class="headerlink" title="常見資料庫設計"></a>常見資料庫設計</h2><p><img src="https://i.imgur.com/kfxXBxn.png"><br>常見的資料庫設計有上圖幾種情況<br>其中一對多有分成 1: few 及 1: many，1:few 在多數的部分數量是可預期的，如一本書籍可能會有多個作者，1:many 在多數的部分則可能無法預期上限，如評論</p>
<a id="more"></a>
<p>另外在資料庫設計上也需注意是否可能超過 MongoDB document 16mb 的容量限制，（若是可能超過容量限制，則會影響是否將該欄位的資料獨立為一個 collection）</p>
<p>例如以下情況<br>:::spoiler {state=”open”} 貼文按讚設計<br><img src="https://i.imgur.com/JJ1Nz8J.png"></p>
<p>以貼文的 likes 欄位為例，若將 likes 欄位的資料獨立為一個 collection，貼文中就不會有 likes 欄位存放使用者的 ID，而是由個別的 likes 資料關聯貼文 ID<br>:::</p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p>請依據不同需求情境，回覆以下問題</p>
<ol>
<li>會不會超過 MongoDB document 16mb 的容量限制</li>
<li>使用上圖哪一種資料庫設計<br>選項：==一對一==、==一對多 (1: few)== 、==一對多(1:many)==、==多對多==</li>
</ol>
<p>回覆範例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">情境一</span><br><span class="line">1.是</span><br><span class="line">2.一對多(1:few)</span><br><span class="line"></span><br><span class="line">情境二</span><br><span class="line">1....</span><br><span class="line">2....</span><br><span class="line"></span><br><span class="line">情境三</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="情境一-對動態按讚功能"><a href="#情境一-對動態按讚功能" class="headerlink" title="情境一 對動態按讚功能"></a>情境一 對動態按讚功能</h4><p>:::spoiler 示意圖<br><img src="https://i.imgur.com/CnyN6YG.png"></p>
<p>:::</p>
<ol>
<li>由於最終作業為一個社群網站，以 NFT 設計，有限制 500 位會員在其中交流，因此在 likes 欄位中最多會有 499 - 500 個 ID，請問會不會超過 MongoDB document 16mb 的容量限制</li>
<li>若是採用方案 B，會是 likes 欄位適用哪一種資料庫設計</li>
</ol>
<h4 id="情境二-互相追蹤功能（following-followers"><a href="#情境二-互相追蹤功能（following-followers" class="headerlink" title="情境二 互相追蹤功能（following / followers)"></a>情境二 互相追蹤功能（following / followers)</h4><ol>
<li>假設在社群網站中 500 位會員彼此都互相追蹤，在 <a href="https://github.com/gonsakon/express-week4-sample/blob/week8/models/usersModel.js#L29-L46">user 資料</a>中， following 與 followers 都各有 499 個 ID，會不會超過 MongoDB document 16mb 的容量限制</li>
<li>請問此情境適用何種資料庫設計</li>
</ol>
<h4 id="情境三-貼文留言功能"><a href="#情境三-貼文留言功能" class="headerlink" title="情境三 貼文留言功能"></a>情境三 貼文留言功能</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">posts</span><br><span class="line">&#123; </span><br><span class="line"> id: 3,</span><br><span class="line"> userId: &quot;123456&quot;,</span><br><span class="line"> content: &quot;test&quot;,</span><br><span class="line"> imgUrl: &quot;https:// ....&quot;,</span><br><span class="line"> comments: [</span><br><span class="line">  &#123; </span><br><span class="line">   user: &quot;12345&quot;,</span><br><span class="line">   photo: &quot;https:// ....&quot;,</span><br><span class="line">   content: &quot;123123123...&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    ...   </span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>以上方貼文資料為例，若在一則貼文中有多個留言，留言數與留言內容量無法預測，是否可能超過 MongoDB document 16mb 的容量限制</li>
<li>請問此情境適用何種資料庫設計</li>
</ol>
<p>解答<br>情境一<br>1.不會<br>2.一對多(1:few)</p>
<p>情境二<br>1.不會<br>2.多對多</p>
<p>情境三<br>1.會<br>2.一對多(1: many)</p>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 40(新增貼文留言功能)</title>
    <url>/2022/06/12/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day40/</url>
    <content><![CDATA[<h1 id="🏅-Day-40"><a href="#🏅-Day-40" class="headerlink" title="🏅 Day 40"></a>🏅 Day 40</h1><h2 id="新增貼文留言功能"><a href="#新增貼文留言功能" class="headerlink" title="新增貼文留言功能"></a>新增貼文留言功能</h2><p><strong>實作前準備</strong><br>由於無法預期單則貼文的留言數量，因此留言的部分會另外使用 collection 存放<br>Schema 設定可參考<a href="https://github.com/gonsakon/express-week4-sample/blob/week8/models/commentsModel.js">範例程式碼</a></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> commentSchema = <span class="keyword">new</span> mongoose.Schema(</span><br><span class="line">  &#123;</span><br><span class="line">    comment: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: [<span class="literal">true</span>, <span class="string">&#x27;comment can not be empty!&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    createdAt: &#123;</span><br><span class="line">      type: <span class="built_in">Date</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="built_in">Date</span>.now</span><br><span class="line">    &#125;,</span><br><span class="line">    user: &#123;</span><br><span class="line">      type: mongoose.Schema.ObjectId,</span><br><span class="line">      ref: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">      <span class="built_in">require</span>: [<span class="string">&#x27;true&#x27;</span>, <span class="string">&#x27;user must belong to a post.&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    post: &#123;</span><br><span class="line">      type: mongoose.Schema.ObjectId,</span><br><span class="line">      ref: <span class="string">&#x27;Post&#x27;</span>,</span><br><span class="line">      <span class="built_in">require</span>: [<span class="string">&#x27;true&#x27;</span>, <span class="string">&#x27;comment must belong to a post.&#x27;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123; <span class="attr">versionKey</span>: <span class="literal">false</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>由於 Comments 存放在另一個 collection，因此若取得貼文時需要顯示出相關留言串，需另外在 Post Schema 中加入<strong>虛擬欄位</strong><br>而此虛擬欄位 comments 會關聯 Comment Model 的 post 欄位及 Post Model 的 _id 欄位，找出所有該貼文 ID 的留言</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">postSchema.virtual(<span class="string">&#x27;comments&#x27;</span>, &#123;</span><br><span class="line">  ref: <span class="string">&#x27;Comment&#x27;</span>,</span><br><span class="line">  foreignField: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  localField: <span class="string">&#x27;_id&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>需注意當 document 被轉為 JSON 或 Object 資料時，是不包含虛擬欄位的，因此需記得在貼文 Schema 加入 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">toJSON: &#123; <span class="attr">virtuals</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">toObject: &#123; <span class="attr">virtuals</span>: <span class="literal">true</span> &#125;,</span><br></pre></td></tr></table></figure>





<h3 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h3><p><a href="https://mongoosejs.com/docs/tutorials/virtuals.html">Mongoose v6.3.4: Mongoose Tutorials: Mongoose Virtuals</a><br><a href="https://mongoosejs.com/docs/middleware.html#pre">Mongoose Middleware - Pre</a></p>
<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p><strong>實作新增貼文留言功能</strong><br><strong>設計 POST <code>/posts/:id/comment</code> 路由</strong></p>
<ul>
<li>需登入通過 JWT 驗證才能請求</li>
</ul>
<ul>
<li>新增傳入的留言，以及留言者 user ID、貼文 ID 新增至 comments collection 中</li>
<li>需回傳使用者新增的留言</li>
</ul>
<p>解答</p>
<p>範例參考<br>models/commentsModel.js<br><a href="https://github.com/gonsakon/express-week4-sample/blob/week8/models/commentsModel.js">https://github.com/gonsakon/express-week4-sample/blob/week8/models/commentsModel.js</a></p>
<p>/routes/posts.js<br><a href="https://github.com/gonsakon/express-week4-sample/blob/week8/routes/posts.js#L67-L83">https://github.com/gonsakon/express-week4-sample/blob/week8/routes/posts.js#L67-L83</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// routes/posts.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/:id/comment&#x27;</span>,isAuth, handleErrorAsync(<span class="keyword">async</span>(req, res, next) =&gt;  &#123;</span><br><span class="line">  <span class="keyword">const</span> user = req.user.id;</span><br><span class="line">  <span class="keyword">const</span> post = req.params.id;</span><br><span class="line">  <span class="keyword">const</span> &#123;comment&#125; = req.body;</span><br><span class="line">  <span class="keyword">const</span> newComment = <span class="keyword">await</span> Comment.create(&#123;</span><br><span class="line">    post,</span><br><span class="line">    user,</span><br><span class="line">    comment</span><br><span class="line">  &#125;);</span><br><span class="line">  res.status(<span class="number">201</span>).json(&#123;</span><br><span class="line">      status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        comments: newComment</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 39(追蹤 / 取消追蹤使用者功能)</title>
    <url>/2022/06/12/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day39/</url>
    <content><![CDATA[<h1 id="🏅-Day-39"><a href="#🏅-Day-39" class="headerlink" title="🏅 Day 39"></a>🏅 Day 39</h1><h2 id="追蹤-取消追蹤使用者功能"><a href="#追蹤-取消追蹤使用者功能" class="headerlink" title="追蹤 / 取消追蹤使用者功能"></a>追蹤 / 取消追蹤使用者功能</h2><p><strong>執行流程：</strong><br>A 使用者對其他使用者（如 B) 點擊追蹤時，會分別在 A 使用者的 user 資料 followings 欄位加入 B 的 ID，B 使用者的 user 資料 followers 欄位也會加入 A 的 ID<br>若執行取消追蹤則從 A 使用者的 user 資料 followings 欄位、B 使用者的 user 資料 followers 欄位移除 ID</p>
<a id="more"></a>
<p><strong>實作前準備</strong><br>需先於 user Model 中加入 followers 與 follwing 欄位，預計會加入使用者 ID 及加入時間（<a href="https://github.com/gonsakon/express-week4-sample/blob/week8/models/usersModel.js#L29-L46">參考</a>）<br><code>由於社群網站在設計上會限制 500 位會員數，預計在兩個欄位中分別加入 499 個 user ID 不會超過 MongoDB Document 的 16mb 容量限制，因此可使用直接將 ID 加入 user 資料的方式執行</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">followers: [</span><br><span class="line">  &#123;</span><br><span class="line">    user: &#123; <span class="attr">type</span>: mongoose.Schema.ObjectId, <span class="attr">ref</span>: <span class="string">&#x27;User&#x27;</span> &#125;,</span><br><span class="line">    createdAt: &#123;</span><br><span class="line">      type: <span class="built_in">Date</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="built_in">Date</span>.now</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ],</span><br><span class="line">  following: [</span><br><span class="line">    &#123;</span><br><span class="line">      user: &#123; <span class="attr">type</span>: mongoose.Schema.ObjectId, <span class="attr">ref</span>: <span class="string">&#x27;User&#x27;</span> &#125;,</span><br><span class="line">      createdAt: &#123;</span><br><span class="line">        type: <span class="built_in">Date</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="built_in">Date</span>.now</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p><strong>實作使用者追蹤、取消追蹤功能</strong><br>可參考第八週<a href="https://github.com/gonsakon/express-week4-sample">範例程式碼</a></p>
<ul>
<li>設計追蹤路由 POST<code>users/:id/follow</code>、取消追蹤路由 DELETE <code>users/:id/unfollow</code></li>
<li>需登入通過 JWT 驗證才能請求</li>
<li>不能追蹤或取消追蹤帳號本人</li>
<li>追蹤與取消追蹤都需調整追蹤者與被追蹤者雙方的 user 資料<ul>
<li>使用 updateOne() 搭配 <code>$addToSet</code> <code>$pull</code> 將使用者 ID 加入或移除</li>
</ul>
</li>
<li>準備好兩個已註冊過的帳號，測試可以正確互相追蹤以及取消追蹤</li>
</ul>
<h2 id="回報流程"><a href="#回報流程" class="headerlink" title="回報流程"></a>回報流程</h2><p>請同學依照下圖教學觀看解答、回報答案:</p>
<p><img src="https://i.imgur.com/QtL8zEW.png"></p>
<p>回報格式：請在「回報區」貼上 CodePen 或 HackMD 連結回報答案 (為了統計人數，請同學依序加上「報數」)</p>
<p>解答<br>models/usersModel.js<br><a href="https://github.com/gonsakon/express-week4-sample/blob/week8/models/usersModel.js#L29-L46">https://github.com/gonsakon/express-week4-sample/blob/week8/models/usersModel.js#L29-L46</a></p>
<p>routes/users.js<br>參考 <a href="https://github.com/gonsakon/express-week4-sample/blob/week8/routes/users.js#L90-L144">https://github.com/gonsakon/express-week4-sample/blob/week8/routes/users.js#L90-L144</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/:id/follow&#x27;</span>,isAuth, handleErrorAsync(<span class="keyword">async</span>(req, res, next) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.params.id === req.user.id) &#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError(<span class="number">401</span>,<span class="string">&#x27;您無法追蹤自己&#x27;</span>,next));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> User.updateOne(</span><br><span class="line">    &#123;</span><br><span class="line">      _id: req.user.id,</span><br><span class="line">      <span class="string">&#x27;following.user&#x27;</span>: &#123; <span class="attr">$ne</span>: req.params.id &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      $addToSet: &#123; <span class="attr">following</span>: &#123; <span class="attr">user</span>: req.params.id &#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">await</span> User.updateOne(</span><br><span class="line">    &#123;</span><br><span class="line">      _id: req.params.id,</span><br><span class="line">      <span class="string">&#x27;followers.user&#x27;</span>: &#123; <span class="attr">$ne</span>: req.user.id &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      $addToSet: &#123; <span class="attr">followers</span>: &#123; <span class="attr">user</span>: req.user.id &#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;您已成功追蹤！&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">router.delete(<span class="string">&#x27;/:id/unfollow&#x27;</span>,isAuth, handleErrorAsync(<span class="keyword">async</span>(req, res, next) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.params.id === req.user.id) &#123;</span><br><span class="line">    <span class="keyword">return</span> next(appError(<span class="number">401</span>,<span class="string">&#x27;您無法取消追蹤自己&#x27;</span>,next));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> User.updateOne(</span><br><span class="line">    &#123;</span><br><span class="line">      _id: req.user.id</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      $pull: &#123; <span class="attr">following</span>: &#123; <span class="attr">user</span>: req.params.id &#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">await</span> User.updateOne(</span><br><span class="line">    &#123;</span><br><span class="line">      _id: req.params.id</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      $pull: &#123; <span class="attr">followers</span>: &#123; <span class="attr">user</span>: req.user.id &#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;您已成功取消追蹤！&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 直播班每日任務🏅 Day 41(取得所有貼文，加上 comment)</title>
    <url>/2022/06/12/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8B%99Day41/</url>
    <content><![CDATA[<h1 id="🏅-Day-41"><a href="#🏅-Day-41" class="headerlink" title="🏅 Day 41"></a>🏅 Day 41</h1><h2 id="取得所有貼文，加上-comment"><a href="#取得所有貼文，加上-comment" class="headerlink" title="取得所有貼文，加上 comment"></a>取得所有貼文，加上 comment</h2><h3 id="題目（將答案寫在-HackMD-並提交至回報區）"><a href="#題目（將答案寫在-HackMD-並提交至回報區）" class="headerlink" title="題目（將答案寫在 HackMD 並提交至回報區）"></a>題目（將答案寫在 HackMD 並提交至回報區）</h3><p><strong>使用 populate() 關聯 comments 欄位，取得所有貼文時需顯示出該貼文的所有留言</strong></p>
<a id="more"></a>

<p>解答<br>範例參考 <a href="https://github.com/gonsakon/express-week4-sample/blob/week8/routes/posts.js#L9-L23">https://github.com/gonsakon/express-week4-sample/blob/week8/routes/posts.js#L9-L23</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">routes/posts.js</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> timeSort = req.query.timeSort == <span class="string">&quot;asc&quot;</span> ? <span class="string">&quot;createdAt&quot;</span>:<span class="string">&quot;-createdAt&quot;</span></span><br><span class="line">  <span class="keyword">const</span> q = req.query.q !== <span class="literal">undefined</span> ? &#123;<span class="string">&quot;content&quot;</span>: <span class="keyword">new</span> <span class="built_in">RegExp</span>(req.query.q)&#125; : &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> post = <span class="keyword">await</span> Post.find(q).populate(&#123;</span><br><span class="line">      path: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      select: <span class="string">&#x27;name photo &#x27;</span></span><br><span class="line">    &#125;).populate(&#123;</span><br><span class="line">      path: <span class="string">&#x27;comments&#x27;</span>,</span><br><span class="line">      select: <span class="string">&#x27;-_id -post comment user&#x27;</span></span><br><span class="line">    &#125;).sort(timeSort);</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">    status: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    post</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>node春季直播班第一周主線</title>
    <url>/2022/04/23/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E7%AC%AC%E4%B8%80%E5%91%A8%E4%B8%BB%E7%B7%9A%E4%BB%BB%E5%8B%99/</url>
    <content><![CDATA[<h1 id="node-js第一週主線任務"><a href="#node-js第一週主線任務" class="headerlink" title="node.js第一週主線任務"></a>node.js第一週主線任務</h1><h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><ol>
<li>請建立一個 database，並建立一個 posts collection</li>
<li>將此 JSON 資料，透過 Compass 倒入到 posts collection<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">貼文集合欄位介紹</span><br><span class="line">- name：貼文姓名</span><br><span class="line">- image：貼文圖片</span><br><span class="line">- content：貼文內容</span><br><span class="line">- likes：按讚數</span><br><span class="line">- comments：留言數</span><br><span class="line">- createdAt：發文時間</span><br><span class="line">- type：貼文種類[friend(摯友)、group(社團)]</span><br><span class="line">- tags：貼文標籤</span><br></pre></td></tr></table></figure>
<h2 id="題庫"><a href="#題庫" class="headerlink" title="題庫"></a>題庫</h2><h3 id="課程範圍"><a href="#課程範圍" class="headerlink" title="課程範圍"></a>課程範圍</h3></li>
<li>搜尋 name 欄位為 “Ray Xu” 的 document 列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123;&quot;name&quot;:&quot;Ray Xu&quot;&#125;)</span><br></pre></td></tr></table></figure></li>
<li>新增一筆 document，請全部欄位皆填寫<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.insertOne(&#123;</span><br><span class="line">    &quot;name&quot;: &quot;John Cena&quot;,</span><br><span class="line">    &quot;tags&quot;: [&quot;搞笑&quot;,&quot;電影&quot;],</span><br><span class="line">    &quot;type&quot;: &quot;group&quot;,</span><br><span class="line">    &quot;image&quot;: &quot;http:&#x2F;&#x2F;dummyimage.com&#x2F;147x100.png&#x2F;dsssddd&#x2F;000000&quot;,</span><br><span class="line">    &quot;createdAt&quot;: &quot;2022-03-12 22:38:46 UTC&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;真的很好笑&quot;,</span><br><span class="line">    &quot;likes&quot;: 11121,</span><br><span class="line">    &quot;comments&quot;: 475</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li>
<li>新增多筆 document，請全部欄位皆填寫<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.insertMany([&#123;</span><br><span class="line">    &quot;name&quot;: &quot;John Cena&quot;,</span><br><span class="line">    &quot;tags&quot;: [&quot;搞笑&quot;,&quot;電影&quot;],</span><br><span class="line">    &quot;type&quot;: &quot;group&quot;,</span><br><span class="line">    &quot;image&quot;: &quot;http:&#x2F;&#x2F;dummyimage.com&#x2F;147x100.png&#x2F;dsssddd&#x2F;000000&quot;,</span><br><span class="line">    &quot;createdAt&quot;: &quot;2022-03-12 22:38:46 UTC&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;真的很好笑&quot;,</span><br><span class="line">    &quot;likes&quot;: 11121,</span><br><span class="line">    &quot;comments&quot;: 475</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;wwe&quot;,</span><br><span class="line">    &quot;tags&quot;: [&quot;血腥&quot;,&quot;電影&quot;],</span><br><span class="line">    &quot;type&quot;: &quot;group&quot;,</span><br><span class="line">    &quot;image&quot;: &quot;http:&#x2F;&#x2F;dummyimage.com&#x2F;147x100.png&#x2F;dsssddd&#x2F;000000&quot;,</span><br><span class="line">    &quot;createdAt&quot;: &quot;2022-04-10 07:12:23 UTC&quot;,</span><br><span class="line">    &quot;content&quot;: &quot;血腥與暴力&quot;,</span><br><span class="line">    &quot;likes&quot;: 11641,</span><br><span class="line">    &quot;comments&quot;: 825</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></li>
<li>修改一筆 document，filter 條件請用 <code>_id</code> 指定其中一筆資料，<code>content</code> 欄位調整為測試資料<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.updateOne(&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;62562718bbeb56bf11a9bc2d&quot;),</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    &quot;$set&quot;: &#123;</span><br><span class="line">        &quot;content&quot;: &quot;測試資料&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>修改多筆 <code>name</code> 欄位為 <code>&quot;Ray Xu&quot;</code> 的 document 列表，content 欄位都調整為哈哈你看看你<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.updateMnay(&quot;name&quot;:&quot;Ray Xu&quot;)</span><br></pre></td></tr></table></figure></li>
<li>刪除一筆 document，filter 條件請用 <code>_id</code> 任意指定其中一筆資料<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.deleteOne(&#123;&quot;_id&quot;: ObjectId(&quot;62562718bbeb56bf11a9bda6&quot;)&#125;)</span><br></pre></td></tr></table></figure></li>
<li>刪除多筆 document，filter 條件請用 <code>type</code> 為 <code>group</code> 的值，刪除所有社團貼文<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.deleteMany(&#123;&quot;type&quot;:&quot;group&quot;&#125;)</span><br></pre></td></tr></table></figure></li>
<li>刪除多筆 document，filter 條件為以下條件<br>a. <code>name</code>:<code>&quot;Ray Xu&quot;</code><br>b. <code>likes</code>: 500(含) 個讚以下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.deleteMany(&#123;$and: [</span><br><span class="line">        &#123; &quot;name&quot;: &quot;Ray Xu&quot; &#125;,</span><br><span class="line">        &#123; &quot;likes&quot;: &#123; $gte : 500 &#125;&#125;</span><br><span class="line">      ]&#125;)</span><br></pre></td></tr></table></figure></li>
<li>查詢全部 <code>posts</code> 的 document 列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find()</span><br></pre></td></tr></table></figure></li>
<li>關鍵字搜尋 <code>name</code> 裡面含有 <code>o</code> 的 document 列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123;&quot;name&quot;: &#x2F;o&#x2F;&#125;)</span><br></pre></td></tr></table></figure></li>
<li>查詢<code>name</code> 欄位為 <code>&quot;Ray Xu&quot;</code> ，filter 篩選出介於 500~1000(含) 個讚（大於等於 500、小於等於 1000）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123;</span><br><span class="line">   $and: [</span><br><span class="line">      &#123; &quot;name&quot;: &quot;Ray Xu&quot; &#125;,</span><br><span class="line">      &#123; &quot;likes&quot;: &#123; $lte: 1000, $gt: 500 &#125; &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>查詢 <code>comments</code> 有大於等於 500 以上的 document 列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123;</span><br><span class="line">  &quot;comments&quot;: &#123;$gte: 500&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>查詢 <code>tags</code> 欄位，有 <code>謎因</code> <strong>或(or)</strong> <code>幹話</code> 的 document 列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123; &quot;tags&quot;: &#123; $in: [&quot;謎因&quot;,&quot;幹話&quot;] &#125; &#125;)</span><br></pre></td></tr></table></figure></li>
<li>查詢 <code>tags</code> 欄位，有 <code>幹話</code> 的 document 列表，需隱藏 _id 欄位<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123; &quot;tags&quot;: &#123; $in: [&quot;幹話&quot;] &#125;&#125;,&#123;&quot;_id&quot;: 0&#125;)</span><br></pre></td></tr></table></figure></li>
<li>請嘗試用 Mongo Shell 指令刪除全部 Documents<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.deleteMany(&#123;&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="自主研究題"><a href="#自主研究題" class="headerlink" title="自主研究題"></a>自主研究題</h3></li>
<li>posts 所有 document 數量為？(回傳數字)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find().count()</span><br></pre></td></tr></table></figure></li>
<li>請查詢 <code>name</code> 為 <code>Ray Xu</code> 的 document 列表，排序為由新到舊<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123;&quot;name&quot;:&quot;Ray Xu&quot;&#125;).sort(&#123;&quot;createdAt&quot;:-1&#125;)</span><br></pre></td></tr></table></figure></li>
<li>請查詢 <code>name</code> 為 <code>Ray Xu</code> 的 document 列表，顯示前 30 筆資料<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123;&quot;name&quot;:&quot;Ray Xu&quot;&#125;).limit(30)</span><br></pre></td></tr></table></figure></li>
<li>請查詢 <code>name</code> 為 <code>Ray Xu</code> ，顯示100(含) 個讚以上的前 30 筆 document 列表，時間排序由新到舊<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123;&quot;likes&quot;:&#123;$gte:100&#125;&#125;).sort(&#123;&quot;createdAt&quot;: -1&#125;).limit(30)</span><br></pre></td></tr></table></figure></li>
<li>請查詢 <code>comments</code> 超過 <code>100</code> 的 document 列表，跳過前 30 筆資料，再顯示 30 筆資料<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123;&quot;comments&quot;:&#123;$gte:100&#125;&#125;).skip(30).limit(30)</span><br></pre></td></tr></table></figure></li>
<li>尋找超夯熱門貼文，請查詢 <code>likes</code> <strong>且(and)</strong> <code>comments</code> 都 <code>1,500(含)以上</code>的 document 列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123;$and: [</span><br><span class="line">        &#123; &quot;comments&quot;: &#123;$gte: 1500&#125; &#125;,</span><br><span class="line">        &#123; &quot;likes&quot;: &#123;$gte : 1500 &#125; &#125;</span><br><span class="line">      ]&#125;)</span><br></pre></td></tr></table></figure></li>
<li>尋找普通熱門貼文，請查詢 <code>likes</code> <strong>或(or)</strong> <code>comments</code> ， <code>1,000(含)</code>以上 的 document 列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123;$or: [</span><br><span class="line">        &#123; &quot;comments&quot;: &#123;$gte: 1000 &#125;&#125;,</span><br><span class="line">        &#123; &quot;likes&quot;: &#123;$gte : 1000 &#125;&#125;</span><br><span class="line">      ]&#125;)</span><br></pre></td></tr></table></figure></li>
<li>查詢 image 欄位為 <code>null</code> 的 document 列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.find(&#123;&quot;image&quot;: null&#125;)</span><br></pre></td></tr></table></figure></li>
<li>隨意找一筆 document 資料，將 <code>tags</code> 欄位裡的陣列，新增一個新 tags 為 <code>遊記</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.updateOne(</span><br><span class="line">    &#123; _id : ObjectId(&quot;62565ad5df6225385629e58f&quot;)&#125;,</span><br><span class="line">    &#123; $push: &#123; &quot;tags&quot;: &quot;遊記&quot; &#125;&#125;)</span><br></pre></td></tr></table></figure></li>
<li>將所有 <code>tags</code> 陣列裡的 <code>感情</code> 都移除<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.posts.updateMany(</span><br><span class="line">    &#123; &#125;,</span><br><span class="line">    &#123; $pull: &#123; tags: &#123;$in: [&quot;感情&quot;] &#125;&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>node春季直播班第三周主線</title>
    <url>/2022/04/30/node%E6%98%A5%E5%AD%A3%E7%9B%B4%E6%92%AD%E7%8F%AD%E7%AC%AC%E4%B8%89%E5%91%A8%E4%B8%BB%E7%B7%9A/</url>
    <content><![CDATA[<h1 id="node-js第三週主線任務"><a href="#node-js第三週主線任務" class="headerlink" title="node.js第三週主線任務"></a>node.js第三週主線任務</h1><a id="more"></a>
<p><a href="https://github.com/CingLin570/hexweek3-node-express-generator-example">第三周express-generator拆解範例</a></p>
<p><a href="https://github.com/CingLin570/hexweek3-express-mongo">完成作業</a></p>
]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>Node.js MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>swagger筆記</title>
    <url>/2022/05/13/swagger%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<h1 id="swagger-筆記文件"><a href="#swagger-筆記文件" class="headerlink" title="swagger 筆記文件"></a>swagger 筆記文件</h1><p>使用以下版本範例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;swagger-autogen&quot;</span>: <span class="string">&quot;^2.5.10&quot;</span>,</span><br><span class="line"><span class="attr">&quot;swagger-ui-express&quot;</span>: <span class="string">&quot;^4.3.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>swagger設定檔<br>app.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swaggerUI = <span class="built_in">require</span>(<span class="string">&#x27;swagger-ui-express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> swaggerFile = <span class="built_in">require</span>(<span class="string">&#x27;./swagger-output.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/api-doc&#x27;</span>, swaggerUI.serve, swaggerUI.setup(swaggerFile));</span><br></pre></td></tr></table></figure>
<p>自行建立 swagger.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> swaggerAutogen = <span class="built_in">require</span>(<span class="string">&#x27;swagger-autogen&#x27;</span>)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doc = &#123;</span><br><span class="line">  info: &#123;</span><br><span class="line">    title: <span class="string">&#x27;Meta API&#x27;</span>,</span><br><span class="line">    description: <span class="string">&#x27;示範範例生成文件&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  host: <span class="string">&#x27;localhost:3010&#x27;</span>,</span><br><span class="line">  schemes: [<span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;https&#x27;</span>],</span><br><span class="line">  securityDefinitions: &#123;</span><br><span class="line">    apiKeyAuth: &#123;</span><br><span class="line">      type: <span class="string">&#x27;apiKey&#x27;</span>,</span><br><span class="line">      <span class="keyword">in</span>: <span class="string">&#x27;headers&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;authorization&#x27;</span>,</span><br><span class="line">      description: <span class="string">&#x27;請加上 API Token&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> outputFile = <span class="string">&#x27;./swagger-output.json&#x27;</span>; <span class="comment">//生成檔案</span></span><br><span class="line"><span class="keyword">const</span> endpointsFiles = [<span class="string">&#x27;./app.js&#x27;</span>]; <span class="comment">// 讀取路徑</span></span><br><span class="line"></span><br><span class="line">swaggerAutogen(outputFile, endpointsFiles, doc);</span><br></pre></td></tr></table></figure>

<p>文件範例<br>routes/posts.js<br>使用註解方式生成</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取得特定條件posts</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * #swagger.tags = [&#x27;Posts - 貼文&#x27;]</span></span><br><span class="line"><span class="comment">     * #swagger.description = &#x27;取得全部貼文 API&#x27;</span></span><br><span class="line"><span class="comment">     * #swagger.parameters[&#x27;sort&#x27;] = &#123;</span></span><br><span class="line"><span class="comment">            in: &#x27;query&#x27;,</span></span><br><span class="line"><span class="comment">            type: &#x27;string&#x27;,</span></span><br><span class="line"><span class="comment">            required: false,</span></span><br><span class="line"><span class="comment">            description: &#x27;排序：desc/asc&#x27;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     * #swagger.parameters[&#x27;keyword&#x27;] = &#123;</span></span><br><span class="line"><span class="comment">            in: &#x27;query&#x27;,</span></span><br><span class="line"><span class="comment">            type: &#x27;string&#x27;,</span></span><br><span class="line"><span class="comment">            required: false,</span></span><br><span class="line"><span class="comment">            description: &#x27;關鍵字搜尋&#x27;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     * #swagger.responses[200] = &#123;</span></span><br><span class="line"><span class="comment">          description: &#x27;貼文資訊&#x27;,</span></span><br><span class="line"><span class="comment">          schema: &#123;</span></span><br><span class="line"><span class="comment">            &quot;status&quot;: &quot;success&quot;,</span></span><br><span class="line"><span class="comment">            &quot;message&quot;: [&#123;</span></span><br><span class="line"><span class="comment">              &quot;_id&quot;: &quot;6278da02631ef7910e7adc37&quot;,</span></span><br><span class="line"><span class="comment">              &quot;name&quot;: &quot;員工弟弟&quot;,</span></span><br><span class="line"><span class="comment">              &quot;content&quot;: &quot;這家店草真的好帥&quot;,</span></span><br><span class="line"><span class="comment">              &quot;tags&quot;: [</span></span><br><span class="line"><span class="comment">                &quot;帥哥&quot;,</span></span><br><span class="line"><span class="comment">                &quot;店草&quot;</span></span><br><span class="line"><span class="comment">              ],</span></span><br><span class="line"><span class="comment">              &quot;type&quot;: &quot;person&quot;,</span></span><br><span class="line"><span class="comment">              &quot;image&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="comment">              &quot;user&quot;: &#123;</span></span><br><span class="line"><span class="comment">                &quot;_id&quot;: &quot;6277b20ad980d4df45db6447&quot;,</span></span><br><span class="line"><span class="comment">                &quot;name&quot;: &quot;Johnny&quot;,</span></span><br><span class="line"><span class="comment">                &quot;photo&quot;: &quot;&quot;</span></span><br><span class="line"><span class="comment">              &#125;,</span></span><br><span class="line"><span class="comment">              &quot;likes&quot;: 0,</span></span><br><span class="line"><span class="comment">              &quot;__v&quot;: 0</span></span><br><span class="line"><span class="comment">            &#125;]</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  PostsContollers.getPosts(req, res, next);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用指令執行，在package.json建立script</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run swagger</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node.js 直播班 - 2022 春季班</category>
      </categories>
      <tags>
        <tag>swagger Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 常用設定與指令</title>
    <url>/2022/05/19/%E5%B8%B8%E7%94%A8%E8%A8%AD%E5%AE%9A%E8%88%87%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="VSCode-常用設定與指令"><a href="#VSCode-常用設定與指令" class="headerlink" title="VSCode 常用設定與指令"></a>VSCode 常用設定與指令</h1><h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><a id="more"></a>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;window.zoomLevel&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// emmet tab 展開</span></span><br><span class="line">  <span class="attr">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 不支援的語言中啟用 Emmet</span></span><br><span class="line">  <span class="attr">&quot;emmet.includeLanguages&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;javascript&quot;</span>: <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-html&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;plaintext&quot;</span>: <span class="string">&quot;jade&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ejs&quot;</span>: <span class="string">&quot;html&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;editor.rulers&quot;</span>: [<span class="number">80</span>, <span class="number">120</span>],</span><br><span class="line">  <span class="attr">&quot;editor.fontLigatures&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;editor.wordWrap&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;workbench.iconTheme&quot;</span>: <span class="string">&quot;material-icon-theme&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;liveServer.settings.donotShowInfoMsg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 不要產出 map 檔</span></span><br><span class="line">  <span class="attr">&quot;liveSassCompile.settings.generateMap&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 協助編譯兼容99%瀏覽器，且向下相容兩個版本</span></span><br><span class="line">  <span class="attr">&quot;liveSassCompile.settings.autoprefix&quot;</span>: [<span class="string">&quot;&gt; 1%&quot;</span>, <span class="string">&quot;last 2 versions&quot;</span>],</span><br><span class="line">  <span class="comment">// 自訂編譯後產出的css檔案放置路徑</span></span><br><span class="line">  <span class="attr">&quot;liveSassCompile.settings.formats&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;expanded&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;extensionName&quot;</span>: <span class="string">&quot;.css&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;savePath&quot;</span>: <span class="string">&quot;/public/css/&quot;</span> <span class="comment">//此為輸出路徑，可自行更改</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;extensionName&quot;</span>: <span class="string">&quot;.min.css&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;compressed&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;savePath&quot;</span>: <span class="string">&quot;/public/css&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;[html]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.html-language-features&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;html.format.wrapAttributes&quot;</span>: <span class="string">&quot;force-expand-multiline&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;bracketPairColorizer.depreciation-notice&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 開啟顯示空白(格)符號</span></span><br><span class="line">  <span class="attr">&quot;editor.renderWhitespace&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.renderControlCharacters&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 預設 HTML 樣板設置</span></span><br><span class="line">  <span class="attr">&quot;emmet.variables&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lang&quot;</span>: <span class="string">&quot;zh-Hant-TW&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;charset&quot;</span>: <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// tab 預設空格數量</span></span><br><span class="line">  <span class="attr">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 預設行尾字元，使用 \n 表示 LF，\r\n 表示 CRLF。</span></span><br><span class="line">  <span class="attr">&quot;files.eol&quot;</span>: <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">  <span class="comment">// 編輯器字型大小</span></span><br><span class="line">  <span class="attr">&quot;editor.fontSize&quot;</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="comment">// 終端機字型大小</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.fontSize&quot;</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="comment">// 滑鼠放大視窗字型(按著 CRTL + 滾輪)</span></span><br><span class="line">  <span class="attr">&quot;editor.mouseWheelZoom&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 格式化單引號</span></span><br><span class="line">  <span class="attr">&quot;prettier.singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;[jsonc]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="VSCode-推薦套件："><a href="#VSCode-推薦套件：" class="headerlink" title="VSCode 推薦套件："></a>VSCode 推薦套件：</h2><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.atom-keybindings">Atom Keymap</a> （個人喜好 分頁切換</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a> （必裝</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow">indent-rainbow</a> （縮排檢視神器</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker">Code Spell Checker</a> （錯字檢查神器</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier</a> （程式碼格式化</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=dkultasev.vs-code-snippet-generator">VS Code Snippet Generator</a>（堪用</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer">Bracket Pair Colorizer</a> ( 括號分色</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2">Bracket Pair Colorizer 2</a> ( 括號分色2</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree">Todo Tree</a> ( 高亮 TODO 等等註解方便</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode">Tabnine AI</a> ( 代碼建議、代碼預測、代碼提示</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">Material Icon Theme</a> ( 將檔案 icon 更換 更容易識別</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks">Bookmarks</a> ( 設定標籤 快速定位到你紀錄的地方</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">Auto Rename Tag</a> ( 用更快的方式修改 html tag</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag</a> ( 自動完成 html tag<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2></li>
</ul>
<h3 id="開啟-關閉-檔案-amp-專案資料夾"><a href="#開啟-關閉-檔案-amp-專案資料夾" class="headerlink" title="開啟/關閉 檔案&amp;專案資料夾"></a>開啟/關閉 檔案&amp;專案資料夾</h3><table>
<thead>
<tr>
<th>指令說明</th>
<th>Windows 指令</th>
<th>備註</th>
</tr>
</thead>
<tbody><tr>
<td>開啟文件</td>
<td><code>Ctrl</code> + <code>O</code></td>
<td>-</td>
</tr>
<tr>
<td>開啟資料夾</td>
<td><code>Ctrl</code> + <code>K</code> + <code>L</code></td>
<td>-</td>
</tr>
<tr>
<td>儲存文件</td>
<td><code>Ctrl</code> + <code>S</code></td>
<td>-</td>
</tr>
<tr>
<td>儲存所有文件</td>
<td><code>Ctrl</code> + <code>k</code> <code>S</code></td>
<td>-</td>
</tr>
<tr>
<td>另存新檔</td>
<td><code>Ctrl</code> + <code>Shift</code> + <code>S</code></td>
<td>-</td>
</tr>
<tr>
<td>開新檔案</td>
<td><code>Ctrl</code> + <code>N</code></td>
<td>-</td>
</tr>
<tr>
<td>開新VSCode視窗</td>
<td><code>Ctrl</code> + <code>Shift</code> + <code>N</code></td>
<td>-</td>
</tr>
<tr>
<td>關閉檔案/關閉窗格</td>
<td><code>Ctrl</code> + <code>W</code> or <code>Ctrl</code> + <code>F4</code></td>
<td>-</td>
</tr>
<tr>
<td>關閉所有檔案</td>
<td><code>Ctrl</code> + <code>k</code> or<code>Ctrl</code> + <code>W</code></td>
<td>-</td>
</tr>
<tr>
<td>關閉整個 VS Code</td>
<td><code>Ctrl</code> + <code>Shift</code> + <code>W</code></td>
<td>-</td>
</tr>
<tr>
<td><font color="#f00">快速搜尋檔案並開啟</font></td>
<td><code>Ctrl</code> + <code>P</code></td>
<td>註1</td>
</tr>
<tr>
<td><font color="#f00">命令列</font></td>
<td><code>F1</code> or <code>Ctrl</code> + <code>Shift</code> + <code>P</code></td>
<td>註1</td>
</tr>
<tr>
<td><font color="#f00">設定格式化Prettier套件</font></td>
<td>Ctrl + Shift + P &gt; 輸入format &gt; 設定預設Prettier格式化</td>
<td>-</td>
</tr>
<tr>
<td><font color="#f00">文件自動排版</font></td>
<td><code>Alt</code> + <code>Shift</code> + <code>F</code></td>
<td>註2</td>
</tr>
</tbody></table>
<p><strong>備註</strong></p>
<ol>
<li>開頭輸入 &gt; 為指令模式；沒有 &gt; 開頭時為搜尋檔名快速開啟。</li>
<li>可使用 Prettier 設定格式化排版，coding style 略有不同，使用自動排版務必謹慎。</li>
</ol>
<h3 id="面板開關-設定-編輯檢視設定"><a href="#面板開關-設定-編輯檢視設定" class="headerlink" title="面板開關/設定/編輯檢視設定"></a>面板開關/設定/編輯檢視設定</h3><table>
<thead>
<tr>
<th>指令說明</th>
<th>Windows 指令</th>
<th>備註</th>
</tr>
</thead>
<tbody><tr>
<td><font color="#f00">[VS Code] 放大</font></td>
<td><code>Ctrl</code> + <code>+</code></td>
<td>-</td>
</tr>
<tr>
<td><font color="#f00">[VS Code] 縮小</font></td>
<td><code>Ctrl</code> + <code>-</code></td>
<td>-</td>
</tr>
<tr>
<td>[Scroll Page ] 往上滾 / 往下滾</td>
<td><code>Ctrl</code> + <code>↑</code> / <code>↓</code></td>
<td>-</td>
</tr>
<tr>
<td>[面板開/關] 側欄</td>
<td><code>Ctrl</code> + <code>B</code></td>
<td>-</td>
</tr>
<tr>
<td>[面板開/關] 插件</td>
<td><code>Ctrl</code> + <code>Shift</code> + <code>X</code></td>
<td>-</td>
</tr>
<tr>
<td>[面板開/關] 終端機</td>
<td><code>Ctrl</code> + `</td>
<td>-</td>
</tr>
<tr>
<td>[面板控制] 新開終端機</td>
<td><code>Ctrl</code> + <code>Shift</code> + `</td>
<td>-</td>
</tr>
<tr>
<td>[面板控制] 分割視窗方式新開終端機</td>
<td><code>Ctrl</code> + <code>Shift</code> + <code>5</code></td>
<td>-</td>
</tr>
<tr>
<td>[面板開/關] 下方面版</td>
<td><code>Ctrl</code> + <code>J</code></td>
<td>-</td>
</tr>
<tr>
<td><font color="#f00">[切換開啟中的檔案] 當前窗格的</font></td>
<td><code>Alt</code> + <code>→</code> / <code>←</code></td>
<td>-</td>
</tr>
<tr>
<td>[切換開啟中的檔案] 列表往下選</td>
<td><code>Ctrl</code> + <code>tab</code></td>
<td>-</td>
</tr>
<tr>
<td>[切換開啟中的檔案] 列表往上選</td>
<td><code>Ctrl</code> + <code>Shift</code> + <code>tab</code></td>
<td>-</td>
</tr>
<tr>
<td>[切換檔案] 所在窗格的檔案</td>
<td><code>Alt</code> + <code>1</code> / <code>2</code></td>
<td>-</td>
</tr>
<tr>
<td>[切換檔案] 切換/新增第Ｎ個窗格</td>
<td><code>Ctrl</code> + <code>1</code> / <code>2</code></td>
<td>註1</td>
</tr>
<tr>
<td>[文檔檢視] 自動折行檢視</td>
<td><code>Alt</code> + <code>Z</code></td>
<td>註2</td>
</tr>
<tr>
<td>用戶設置</td>
<td><code>Ctrl</code> + <code>,</code></td>
<td>-</td>
</tr>
<tr>
<td>快速鍵設置</td>
<td><code>Ctrl</code> + <code>K</code> or<code>Ctrl</code> + <code>S</code></td>
<td>-</td>
</tr>
</tbody></table>
<p><strong>備註</strong></p>
<ol>
<li>沒有第Ｎ個分割窗格時等同於新開分割窗格</li>
<li>只是方便檢視,非編輯文檔本身</li>
</ol>
<h3 id="編輯-Code-快鍵-當前行-跳至行-…"><a href="#編輯-Code-快鍵-當前行-跳至行-…" class="headerlink" title="編輯 Code 快鍵 - 當前行/跳至行 …"></a>編輯 Code 快鍵 - 當前行/跳至行 …</h3><table>
<thead>
<tr>
<th>指令說明</th>
<th>Windows 指令</th>
<th>備註</th>
</tr>
</thead>
<tbody><tr>
<td>復原</td>
<td><code>Ctrl</code> + <code>Z</code></td>
<td>-</td>
</tr>
<tr>
<td>重做</td>
<td><code>Ctrl</code> + <code>Shift</code> + <code>Z</code></td>
<td>-</td>
</tr>
<tr>
<td>剪下</td>
<td><code>Ctrl</code> + <code>X</code></td>
<td>註1</td>
</tr>
<tr>
<td>複製</td>
<td><code>Ctrl</code> + <code>C</code></td>
<td>註1</td>
</tr>
<tr>
<td>貼上</td>
<td><code>Ctrl</code> + <code>V</code></td>
<td>-</td>
</tr>
<tr>
<td>[刪除] 該行</td>
<td><code>Ctrl</code> + <code>Shift</code> + <code>K</code></td>
<td>-</td>
</tr>
<tr>
<td><font color="#f00">[移動] 往上／下行移</font></td>
<td><code>Alt</code> + <code>↑</code> / <code>↓</code></td>
<td>-</td>
</tr>
<tr>
<td>[複製] 往上／下複製</td>
<td><code>Alt</code> + <code>Shift</code> + <code>↑</code> / <code>↓</code></td>
<td>-</td>
</tr>
<tr>
<td><font color="#f00">[縮排] 往後</font></td>
<td><code>tab]</code></td>
<td>-</td>
</tr>
<tr>
<td><font color="#f00">[縮排] 往前</font></td>
<td><code>Shift</code> + <code>tab]</code></td>
<td>-</td>
</tr>
<tr>
<td>註解</td>
<td><code>Ctrl</code> + <code>/</code></td>
<td>-</td>
</tr>
<tr>
<td><font color="#f00">[選取] 向下選取相同字</font></td>
<td><code>Ctrl</code> + <code>D</code></td>
<td>-</td>
</tr>
<tr>
<td><font color="#f00">重新命名符號</font></td>
<td><code>F2</code></td>
<td>-</td>
</tr>
<tr>
<td><font color="#f00">快速選取整行</font></td>
<td><code>Ctrl</code> + <code>L</code></td>
<td>-</td>
</tr>
<tr>
<td><font color="#f00">展開選取項目</font></td>
<td><code>shift</code> + <code>alt</code> + <code>→</code></td>
<td>-</td>
</tr>
</tbody></table>
<p><strong>備註</strong></p>
<ol>
<li>沒有選取字時也有效作用於整行</li>
</ol>
<p>參考:<a href="https://israynotarray.com/vscode/20210512/2779926364/">VSCode 的推薦實用設定</a>,<br><a href="https://www.casper.tw/development/2020/12/13/vscode-extension/">12 個前端愛用的 VSCode 擴充套件</a>,<br><a href="https://israynotarray.com/vscode/20191212/2147775133/">Visual Studio Code(VSCode) 開發者必備的實用套件</a>,<br><a href="https://eudora.cc/posts/31485/">列表常用的 VSCode 快速鍵。</a></p>
]]></content>
      <categories>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day1~Day5</title>
    <url>/2023/04/03/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay1-Day5/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-1"><a href="#🏅-Day-1" class="headerlink" title="🏅 Day 1"></a>🏅 Day 1</h2><p>在 JavaScript 中命名規範中，會建議使用駝峰式的命名，駝峰式的命名又分為大駝峰與小駝峰，可參考「<a href="https://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB">Wiki 上的介紹</a>」。大多數的情況來說，我們都會使用小駝峰來進行 JS 變數的命名。</p>
<p>如 <strong>我的名字</strong>可以使用 <code>myName</code> 的方式進行命名。另外，如果是函式時則會以動詞的方式作為開頭，如：<strong>繪製圖表</strong>使用 <code>renderChart</code> 的名稱。</p>
<a id="more"></a>
<p>以下請同學：</p>
<ol>
<li>宣告變數、函式，變數請給予值</li>
<li>變數名稱請用小駝峰的方式定義，並以非動詞作為開頭</li>
<li>函式請用動詞作為開頭</li>
</ol>
<h4 id="題目："><a href="#題目：" class="headerlink" title="題目："></a>題目：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">變數：</span><br><span class="line">1. 我的車子</span><br><span class="line">2. 註冊時間</span><br><span class="line">3. 清醒狀態</span><br><span class="line">4. 家裡的啤酒</span><br><span class="line">5. 啤酒品牌</span><br><span class="line"></span><br><span class="line">函式：</span><br><span class="line">1. 取得資料</span><br><span class="line">2. 上傳圖片</span><br><span class="line">3. 更新畫面</span><br><span class="line">4. 喝酒</span><br></pre></td></tr></table></figure>

<p>繳交範例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myCar = <span class="string">&#x27;卡斯伯的車&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//變數：</span></span><br><span class="line"><span class="number">1</span>) <span class="keyword">var</span> myCar= <span class="string">&quot;Maserati&quot;</span>; <span class="comment">//我的車子</span></span><br><span class="line"><span class="number">2</span>) <span class="keyword">var</span> registrationTime = <span class="string">&quot;20200615&quot;</span>; <span class="comment">//註冊時間</span></span><br><span class="line"><span class="number">3</span>) <span class="keyword">var</span> soberStatus = <span class="literal">true</span>; <span class="comment">//清醒狀態</span></span><br><span class="line"><span class="number">4</span>) <span class="keyword">var</span> beerAtHome = <span class="number">20</span>; <span class="comment">//家裡的啤酒</span></span><br><span class="line"><span class="number">5</span>) <span class="keyword">var</span> beerBrand = <span class="string">&quot;Corona&quot;</span> <span class="comment">//啤酒品牌</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函式：</span></span><br><span class="line"><span class="number">1</span>) <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;...&#125;; <span class="comment">//取得資料</span></span><br><span class="line"><span class="number">2</span>) <span class="function"><span class="keyword">function</span> <span class="title">uploadImg</span>(<span class="params"></span>)</span>&#123;...&#125;; <span class="comment">//上傳圖片</span></span><br><span class="line"><span class="number">3</span>) <span class="function"><span class="keyword">function</span> <span class="title">reloadScreen</span>(<span class="params"></span>)</span>&#123;...&#125;; <span class="comment">//更新畫面</span></span><br><span class="line"><span class="number">4</span>) <span class="function"><span class="keyword">function</span> <span class="title">drinkBeer</span>(<span class="params"></span>)</span>&#123;...&#125;; <span class="comment">//喝酒</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="🏅-Day-2"><a href="#🏅-Day-2" class="headerlink" title="🏅 Day 2"></a>🏅 Day 2</h2><p>物件中分為屬性及值，屬性可作為物件中的欄位名稱，而值是該屬性所代表的實際數值。其中 “屬性名稱” 在運作上都是以字串的形式儲存，因此只要是純文字，不管有沒有特殊符號都是可以運作的。</p>
<p>而物件中在取值時，最常使用的方式是點記號，不過點記號在存取時會有一些限制，當屬性名稱帶有特殊符號或數值時，就無法正確運作，所以除了點記號外還會利用變數、字串的方式取得值，概念如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; &#39;a&#39;;</span><br><span class="line">var obj &#x3D; &#123;</span><br><span class="line">  a: &#39;value A&#39;,</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 以下三種可取得相同值</span><br><span class="line">console.log(obj.a); &#x2F;&#x2F; 點記號</span><br><span class="line">console.log(obj[&#39;a&#39;]); &#x2F;&#x2F; 使用字串</span><br><span class="line">console.log(obj[a]); &#x2F;&#x2F; 使用變數</span><br></pre></td></tr></table></figure>

<p>請依照作業需求，使用不同的方式取得特定的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var b &#x3D; &#39;這是中文字&#39;;</span><br><span class="line"></span><br><span class="line">var arr &#x3D; &#123;</span><br><span class="line">  a: &#39;a&#39;,</span><br><span class="line">  1: &#39;b&#39;,</span><br><span class="line">  &#39;這是中文字&#39;: &#39;c&#39;,</span><br><span class="line">  &#39;b&#39;: &#39;d&#39;,</span><br><span class="line">  &#39;--some data&#39;: &#39;e&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(arr.a); &#x2F;&#x2F; &#39;a&#39;</span><br><span class="line">console.log();  &#x2F;&#x2F; 請取得結果為 b 的值</span><br><span class="line">console.log();  &#x2F;&#x2F; 請取得結果為 c 的值，必須使用變數</span><br><span class="line">console.log();  &#x2F;&#x2F; 請取得結果為 d 的值，必須使用點記號</span><br><span class="line">console.log();  &#x2F;&#x2F; 請取得結果為 e 的值</span><br></pre></td></tr></table></figure>

<h4 id="解答：-1"><a href="#解答：-1" class="headerlink" title="解答："></a>解答：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="built_in">console</span>.log(arr.a); <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) <span class="built_in">console</span>.log(arr[<span class="string">&#x27;1&#x27;</span>]); </span><br><span class="line">   <span class="built_in">console</span>.log(arr[<span class="number">1</span>]);  <span class="comment">// 請取得結果為 b 的值</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>) <span class="built_in">console</span>.log(arr[b]);  <span class="comment">// 請取得結果為 c 的值，必須使用變數</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>) <span class="built_in">console</span>.log(arr.b);  <span class="comment">// 請取得結果為 d 的值，必須使用點記號</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>) <span class="built_in">console</span>.log(arr[<span class="string">&#x27;--some data&#x27;</span>]);  <span class="comment">// 請取得結果為 e 的值</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="🏅-Day-3"><a href="#🏅-Day-3" class="headerlink" title="🏅 Day 3"></a>🏅 Day 3</h2><p>接續前一日的概念，請使用迴圈搭配陣列的方式，依序列出物件內所有的值。</p>
<ol>
<li>建立一個陣列，其中包含所有的屬性名稱</li>
<li>使用 for 迴圈或 forEach 依序陳列出結果為 ‘a’ ~ ‘e’ 的值</li>
</ol>
<p>迴圈參考：<a href="https://wcc723.github.io/javascript/2017/06/29/es6-native-array/">https://wcc723.github.io/javascript/2017/06/29/es6-native-array/</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;這是中文字&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;--some data&#x27;</span>: <span class="string">&#x27;e&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;這是中文字&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;--some data&#x27;</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迴圈方法</span></span><br><span class="line"><span class="built_in">console</span>.log(...); <span class="comment">// 請依序呈現出 “物件” 內的 a, b, c, d, e</span></span><br></pre></td></tr></table></figure>

<p>提示：</p>
<ol>
<li>物件屬性都是字串</li>
<li>使用 forEach 依序執行，並帶出物件內的值</li>
</ol>
<p>答題重點：必須帶出 <code>obj</code> 物件內的值<br><img src="https://i.imgur.com/oZ6AQJL.png"></p>
<h4 id="解答：-2"><a href="#解答：-2" class="headerlink" title="解答："></a>解答：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一：</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;這是中文字&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;--some data&#x27;</span>]; </span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj[item]);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.values 可以直接撈出所有屬性並使用 sort 排序</span></span><br><span class="line"><span class="built_in">Object</span>.values(obj).sort().forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">	arr.push(item);</span><br><span class="line">&#125;)</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班作業Day3" src="https://codepen.io/pvzfeusk/embed/MWKKNXb?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/MWKKNXb">
  JS直播班作業Day3</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<h2 id="🏅-Day-4"><a href="#🏅-Day-4" class="headerlink" title="🏅 Day 4"></a>🏅 Day 4</h2><p>真心鎮有一位 “小明”，是本系列故事的主角，生性害羞的他暗戀著大他五歲的 “漂亮阿姨”，在這個系列故事中就來看看 “小明” 能不能順利與 “漂亮阿姨” 表達愛慕之意，並且獲得正面的回覆喔 :D</p>
<p>任務：</p>
<ul>
<li>認識居民</li>
<li>在新建居民的函式內調整程式碼，使其回傳一個完整的物件資料</li>
<li>條件：<ul>
<li>不可操作全域的 town 變數</li>
<li>必須回傳一個結果</li>
<li>結果的 townData 必須與 town 相同（最後的相等）</li>
</ul>
</li>
<li>使用 Codepen、JSBin 等服務繳交任務<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var town &#x3D; &#123;</span><br><span class="line">  name: &#39;真心鎮&#39;,</span><br><span class="line">  resident: []</span><br><span class="line">&#125;</span><br><span class="line">var townData &#x3D; &#123;&#125;;</span><br><span class="line">var Ming &#x3D; &#123; name: &#39;小明&#39;, age: 16 &#125;;</span><br><span class="line">var Auntie &#x3D; &#123; name: &#39;漂亮阿姨&#39;, age: 21 &#125;;</span><br><span class="line"></span><br><span class="line">function addResident(t, res1, res2) &#123;</span><br><span class="line">  &#x2F;&#x2F; 可以修改的片段</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">townData &#x3D; addResident(town, Ming, Auntie);</span><br><span class="line">console.log(townData &#x3D;&#x3D;&#x3D; town);</span><br><span class="line">console.log(townData.resident); &#x2F;&#x2F; 包含真心鎮的居民陣列資料</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>測驗目標：</p>
<ul>
<li>瞭解參數、回傳等技巧</li>
<li>熟悉物件參考的特性</li>
<li>觀念在影音課程中的物件、函式章節內</li>
<li>如果遇到任何問題，試著透過團隊的形式討論</li>
</ul>
<p>結果範例：<br><img src="https://i.imgur.com/GAVpyNW.png"></p>
<h4 id="解答：-3"><a href="#解答：-3" class="headerlink" title="解答："></a>解答：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addResident</span>(<span class="params">t, res1, res2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//方法一：</span></span><br><span class="line">    t.resident.push(res1)</span><br><span class="line">    t.resident.push(res2)</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法二：</span></span><br><span class="line">    t.resident.push(res1, res2) <span class="comment">// push 可推入多個值</span></span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班作業Day4" src="https://codepen.io/pvzfeusk/embed/Vweawgz?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/Vweawgz">
  JS直播班作業Day4</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<hr>
<h2 id="🏅-Day-5"><a href="#🏅-Day-5" class="headerlink" title="🏅 Day 5"></a>🏅 Day 5</h2><p>情境：小明默默的喜歡大他五歲的漂亮阿姨，但小明膽子很小不敢直接說，因此想要透過暗號的方式傳遞訊息給漂亮阿姨。</p>
<ul>
<li>小明建立了一個暗號函式，傳入了一堆多餘的陣列，在解析後可以得到 ‘520’ 的結果。</li>
</ul>
<h4 id="初心者任務（完成此階段即算過關）："><a href="#初心者任務（完成此階段即算過關）：" class="headerlink" title="初心者任務（完成此階段即算過關）："></a>初心者任務（完成此階段即算過關）：</h4><ul>
<li>僅能修改以下 <code>/* */</code> 片段，並使回傳的值為 “520”（不需理會陣列內的值）</li>
</ul>
<h4 id="英雄任務："><a href="#英雄任務：" class="headerlink" title="英雄任務："></a>英雄任務：</h4><ul>
<li>僅能修改以下 <code>/* */</code> 片段</li>
<li>使用迴圈手法取出陣列內的 5, 2, 0 三個數值</li>
<li>使用陣列內的 5, 2, 0 組成一個新字串並回傳</li>
</ul>
<h4 id="團隊遊戲："><a href="#團隊遊戲：" class="headerlink" title="團隊遊戲："></a>團隊遊戲：</h4><p>已完成者，試著透過圖示說明這段函式及參數的<strong>傳遞流程</strong>，並分享給同組的成員。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123;</span><br><span class="line">  using: <span class="literal">true</span>,</span><br><span class="line">  number: <span class="number">5</span>,</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  using: <span class="literal">false</span>,</span><br><span class="line">  number: <span class="number">4</span>,</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  using: <span class="literal">false</span>,</span><br><span class="line">  number: <span class="number">3</span>,</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  using: <span class="literal">true</span>,</span><br><span class="line">  number: <span class="number">2</span>,</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  using: <span class="literal">false</span>,</span><br><span class="line">  number: <span class="number">1</span>,</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  using: <span class="literal">true</span>,</span><br><span class="line">  number: <span class="number">0</span>,</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saySomething</span>(<span class="params">cb, a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> cb(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = saySomething(<span class="comment">/* 只能在此插入程式碼 */</span>, arr);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 結果必須為 520</span></span><br></pre></td></tr></table></figure>

<p>這題因為比較難大家可以花些時間時間研究下 callback 的運作概念，如果不熟悉可不用急著今日回覆，試著閱讀以下文章並挑戰看看。</p>
<p>學習重點：</p>
<ul>
<li>callback function：<a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Callback_function">https://developer.mozilla.org/zh-TW/docs/Glossary/Callback_function</a></li>
<li>迴圈取值：<a href="https://wcc723.github.io/javascript/2017/06/29/es6-native-array/">https://wcc723.github.io/javascript/2017/06/29/es6-native-array/</a></li>
</ul>
<p>下期預告：漂亮阿姨接收到訊息後有什麼回覆呢！？</p>
<p>解答（請盡可能不要看解答回覆）：<a href="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2F202006%2F%E8%B2%BC%E4%B8%8A%E7%9A%84%E5%BD%B1%E5%83%8F_2020_6_12_%E4%B8%8A%E5%8D%8810_30.png?alt=media&token=a4e0b030-9fab-4e2b-993b-5c73f43b4cf6">參數及函式的運作圖</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = saySomething(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">item.using</span>)</span> &#123;</span><br><span class="line">      str += item.number;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;, arr); </span><br></pre></td></tr></table></figure>

<h4 id="解答"><a href="#解答" class="headerlink" title="解答:"></a>解答:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班Day5" src="https://codepen.io/pvzfeusk/embed/KKVMZNY?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/KKVMZNY">
  JS直播班Day5</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>參考: <a href="https://hackmd.io/@hexschool/HJDbvkFqU/%2FvmC0H8IbSWqm6oko9wyiHg">課程連結</a></p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day10</title>
    <url>/2023/04/05/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay10/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-10"><a href="#🏅-Day-10" class="headerlink" title="🏅 Day 10"></a>🏅 Day 10</h2><p>小明再怎麼樣隱匿，還是躲不過警方的搜查，在警方發現小明就是匯款者前，小明也先找到空檔逃離了真心鎮，傷心、難過的小明也因此一無所有。</p>
<p><img src="https://i.imgur.com/mcjuVUW.png"></p>
<a id="more"></a>
<p>離開真心鎮的小明在郊區遊蕩，身無分文、沒有求生技能的他，在六小時沒吃東西的情況下終於支撐不住，來到了一戶人家尋求協助，希望能夠填飽空腹已久的肚子，敲了敲門以後：</p>
<ul>
<li>一位年輕的女孩：請問是哪裡找呢？</li>
<li>小明：…</li>
<li>一位年輕的女孩：請問有什麼事嗎？</li>
<li>小明：…</li>
</ul>
<p>小明突然發現自己不能說話了！！沒有辦法跟女孩說到自己需要什麼，請協助小明說出自己的需求。</p>
<p>任務：</p>
<ul>
<li>請修正以下程式碼錯誤，並執行 console 的內容</li>
<li>請嘗試說明以下程式碼錯誤的原因</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> saySomething = <span class="string">&#x27;小姐我好餓啊～～～&#x27;</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(saySomething)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班Day10" src="https://codepen.io/pvzfeusk/embed/bGmbLxb?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/bGmbLxb">
  JS直播班Day10</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day12</title>
    <url>/2023/04/18/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay12/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-12-箭頭函式"><a href="#🏅-Day-12-箭頭函式" class="headerlink" title="🏅 Day 12(箭頭函式)"></a>🏅 Day 12(箭頭函式)</h2><p>透過 Let, Const 穩定自己的思緒後，小明開始體驗更為強力的 ES6 JS 語法，小美提到可以試著將複雜的 JavaScript 函式透過箭頭的方式進行簡化。</p>
<a id="more"></a>
<p>小明：什麼！箭頭也能當函式？<br>小美：沒錯，正確的運用下可以省略相當多的符號，將其濃縮成一行<br>小美：箭頭函式的運用技巧如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 傳統函式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saySomething</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;接招 &#x27;</span> + string; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轉成箭頭函式</span></span><br><span class="line"><span class="keyword">const</span> saySomething = <span class="function">(<span class="params">string</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;接招 &#x27;</span> + string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 當只有單行表達式時，可同時省略 return 及 &#123;&#125;</span></span><br><span class="line"><span class="comment">// 省略後依然保有回傳的特質</span></span><br><span class="line"><span class="keyword">const</span> saySomething = <span class="function">(<span class="params">string</span>) =&gt;</span> <span class="string">&#x27;接招 &#x27;</span> + string;</span><br><span class="line"><span class="built_in">console</span>.log(saySomething(<span class="string">&#x27;Go Go Power Ranger&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 當只有單一個參數時，可以省略參數外部的 ()</span></span><br><span class="line"><span class="comment">// 沒有參數、兩個以上都不能省略</span></span><br><span class="line"><span class="keyword">const</span> saySomething = <span class="function"><span class="params">string</span> =&gt;</span> <span class="string">&#x27;接招 &#x27;</span> + string;</span><br><span class="line"><span class="built_in">console</span>.log(saySomething(<span class="string">&#x27;Go Go Power Ranger&#x27;</span>));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>箭頭函式也可參考課程提供的<a href="https://courses.hexschool.com/courses/670037/lectures/12364949">影音教學</a></p>
</blockquote>
<p>任務：將以下的函式簡化（不影響結果的情況下進行最大簡化）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 題目：1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c = a + b;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 題目：2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num * num;</span><br><span class="line">&#125;<span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> d = square(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 題目：3</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;延遲 10 毫秒&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 題目：4</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 題目：5</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.fn(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班Day 12 (箭頭函式)" src="https://codepen.io/pvzfeusk/embed/eYJRpwg?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/eYJRpwg">
  JS直播班Day 12 (箭頭函式)</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day13</title>
    <url>/2023/04/30/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay13/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-13-解構"><a href="#🏅-Day-13-解構" class="headerlink" title="🏅 Day 13(解構)"></a>🏅 Day 13(解構)</h2><p>小美家無論是外觀或內部擺設都是一致的簡潔，如果一張椅子就足夠使用，家中絕不會出現第二張椅子，所以東西的數量都是剛剛好的狀態。看起來小美一個人在這邊住了一段時間，但小明的加入好像又剛剛好讓房子內有了第二份一樣，有了第二張椅子、第二張床、第二間房間、甚至是第二份餐點。</p>
<a id="more"></a>
<p>白吃白住的小明也常常感到疑惑，採買的食材明明只有一人份，小美卻能生出第二人份的餐點。這天，小明決定偷偷的看小美做了什麼事，讓小明也能一起享受這份美食。</p>
<p>小美將處理的食材細心排成一列，接下來列的另一個空間排好了牌子，碰的一聲！食材就變成了兩份。</p>
<p>小明！！</p>
<p>小美：不用偷偷看，這也是 ES6 的技巧</p>
<p>小明：你怎麼還沒教我</p>
<p>小美：因為一般人學會，會無視等價交換的法則</p>
<p>小明：那餐點一份變兩份，算等價交換嗎？</p>
<p>小美：不算</p>
<p>小明：…，那可以教我了嗎？</p>
<p>小美：可以</p>
<p>參考：</p>
<ul>
<li>解構文章：<a href="https://wcc723.github.io/javascript/2017/12/25/javascript-destructuring/">https://wcc723.github.io/javascript/2017/12/25/javascript-destructuring/</a></li>
<li>解構 MDN：<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a></li>
</ul>
<p>任務：</p>
<ul>
<li>依據提示將以下程式碼用解構方式達成目標</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 請使用解構組合使 arr2 變成為 [1, 2, 3, 4, 5, 6] 的結果</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [？, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]; <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請使用解構組合以下兩個陣列為 [1, 2, 3, 4, 5, 6] 的結果</span></span><br><span class="line"><span class="keyword">var</span> nums1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> nums2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> nums3 = ...</span><br><span class="line"><span class="built_in">console</span>.log(nums3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請使用解構，取出 name 及 age 的變數</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  age: <span class="number">16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 請使用解構，將以下陣列分別取出為獨立變數 Ming, Auntie, Jay, Mei</span></span><br><span class="line"><span class="keyword">var</span> people = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;漂亮阿姨&#x27;</span>, <span class="string">&#x27;杰倫&#x27;</span>, <span class="string">&#x27;小美&#x27;</span>];</span><br></pre></td></tr></table></figure>

<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班Day13 (ES6 解構賦值)" src="https://codepen.io/pvzfeusk/embed/RwrgrzP?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/RwrgrzP">
  JS直播班Day13 (ES6 解構賦值)</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day11</title>
    <url>/2023/04/17/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay11/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-11"><a href="#🏅-Day-11" class="headerlink" title="🏅 Day 11"></a>🏅 Day 11</h2><p>暫時失去了 JavaScript 能力的小明，流落到了真心鎮的郊外，在好心女孩的幫助下獲得些許的休息，也為幾小時沒有進食的胃得到了飽足。</p>
<p>經過介紹，這名女孩叫做小美，是少見未接受訓練就掌握 JS ES6 技能的神童，小美發現小明心煩意亂，雖然具有不錯的 JS 基礎，但是在煩躁的情況下沒有辦法輕鬆運用所學技巧。</p>
<a id="more"></a>
<p>ES6 的能力是屬於 JavaScript 升級版，能夠使用簡短的語法達到相同的功能，甚至更能夠減少原本 JavaScript 所發生的問題。因此，善良的小美決定傳授 ES6 的技巧給予小明，讓小明可以渡過這次的難關。</p>
<p>難過的小明也在小美家白吃白住了下來，並且開始學習 ES6 的技巧</p>
<p>第一關：透過 ES6 中的 let、const 穩固心境。</p>
<p>任務：</p>
<ul>
<li>觀看影音課程中的「Let, Const」兩個相關章節</li>
<li>將以下的<strong>變數改為使用 let, const 宣告</strong>，以符合後方的修改條件（不可都使用 let）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 請將此段 var 宣告改為 let, const</span></span><br><span class="line"><span class="keyword">var</span> Ming = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> MingAge = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">var</span> MingLocation = <span class="string">&#x27;真心鎮&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  location: <span class="string">&#x27;真心鎮&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> wallet = &#123;</span><br><span class="line">  money: <span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 需修改程式碼的結尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 後續程式碼，請藉此判斷使用 Let or Const</span></span><br><span class="line">MingLocation = <span class="string">&#x27;真心鎮郊外&#x27;</span>;</span><br><span class="line">person.location = <span class="string">&#x27;真心鎮郊外&#x27;</span>;</span><br><span class="line">wallet = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班Day 11" src="https://codepen.io/pvzfeusk/embed/GRYqOKo?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/GRYqOKo">
  JS直播班Day 11</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day15</title>
    <url>/2023/04/30/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay15/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-15-ES6-的縮寫"><a href="#🏅-Day-15-ES6-的縮寫" class="headerlink" title="🏅 Day 15(ES6 的縮寫)"></a>🏅 Day 15(ES6 的縮寫)</h2><p>來到鎮上的小明忘了自己被通緝的身份，傻傻的到在市集內採買所需要的蔬果，當採買完畢以後發現有幾位警察正在跟蹤他，小明想趁著到暗巷內結印準備施展開溜之術時，但越緊張的情況下越容易施展失敗（字數太多惹）。</p>
<p>在危急時刻，小美快速駕駛卡車出現，準備載走逃跑中的小明…</p>
<p>ES6 新增的縮寫方式，可以在運行結果相同的情況下，大幅減少程式碼的撰寫，可參考：</p>
<p><a href="https://wcc723.github.io/javascript/2017/12/23/javascript-short-hand/">https://wcc723.github.io/javascript/2017/12/23/javascript-short-hand/</a></p>
<a id="more"></a>
<p>任務：</p>
<ul>
<li>將以下的函式進行縮寫</li>
<li>將水果、剩餘的零錢及小明，透過縮寫加入到小美的卡車上</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = &#123;</span><br><span class="line">  watermelon: <span class="number">10</span>,</span><br><span class="line">  lemon: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> myMoney = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;拔腿跑&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> truck = &#123;</span><br><span class="line">  driver: <span class="string">&#x27;小美&#x27;</span>,</span><br><span class="line">  drive: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;快溜喔&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班Day 16(ES6 的縮寫)" src="https://codepen.io/pvzfeusk/embed/wvYqxGm?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/wvYqxGm">
  JS直播班Day 16(ES6 的縮寫)</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>每日JS題庫Day14</title>
    <url>/2023/04/30/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay14/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-14-其餘參數"><a href="#🏅-Day-14-其餘參數" class="headerlink" title="🏅 Day 14(其餘參數)"></a>🏅 Day 14(其餘參數)</h2><p>平常都是小美到鎮上採買，今天小美想將採買的工作交給小明處理。</p>
<p>小美：等等回到鎮上，幫忙看到賣檸檬的買三顆、西瓜買一顆、如果看到賣奇異果的買 10 顆，桌上的錢可以直接拿去用。</p>
<p>小明（建構函式中…）</p>
<p>小明：所以桌上有多少錢呢？</p>
<p>小美：你就拿去就對了</p>
<p>小明（苦惱中，不知如何建立此函式，但還是默默地準備出門）</p>
<p>小明出門前，發現了地上居然有一本 ES6 秘笈，打開後看到左上角標註著 “MDN” Logo，又恰巧是參數的那一頁…</p>
<p>（小美欣慰著看著小明點點頭，小明卻苦惱著不知道該怎麼辦）</p>
<a id="more"></a>
<p>參數預設值：<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/Default_parameters">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/Default_parameters</a></p>
<p>其餘參數：<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/rest_parameters">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/rest_parameters</a></p>
<p>任務：</p>
<ul>
<li>以下程式碼中僅能調整<strong>函式所設置的參數</strong></li>
<li>試著透過參數預設值及其餘參數的方式完成此範例</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myMoney = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// money 需要給予預設值 500</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMoney</span>(<span class="params">money</span>) </span>&#123;</span><br><span class="line">  myMoney = money;</span><br><span class="line">&#125;</span><br><span class="line">getMoney();</span><br><span class="line"></span><br><span class="line"><span class="comment">// fruits 是一個陣列</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buySomething</span>(<span class="params">fruits</span>) </span>&#123;</span><br><span class="line">  fruits.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;lemon&#x27;</span> === item) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;買 3 個檸檬&#x27;</span>);</span><br><span class="line">      myMoney -= <span class="number">60</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;watermelon&#x27;</span> === item &amp;&amp; !<span class="string">&#x27;賣奇異果的&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;買 1 個西瓜&#x27;</span>);</span><br><span class="line">      myMoney -= <span class="number">40</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;watermelon&#x27;</span> === item &amp;&amp; <span class="string">&#x27;賣奇異果的&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;買 10 個西瓜&#x27;</span>);</span><br><span class="line">      myMoney -= <span class="number">400</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`小明剩下 <span class="subst">$&#123;myMoney&#125;</span> 元`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buySomething(<span class="string">&#x27;lemon&#x27;</span>, <span class="string">&#x27;watermelon&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班每日任務Day 14(參數預設值、其餘參數)" src="https://codepen.io/pvzfeusk/embed/eYJELOJ?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/eYJELOJ">
  JS直播班每日任務Day 14(參數預設值、其餘參數)</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>每日JS題庫Day16</title>
    <url>/2023/04/30/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay16/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-16-Vue-2創建資料"><a href="#🏅-Day-16-Vue-2創建資料" class="headerlink" title="🏅 Day 16(Vue 2創建資料)"></a>🏅 Day 16(Vue 2創建資料)</h2><p>真心鎮的警備隊在小明進入城鎮時，就開始部署大量的警力，準備抓捕小明。小明雖然很快速地搭上小美的卡車，但後方的警力依然不斷的追上，就算是掌握 ES6 技能的小美也難以應對這麼大量的警力…</p>
<p>小美：沒辦法了，只好用出這招（從背後拿出大捲軸攤開）</p>
<p><img src="https://i.imgur.com/R6EGW8Y.png"></p>
<a id="more"></a>
<p>小明：J 格是….</p>
<p>小美：這是基於 JS 能力所封印的捲軸，解開以後可以快速的運用各種術</p>
<p>小美：你來開車，我來阻止他們！</p>
<p>小明：可是我沒駕照啊～～～</p>
<p>小美拍了小明肩膀說：「沒關係，我也沒有」，說完話後立刻轉身後飛躍到卡車後方，開始進行 Vue 的術式。</p>
<h4 id="任務"><a href="#任務" class="headerlink" title="任務"></a>任務</h4><ul>
<li>閱讀<a href="https://hackmd.io/@hexschool/S1DJeKTdL/%2FRhud3_1PR9qv1RJyMfwUmA">課前預習</a></li>
<li>測驗 1：將小美所準備好的 Vue 資料呈現於畫面上（只能操作 HTML）<br><a href="https://codepen.io/Wcc723/pen/jOWLdeZ">https://codepen.io/Wcc723/pen/jOWLdeZ</a></li>
<li>測驗 2：小明也要玩玩看：前方已經有小美所準備好的 <code>&#123;&#123; &#125;&#125;</code>，請試著把 data 補上，讓畫面可運作<br><a href="https://codepen.io/Wcc723/pen/OJMjdap">https://codepen.io/Wcc723/pen/OJMjdap</a></li>
</ul>
<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班Day16(Vue創建資料)" src="https://codepen.io/pvzfeusk/embed/QWyqdZz?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/QWyqdZz">
  JS直播班Day16(Vue創建資料)</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>JS</category>
      </categories>
  </entry>
  <entry>
    <title>每日JS題庫Day6</title>
    <url>/2023/04/04/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay6/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-6"><a href="#🏅-Day-6" class="headerlink" title="🏅 Day 6"></a>🏅 Day 6</h2><p>小明在傳送 520 給漂亮阿姨後，漂亮阿姨沒有任何回應，且對小明見面一如過往，像是沒有發生任何事一樣。小明因此與朋友「阿群」討教，解釋一番來龍去脈以後詢問為什麼會這樣？</p>
<p>阿群回應說：你的表達是不是出了問題？</p>
<p>小明思考著：表達是不是出了問題？表達是出了問題？表達式出了問題！！</p>
<p>因此小明道別了阿群，立馬再去研究表達式的運作。</p>
<p>JS 運作中可以見到許多都是表達式，包含函式的呼叫也都是表達式，最大的特點就是表達式會「回傳一個值」（詳細可見課前影音教學「陳述式與表達式」）。因為這樣的特點，表達式可以用在任何需要帶上值的程式碼片段，例如條件判斷、值的賦予、結果取得等等。</p>
<p>今天的任務，同學們就來幫小明找找，有哪些表達式的運作範例吧</p>
<a id="more"></a>
<p>任務：</p>
<ul>
<li>尋找 MDN 或任何框架中<strong>可插入表達式的片段</strong>（關鍵字：expression）</li>
<li>將 <code>sayYouLoveMe()</code> 的函式呼叫置入於該片段中，並簡短描述運作概念</li>
<li>提交<strong>文件連結及程式碼片段</strong>（或者使用 Codepen 提交），並與同組成員分享</li>
</ul>
<p><code>sayYouLoveMe</code> 函式，回傳值可自行調整。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function sayYouLoveMe() &#123;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>範例 1：</p>
<p>if 判斷式：<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/if...else#%E8%AA%9E%E6%B3%95">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/if…else#語法</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function sayYouLoveMe() &#123;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (sayYouLoveMe()) &#123; console.log(&#39;說你愛我&#39;) &#125;;</span><br><span class="line">&#x2F;&#x2F; 當判斷式接收到 sayYouLoveMe() 回傳 true 的結果時，則會運行接下來的陳述片段</span><br></pre></td></tr></table></figure>

<p>範例 2：</p>
<p>三元運算子：<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Conditional_Operator</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function sayYouLoveMe() &#123;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sayYouLoveMe() ? &#39;愛我&#39; : &#39;不愛我&#39;);</span><br><span class="line">&#x2F;&#x2F; sayYouLoveMe() 執行後回傳 true，接下來則會執行前者 &#39;愛我&#39; 的結果</span><br></pre></td></tr></table></figure>

<p>測驗目標：</p>
<ul>
<li>認識表達式</li>
<li>了解表達式可運作情境</li>
</ul>
<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班作業Day6" src="https://codepen.io/pvzfeusk/embed/rNxMemm?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/rNxMemm">
  JS直播班作業Day6</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day7</title>
    <url>/2023/04/04/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay7/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-7"><a href="#🏅-Day-7" class="headerlink" title="🏅 Day 7"></a>🏅 Day 7</h2><p>漂亮阿姨接收到小明的 “520” 訊息以後，嘗試把 “我只是把你當朋友” 回覆給小明知道，但神邏輯的小明一直誤解這段話的意思：</p>
<ul>
<li>漂亮阿姨回訊：你是一個善良的好人，但我們只是朋友</li>
<li>小明解讀：你愛我的善，我喜歡你的良</li>
<li>漂亮阿姨回訊：你和我永遠都不會交錯</li>
<li>小明解讀：你愛我不會錯，我也會愛你到永遠<a id="more"></a>
雖然很殘忍，但請協助小明理解這段話的意思：</li>
</ul>
<p>JS 是屬於弱型別的的程式語言，也因為如此在開發上很容易遇到誤會。請撰寫一段 JS 並完成以下條件：</p>
<h3 id="任務"><a href="#任務" class="headerlink" title="任務"></a>任務</h3><ol>
<li>取得範例中的 input DOM 元素，並且取得其中的值</li>
<li>將值定義成變數命名為 value</li>
<li>使以下判斷式驗證執行 else 的結果</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (value !== <span class="number">520</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;漂亮阿姨喜歡小明&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;漂亮阿姨只是小明的普通朋友&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>範例程式碼：<a href="https://jsbin.com/kucugonuzu/2/edit?html,js">https://jsbin.com/kucugonuzu/2/edit?html,js</a></p>
<p>練習重點：</p>
<ul>
<li>取得畫面上的 dom（DOM 結構上取得的都是字串）</li>
<li>將字串轉型</li>
</ul>
<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班作業6/16：Day 7" src="https://codepen.io/pvzfeusk/embed/QWyGOPO?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/QWyGOPO">
  JS直播班作業6/16：Day 7</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day8</title>
    <url>/2023/04/04/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay8/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-8"><a href="#🏅-Day-8" class="headerlink" title="🏅 Day 8"></a>🏅 Day 8</h2><p>終於搞懂回覆的小明相當難過，認為是自己沒有付出<strong>誠意</strong>，所以才會被漂亮阿姨拒絕，因此決定匯款給予漂亮阿姨，以示自己的真心。</p>
<p>匯款的費用小明打算加總為 77777，用此幸運數字希望漂亮阿姨開心。</p>
<p>（註：小明的錢是哪來的？請參考新手篇）</p>
<a id="more"></a>
<h3 id="任務"><a href="#任務" class="headerlink" title="任務"></a>任務</h3><ul>
<li>將 MingMoneyTransfer 的資料依序加入於 Auntie 的 depositRecord 內</li>
<li>加總 depositRecord 內的數值</li>
<li>將加總的數值加入至 deposit 上</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Auntie = &#123;</span><br><span class="line">  name: <span class="string">&#x27;漂亮阿姨&#x27;</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  deposit: <span class="number">10000</span>,</span><br><span class="line">  depositRecord: [</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">&#x27;開戶&#x27;</span>,</span><br><span class="line">      amounts: <span class="number">10000</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MingMoneyTransfer = [</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">&#x27;漂亮姨姨&#x27;</span>,</span><br><span class="line">    amounts: <span class="number">777</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">&#x27;我是&#x27;</span>,</span><br><span class="line">    amounts: <span class="number">7000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">&#x27;真心的&#x27;</span>,</span><br><span class="line">    amounts: <span class="number">70000</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>練習重點：</p>
<ul>
<li>迴圈技巧</li>
<li>陣列、物件控制</li>
</ul>
<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班作業 6/17：Day 8" src="https://codepen.io/pvzfeusk/embed/MWKbMPr?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/MWKbMPr">
  JS直播班作業 6/17：Day 8</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day9</title>
    <url>/2023/04/05/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay9/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-9"><a href="#🏅-Day-9" class="headerlink" title="🏅 Day 9"></a>🏅 Day 9</h2><p>漂亮阿姨收到轉帳資料後並不清楚是小明所轉帳的，除了對於來路不明的費用感到困擾，也想找出究竟是誰匯款給她，因此報警處理此事件。</p>
<p>小明在家中準備打電話跟漂亮阿姨說明此事時，門外卻來了正準備打聽「漂亮阿姨不明款項案件」的警察…。</p>
<a id="more"></a>
<p>警察：「請問小明先生在家嗎？」</p>
<p>小明：「我是小明」</p>
<p>警察：「漂亮阿姨最近有不明的款項，請問你知道是誰匯的呢？」</p>
<p>小明一心想要親自告訴漂亮阿姨，因此沒有承認卻激動的回覆：「不明款項！？那才不是不明款項勒！！」</p>
<p>警察：「為什麼你一口咬定不是不明款項呢？」</p>
<p>小明：「說不是就不是！」</p>
<p>警察：「看來你最可疑，搜！」</p>
<p>心想不妙的小明，一定要避免這件事情曝光，但匯款紀錄就在家中遲早會被搜出，請協助小明度過這次難關。</p>
<p>物件、陣列有傳遞參考的特性，因此兩個相同參考的物件、陣列最後比對時會完全相等，請查看影音課程中的「物件的參考特性」相關章節解決此問題：</p>
<h3 id="任務"><a href="#任務" class="headerlink" title="任務"></a>任務</h3><ul>
<li>僅能調整 <code>var MingMoneyTransferRecord = ...</code> 後方的賦予方法，使兩個變數的參考不同</li>
<li>使最後的 <code>MingMoneyTransferRecord === Auntie.depositRecord</code> 的結果為 false</li>
<li><code>MingMoneyTransferRecord</code> 格式必須不變</li>
</ul>
<h3 id="挑戰項目："><a href="#挑戰項目：" class="headerlink" title="挑戰項目："></a>挑戰項目：</h3><ul>
<li>組員間的方法盡可能都不同</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Auntie = &#123;</span><br><span class="line">  name: <span class="string">&#x27;漂亮阿姨&#x27;</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  deposit: <span class="number">10000</span>,</span><br><span class="line">  depositRecord: [</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">&#x27;小明匯款紀錄&#x27;</span>,</span><br><span class="line">      amounts: <span class="number">77777</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MingMoneyTransferRecord = Auntie.depositRecord;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(MingMoneyTransferRecord);</span><br><span class="line"><span class="built_in">console</span>.log(MingMoneyTransferRecord === Auntie.depositRecord);</span><br></pre></td></tr></table></figure>
<p>重點觀念：</p>
<ul>
<li>物件參考觀念</li>
<li>物件解除參考運用</li>
</ul>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答:"></a>解答:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班 6/18作業" src="https://codepen.io/pvzfeusk/embed/GRorRgL?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/GRorRgL">
  JS直播班 6/18作業</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day18</title>
    <url>/2023/05/01/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay18/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-18-Vue-2-v-for"><a href="#🏅-Day-18-Vue-2-v-for" class="headerlink" title="🏅 Day 18(Vue 2: v-for)"></a>🏅 Day 18(Vue 2: v-for)</h2><p>在越過幾個路口後，警力居然還可以不斷的出現，區區一個亂匯款應不會造成這麼麻煩的結果，但在危機時刻，小美已經沒辦法思考這麼複雜的問題。</p>
<p>小美：你的手遊抽卡運氣如何？</p>
<p>小明：非洲人是我</p>
<p>小美：不管了，非洲過去就是歐洲，試著將抽出的卡片釋放出來吧</p>
<h4 id="任務："><a href="#任務：" class="headerlink" title="任務："></a>任務：</h4><ul>
<li>閱讀 v-for 的<a href="https://hackmd.io/@hexschool/S1DJeKTdL/%2FKWXW13ewTaq2M_svlEAYXA">課前預習</a>：</li>
<li>將 data 內的英雄卡片呈現於畫面上（請一定要加入 :key 才算完成任務）<a id="more"></a>
測驗：<a href="https://codepen.io/Wcc723/pen/KKVvExY?editors=1010">https://codepen.io/Wcc723/pen/KKVvExY?editors=1010</a></li>
</ul>
<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班每日任務Day18(Vue v-for)" src="https://codepen.io/pvzfeusk/embed/zYrpvxL?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/zYrpvxL">
  JS直播班每日任務Day18(Vue v-for)</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day17</title>
    <url>/2023/05/01/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay17/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-17-Vue-2-v-bind"><a href="#🏅-Day-17-Vue-2-v-bind" class="headerlink" title="🏅 Day 17(Vue 2: v-bind)"></a>🏅 Day 17(Vue 2: v-bind)</h2><p>簡單的幾個術式雖可以阻擋一些前來的警力，但小美預先準備的大括號 <code>&#123;&#123; &#125;&#125;</code> 數量不夠，所以接下來難以用相同方式產生阻礙。</p>
<p>小美：接下來需要就地取材了…</p>
<p>小明：就地取材!?</p>
<h4 id="任務："><a href="#任務：" class="headerlink" title="任務："></a>任務：</h4><ul>
<li>閱讀 <a href="https://hackmd.io/@hexschool/S1DJeKTdL/%2FdxbCu6YTTh2q-Z0p1vWSjw">v-bind</a> 的章節</li>
<li>將資料中的圖片網址加入到 img 標籤，圖片 imgAlt 則加入到 alt 屬性上（可使用縮寫 <code>:</code> 的形式）</li>
<li>將內層的 div 標籤加上動態切換的 class 屬性，條件為 <code>isChecked</code> ，className 為 .river<a id="more"></a>
測驗：<a href="https://codepen.io/Wcc723/pen/QWyMYza">https://codepen.io/Wcc723/pen/QWyMYza</a></li>
</ul>
<h4 id="繳交作業說明："><a href="#繳交作業說明：" class="headerlink" title="繳交作業說明："></a>繳交作業說明：</h4><p>請 fork 課程中所提供的 Codepen，並以 iframe 的方式內嵌於團隊內的 HackMD</p>
<p><img src="https://i.imgur.com/uD7iszx.png"></p>
<p>iframe 範例（同上，選擇右下方的 Embed 的 iframe 選項）</p>
<iframe height="265" style="width: 100%;" scrolling="no" title="Vue 將資料呈現於畫面上" src="https://codepen.io/Wcc723/embed/jOWLdeZ?height=265&theme-id=light&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/Wcc723/pen/jOWLdeZ'>Vue 將資料呈現於畫面上</a> by Wcc723
  (<a href='https://codepen.io/Wcc723'>@Wcc723</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>難以飛躍的 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>轉角遇到 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    rock: <span class="string">&#x27;巨大的岩石&#x27;</span>,</span><br><span class="line">    wall: <span class="string">&#x27;牆壁&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="學習重點"><a href="#學習重點" class="headerlink" title="學習重點"></a>學習重點</h4><ul>
<li>著重在 Vue 的 <strong>語法認識</strong></li>
<li>運作的觀念會在直播課程中做介紹</li>
</ul>
<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班Day17(Vue 動態屬性)" src="https://codepen.io/pvzfeusk/embed/vYLeoRr?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/vYLeoRr">
  JS直播班Day17(Vue 動態屬性)</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day19</title>
    <url>/2023/05/01/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay19/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-19-Vue-2-v-on"><a href="#🏅-Day-19-Vue-2-v-on" class="headerlink" title="🏅 Day 19(Vue 2: v-on)"></a>🏅 Day 19(Vue 2: v-on)</h2><p>透過幾個英雄卡片的協助，小明與小美終於擺脫了真心鎮警力的追捕，不過謹慎的小美決定在家裡的周圍擺上陷阱，避免夜間時遭受偷襲。</p>
<p>任務：</p>
<ul>
<li>閱讀 v-on 的課前<a href="https://hackmd.io/@hexschool/S1DJeKTdL/%2FvMG7FM1GSBafDKCZXuylCw">預習章節</a></li>
<li>將陷阱事件綁定於 button 標籤上（可使用縮寫的形式）</li>
</ul>
<p>測驗：<a href="https://codepen.io/Wcc723/pen/WNrEmqW?editors=1010">https://codepen.io/Wcc723/pen/WNrEmqW?editors=1010</a></p>
<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班Day19(Vue v-on)" src="https://codepen.io/pvzfeusk/embed/wvMpojB?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/wvMpojB">
  JS直播班Day19(Vue v-on)</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>每日切版題庫Day1</title>
    <url>/2023/05/01/%E6%AF%8F%E6%97%A5%E5%88%87%E7%89%88%E9%A1%8C%E5%BA%ABDay1/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-1"><a href="#🏅-Day-1" class="headerlink" title="🏅 Day 1"></a>🏅 Day 1</h2><h2 id="HTML-語意標籤運用"><a href="#HTML-語意標籤運用" class="headerlink" title="HTML 語意標籤運用"></a>HTML 語意標籤運用</h2><p>語意標籤可以增加可讀性，透過閱讀標籤就了解該區塊的意思，幫助搜尋引擎以及瀏覽器的顯示跟搜尋。</p>
<a id="more"></a>
<h3 id="基本-HTML-標籤介紹"><a href="#基本-HTML-標籤介紹" class="headerlink" title="基本 HTML 標籤介紹"></a>基本 HTML 標籤介紹</h3><p><strong>h1 ~ h6</strong><br>一個網頁一定會有一個 h1 標籤，用來標示網頁中最重要的資訊。其餘 h2 ~ h6 依照重要性依序使用。</p>
<p><strong>img</strong><br>圖片使用 img 標籤，圖片位址放在標籤內 src 屬性中。<br>將 alt 屬性內補上描述，當圖片失效時可以呈現出文字，讓使用者可以了解原本圖片的意義。</p>
<p><strong>a</strong><br>連結使用 a 標籤，網址連結放在標籤內 href 屬性中。<br>當目前沒有要連至特定網頁時可以設定為 <code>&lt;a href=&quot;#&quot;&gt; ... &lt;/a&gt;</code></p>
<p><strong>p</strong><br>一個段落、一句話 .. 都可以使用，<br>讓文字具有語意。</p>
<p><strong>ul li、ol li</strong><br>ul、ol 的子層只能是 li。<br>條列式項目、清單、選單、產品陳列等等都可以使用 ul li 列表結構，<br>若是該列表有順序則可以使用 ol li 結構。</p>
<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>請複製此 <a href="https://codepen.io/hexschool/pen/OJQGKPY?editors=1000">Codepen</a> ，修正 HTML 標籤運用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>網頁切版直播班<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS 技術全都要<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!-- 調整標題標籤（一個網頁只會有一個 h1） --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>由淺入深的課程大綱<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>這門課程，我們是以「 業界常見版型主題 」為導向，來規劃我們的課綱，讓您上完課後，就能夠開始動手練版型。<span class="tag">&lt;/<span class="name">h4</span>&gt;</span> <span class="comment">&lt;!-- 調整標籤 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>第一週：1 px 也不差的版型控制術<span class="tag">&lt;/<span class="name">h5</span>&gt;</span> <span class="comment">&lt;!-- 調整標題標籤（標題標籤依照重要性依序使用） --&gt;</span></span><br><span class="line">在排版時，常常為了幾 px 的位移或跑版而傷透腦筋嗎？其實只要掌握幾個關鍵知識，你也能切出精準到位的版型！<span class="comment">&lt;!-- 新增標籤 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>第八週：CSS 模組化管理<span class="tag">&lt;/<span class="name">h5</span>&gt;</span> <span class="comment">&lt;!-- 調整標題標籤（標題標籤依照重要性依序使用） --&gt;</span></span><br><span class="line">一個成熟的前端介面，不論是版型管理、語法支援度、元件應用都得顧及到位，本週將會詳細介紹各角度的技術詮釋，以做為完美的收尾。 <span class="comment">&lt;!-- 新增標籤 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>授課內容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="comment">&lt;!-- 調整位置 --&gt;</span></span><br><span class="line">  開課日期：2022 7/8(五) <span class="comment">&lt;!-- 新增標籤（ul 的子層） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>授課時段：7/8～8/31 每週三跟五，共 16 堂<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>教學時數：每堂 1.5 ~ 2.5 小時，共 16 堂，總計 36 小時<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">src</span>=<span class="string">&quot;https://zoom.us/webinar/register/WN_RINyZud-QGyJgk-gaWQL9A&quot;</span>&gt;</span>直播教室<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!-- 新增標籤（ul 的子層）、調整 a 標籤內屬性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.hexschool.com/images/web-layout-training/web-layout-training-banner-2022.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="comment">&lt;!-- alt 屬性文字描述 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解答：<a href="https://codepen.io/hexschool/pen/jOZRgLM">https://codepen.io/hexschool/pen/jOZRgLM</a></p>
<iframe height="300" style="width: 100%;" scrolling="no" title="Day 1 - HTML 語意標籤運用" src="https://codepen.io/pvzfeusk/embed/eYPGYQm?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/eYPGYQm">
  Day 1 - HTML 語意標籤運用</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>

<p>Ray 大對於語意標籤的詳細解說：</p>
<blockquote>
<p>語意化用途在於 可讀性 以及讓 機器 可以透過閱讀標籤就了解該區塊的意思（因此這攸關也就是 SEO 製作上要注意的其中一點)</p>
<p>對於電腦來講有明確告知是比較好也比較清楚，因此全自幹 <div> 對於搜尋引擎爬蟲（搜尋引擎機器人）來講就是無意義的東西，或者是錯的地方使用錯誤的標籤，那就也是無意義，因為這會導致搜尋引擎不知道該如何正確分類，概念就跟錯誤的時間遇到對的人一樣那叫小三，所以要在對的時間遇到對的人，這樣才是能夠長長久久。</p>
<p>除此之外 HTML 標籤其實也是在跟瀏覽器說這裡該顯示什麼以及該渲染什麼樣子、呈現什麼，因此給予正確的標籤以及正確的使用是可以幫助搜尋引擎以及瀏覽器的顯示跟搜尋</p>
<p>對於人(工程師)來講，則可以透過閱讀標籤就知道該區塊的意義以及用途</p>
<p>因此</p>
<p>這就是為什麼語意化標籤 (HTML5) 會這麼重要以及如何寫出好的 HTML 心法</p>
</blockquote>
<p>來源：<a href="https://www.hexschool.com/courses/web-layout-training-1st.html">https://www.hexschool.com/courses/web-layout-training-1st.html</a></p>
]]></content>
      <categories>
        <category>每日切版題庫</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day20</title>
    <url>/2023/05/01/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay20/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-20-Vue-2-v-model"><a href="#🏅-Day-20-Vue-2-v-model" class="headerlink" title="🏅 Day 20(Vue 2: v-model)"></a>🏅 Day 20(Vue 2: v-model)</h2><p>小美與小明在真心鎮的郊外，深知此地不能久留，所以決定使用 Vue 的能力創建個人資料表單，並打算使用新的身份離開這個傷心地…</p>
<p>小明：漂亮阿姨，相信我們還會再相見…</p>
<p>任務：</p>
<ul>
<li>閱讀 v-model 表單的課前<a href="https://hackmd.io/@hexschool/S1DJeKTdL/%2Fjum_IOrASCWevidlnIAsOg">預習章節</a></li>
<li>完成表單功能並將小明賦予上新的身份吧</li>
</ul>
<p>測驗：<a href="https://codepen.io/Wcc723/pen/xxZLBMR?editors=1010">https://codepen.io/Wcc723/pen/xxZLBMR?editors=1010</a></p>
<a id="more"></a>
<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><iframe height="300" style="width: 100%;" scrolling="no" title="JS直播班Day20(Vue v-model)" src="https://codepen.io/pvzfeusk/embed/BajJOdx?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/BajJOdx">
  JS直播班Day20(Vue v-model)</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>每日切版題庫Day2</title>
    <url>/2023/05/01/%E6%AF%8F%E6%97%A5%E5%88%87%E7%89%88%E9%A1%8C%E5%BA%ABDay2/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-2"><a href="#🏅-Day-2" class="headerlink" title="🏅 Day 2"></a>🏅 Day 2</h2><h2 id="移除img圖片空隙"><a href="#移除img圖片空隙" class="headerlink" title="移除img圖片空隙"></a>移除img圖片空隙</h2><p>嘗試在 .img 內加入 CSS 語法將圖片下的空白部分移除</p>
<a id="more"></a>
<p><a href="https://codepen.io/hexschool/pen/mdXZJar">示意</a>：<br><img src="https://i.imgur.com/VggWh0X.png"></p>
<blockquote>
<p>圖片下方與 p 標籤會有一小部分空隙</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img class&#x3D;&quot;img&quot; src&#x3D;&quot;https:&#x2F;&#x2F;ithelp.ithome.com.tw&#x2F;storage&#x2F;image&#x2F;logo.svg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;p&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo nostrum officiis aspernatur.&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提示：<a href="https://tzuhui.github.io/2020/01/08/HTML/html-img-blank/">img 下方不明空隙</a></p>
<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><p>緣由<br>因 img 預設是 inline- block 元素，inline / inline-block / table-cell 元素都可以設定 vertical-align 屬性，而 vertical-align 屬性預設值是 baseline，baseline 的設定會讓文字和其父元素的基（準）線對齊，這條基線會和最下方有些空間，是因英文中像是小寫 g j p q y，會超出基線以下，數字像是 3 4 5 7 9 也會有小部分在基線下<br>img 圖片也會在這基線上，因此也會留有基線下的小空間</p>
<p>加上</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123; </span><br><span class="line">  <span class="attribute">vertical-align</span>: top | bottom | text-top | text-bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123; </span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>參考: <a href="https://tzuhui.io/2020/01/08/HTML/html-img-blank/">葉子助教</a></p>
]]></content>
      <categories>
        <category>每日切版題庫</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>每日切版題庫Day3</title>
    <url>/2023/05/01/%E6%AF%8F%E6%97%A5%E5%88%87%E7%89%88%E9%A1%8C%E5%BA%ABDay3/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-3"><a href="#🏅-Day-3" class="headerlink" title="🏅 Day 3"></a>🏅 Day 3</h2><h2 id="CSS-選擇器運用"><a href="#CSS-選擇器運用" class="headerlink" title="CSS 選擇器運用"></a>CSS 選擇器運用</h2><h3 id="類別選擇器"><a href="#類別選擇器" class="headerlink" title="類別選擇器"></a>類別選擇器</h3><p>在 HTML 標籤命名 class（一個 HTML 標籤可以有多個 class），<br>並在 CSS 中運用 <code>.</code> 來設定樣式。像是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class&#x3D;&quot;text&quot;&gt;類別選擇器&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="擬態選擇器"><a href="#擬態選擇器" class="headerlink" title="擬態選擇器"></a>擬態選擇器</h3><ul>
<li><strong>:hover</strong> : 滑鼠滑過時的樣式</li>
<li><strong>:active</strong> : 滑鼠按下的樣式</li>
<li><strong>:focus</strong> : 聚焦時的樣式<a id="more"></a>
通常運用在連結、按鈕、表單輸入，可以增加使用者體驗</li>
</ul>
<h3 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h3><p>請運用類別選擇器，將下方標籤呈現出如圖中的樣式，<br><img src="https://i.imgur.com/jhNfYFe.png"></p>
<p>並嘗試自行運用 hover、active、focus 來改變樣式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;&quot;&gt; CSS 選擇器運用 &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<iframe height="300" style="width: 100%;" scrolling="no" title="Day3 CSS 選擇器運用" src="https://codepen.io/pvzfeusk/embed/bGmoNab?default-tab=html" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/pvzfeusk/pen/bGmoNab">
  Day3 CSS 選擇器運用</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>]]></content>
      <categories>
        <category>每日切版題庫</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>每日JS題庫Day21</title>
    <url>/2023/05/01/%E6%AF%8F%E6%97%A5JS%E9%A1%8C%E5%BA%ABDay21/</url>
    <content><![CDATA[<h1 id="💪-每日任務題目列表"><a href="#💪-每日任務題目列表" class="headerlink" title="💪 每日任務題目列表"></a>💪 每日任務題目列表</h1><h2 id="🏅-Day-21-Vue-2-props"><a href="#🏅-Day-21-Vue-2-props" class="headerlink" title="🏅 Day 21(Vue 2: props)"></a>🏅 Day 21(Vue 2: props)</h2><p>上回回顧：面臨真心鎮警衛隊追殺之際，小明與小美即將離開真心鎮，重新過上新的生活。</p>
<p>離開前，小明希望可以留給漂亮阿姨一些話，同時解決這段時間所產生的誤會。突然一個陌生的圓手，拿出了 Vue 傳呼機。</p>
<p>小明：J 個是…</p>
<p>陌生的圓手：這是 Vue 的傳呼機，可以用來遠距離通訊使用，不過有點故障，就送給你吧。</p>
<p>說完，這隻手就消失在這個故事裡，並找劇組領了便當回家用餐。</p>
<p>透過小明的研究，了解到這個傳呼機與最近研究的 Vue 是屬於同一個技術，覺得花些時間修正錯誤，將心裡的訊息傳遞給漂亮阿姨知道。</p>
<p>任務：</p>
<ul>
<li>了解 Props 的運作</li>
<li>修正範例中的錯誤（三題，只需要調整 HTML）<a id="more"></a>
<a href="https://codepen.io/Wcc723/pen/eYJjgag?editors=1010">https://codepen.io/Wcc723/pen/eYJjgag?editors=1010</a></li>
</ul>
<h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><p class="codepen" data-height="300" data-default-tab="html" data-slug-hash="abRLzWy" data-user="pvzfeusk" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/pvzfeusk/pen/abRLzWy">
  Vue - Props</a> by 胡謦麟 (<a href="https://codepen.io/pvzfeusk">@pvzfeusk</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS Vue.js</tag>
      </tags>
  </entry>
</search>
